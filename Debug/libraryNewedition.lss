
libraryNewedition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003fc  00800060  00006880  00006914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  0080045c  0080045c  00006d10  2**0
                  ALLOC
  3 .stab         0000630c  00000000  00000000  00006d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000195e  00000000  00000000  0000d01c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e97a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000eb1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001249d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e6       	ldi	r31, 0x68	; 104
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 35       	cpi	r26, 0x5C	; 92
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e5       	ldi	r26, 0x5C	; 92
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <main>
      8a:	0c 94 3e 34 	jmp	0x687c	; 0x687c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e1       	ldi	r26, 0x1A	; 26
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 33 	jmp	0x663c	; 0x663c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 33 	jmp	0x6654	; 0x6654 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 33 	jmp	0x6654	; 0x6654 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e1       	ldi	r24, 0x1A	; 26
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 33 	jmp	0x663c	; 0x663c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 33 	jmp	0x6614	; 0x6614 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e1       	ldi	r22, 0x1A	; 26
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 26 33 	jmp	0x664c	; 0x664c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2a 33 	jmp	0x6654	; 0x6654 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2a 33 	jmp	0x6654	; 0x6654 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2a 33 	jmp	0x6654	; 0x6654 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 12 33 	jmp	0x6624	; 0x6624 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2e 33 	jmp	0x665c	; 0x665c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0a 33 	jmp	0x6614	; 0x6614 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 26 33 	jmp	0x664c	; 0x664c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 5d       	subi	r30, 0xDE	; 222
     aca:	fc 4f       	sbci	r31, 0xFC	; 252
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_vidSetPortxDir>:
 *	1 -> OUTPUT
 */

/* PORTx Direction only*/
void DIO_vidSetPortxDir(u8 PortName, u8 PortDir)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_vidSetPortxDir+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_vidSetPortxDir+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortName)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	3c 83       	std	Y+4, r19	; 0x04
     e46:	2b 83       	std	Y+3, r18	; 0x03
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f1       	breq	.+66     	; 0xe94 <DIO_vidSetPortxDir+0x66>
     e52:	2b 81       	ldd	r18, Y+3	; 0x03
     e54:	3c 81       	ldd	r19, Y+4	; 0x04
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <DIO_vidSetPortxDir+0x38>
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	61 f0       	breq	.+24     	; 0xe7c <DIO_vidSetPortxDir+0x4e>
     e64:	3a c0       	rjmp	.+116    	; 0xeda <DIO_vidSetPortxDir+0xac>
     e66:	2b 81       	ldd	r18, Y+3	; 0x03
     e68:	3c 81       	ldd	r19, Y+4	; 0x04
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	f1 f0       	breq	.+60     	; 0xeac <DIO_vidSetPortxDir+0x7e>
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	91 05       	cpc	r25, r1
     e78:	29 f1       	breq	.+74     	; 0xec4 <DIO_vidSetPortxDir+0x96>
     e7a:	2f c0       	rjmp	.+94     	; 0xeda <DIO_vidSetPortxDir+0xac>
	{
		// PORTA in AVR MICROCONTROLLER
		case PORTA:
			if(PortDir == INPUT)
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	88 23       	and	r24, r24
     e80:	21 f4       	brne	.+8      	; 0xe8a <DIO_vidSetPortxDir+0x5c>
			{
				// DDR for register is all input directed
				DDRA_REG = 0x00;
     e82:	ea e3       	ldi	r30, 0x3A	; 58
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	10 82       	st	Z, r1
     e88:	28 c0       	rjmp	.+80     	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRA_REG = 0xff;
     e8a:	ea e3       	ldi	r30, 0x3A	; 58
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	80 83       	st	Z, r24
     e92:	23 c0       	rjmp	.+70     	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PORTB in AVR MICROCONTROLLER
		case PORTB:
			if(PortDir == INPUT)
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 23       	and	r24, r24
     e98:	21 f4       	brne	.+8      	; 0xea2 <DIO_vidSetPortxDir+0x74>
			{
				// DDR for register is all input directed
				DDRB_REG = 0x00;
     e9a:	e7 e3       	ldi	r30, 0x37	; 55
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	10 82       	st	Z, r1
     ea0:	1c c0       	rjmp	.+56     	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRB_REG = 0xff;
     ea2:	e7 e3       	ldi	r30, 0x37	; 55
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	80 83       	st	Z, r24
     eaa:	17 c0       	rjmp	.+46     	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PARTC in AVR MICROCONTROLLER
		case PORTC:
			if(PortDir == INPUT)
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	88 23       	and	r24, r24
     eb0:	21 f4       	brne	.+8      	; 0xeba <DIO_vidSetPortxDir+0x8c>
			{
				// DDR for register is all input directed
				DDRC_REG = 0x00;
     eb2:	e4 e3       	ldi	r30, 0x34	; 52
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	10 82       	st	Z, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRC_REG = 0xff;
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	80 83       	st	Z, r24
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PORTD in AVR MICROCONTROLLER
		case PORTD:
			if(PortDir == INPUT)
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 23       	and	r24, r24
     ec8:	21 f4       	brne	.+8      	; 0xed2 <DIO_vidSetPortxDir+0xa4>
			{
				// DDR for register is all input directed
				DDRD_REG = 0x00;
     eca:	e1 e3       	ldi	r30, 0x31	; 49
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	10 82       	st	Z, r1
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRD_REG = 0xff;
     ed2:	e1 e3       	ldi	r30, 0x31	; 49
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <DIO_vidSetPortValue>:

// PORTx VALUE
void DIO_vidSetPortValue(u8 Portname, u8 Value)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <DIO_vidSetPortValue+0x6>
     eee:	00 d0       	rcall	.+0      	; 0xef0 <DIO_vidSetPortValue+0x8>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Portname)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3c 83       	std	Y+4, r19	; 0x04
     f00:	2b 83       	std	Y+3, r18	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	d1 f0       	breq	.+52     	; 0xf40 <DIO_vidSetPortValue+0x58>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <DIO_vidSetPortValue+0x38>
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	61 f0       	breq	.+24     	; 0xf36 <DIO_vidSetPortValue+0x4e>
     f1e:	1e c0       	rjmp	.+60     	; 0xf5c <DIO_vidSetPortValue+0x74>
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	81 f0       	breq	.+32     	; 0xf4a <DIO_vidSetPortValue+0x62>
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	81 f0       	breq	.+32     	; 0xf54 <DIO_vidSetPortValue+0x6c>
     f34:	13 c0       	rjmp	.+38     	; 0xf5c <DIO_vidSetPortValue+0x74>
	{
		case PORTA:
			PORTA_REG = Value;
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	80 83       	st	Z, r24
     f3e:	0e c0       	rjmp	.+28     	; 0xf5c <DIO_vidSetPortValue+0x74>
			break;
		case PORTB:
			PORTB_REG = Value;
     f40:	e8 e3       	ldi	r30, 0x38	; 56
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	80 83       	st	Z, r24
     f48:	09 c0       	rjmp	.+18     	; 0xf5c <DIO_vidSetPortValue+0x74>
			break;
		case PORTC:
			PORTC_REG = Value;
     f4a:	e5 e3       	ldi	r30, 0x35	; 53
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	80 83       	st	Z, r24
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <DIO_vidSetPortValue+0x74>
			break;
		case PORTD:
			PORTD_REG = Value;
     f54:	e2 e3       	ldi	r30, 0x32	; 50
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DIO_vidSetPinxDir>:

// PORTx.n Direction
void DIO_vidSetPinxDir(u8 portname, u8 pin_number, u8 state)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <DIO_vidSetPinxDir+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <DIO_vidSetPinxDir+0x8>
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	6a 83       	std	Y+2, r22	; 0x02
     f7c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	3d 83       	std	Y+5, r19	; 0x05
     f86:	2c 83       	std	Y+4, r18	; 0x04
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_vidSetPinxDir+0x2a>
     f92:	59 c0       	rjmp	.+178    	; 0x1046 <DIO_vidSetPinxDir+0xdc>
     f94:	2c 81       	ldd	r18, Y+4	; 0x04
     f96:	3d 81       	ldd	r19, Y+5	; 0x05
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <DIO_vidSetPinxDir+0x3e>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <DIO_vidSetPinxDir+0x58>
     fa6:	13 c1       	rjmp	.+550    	; 0x11ce <DIO_vidSetPinxDir+0x264>
     fa8:	2c 81       	ldd	r18, Y+4	; 0x04
     faa:	3d 81       	ldd	r19, Y+5	; 0x05
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <DIO_vidSetPinxDir+0x4a>
     fb2:	8b c0       	rjmp	.+278    	; 0x10ca <DIO_vidSetPinxDir+0x160>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	91 05       	cpc	r25, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <DIO_vidSetPinxDir+0x56>
     fbe:	c7 c0       	rjmp	.+398    	; 0x114e <DIO_vidSetPinxDir+0x1e4>
     fc0:	06 c1       	rjmp	.+524    	; 0x11ce <DIO_vidSetPinxDir+0x264>
	{
		case PORTA:
			if (state == OUTPUT)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <DIO_vidSetPinxDir+0x86>
				set_bit(DDRA_REG, pin_number);
     fc8:	aa e3       	ldi	r26, 0x3A	; 58
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea e3       	ldi	r30, 0x3A	; 58
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_vidSetPinxDir+0x7c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_vidSetPinxDir+0x78>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	ef c0       	rjmp	.+478    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_vidSetPinxDir+0x8e>
     ff6:	eb c0       	rjmp	.+470    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			{
				// DDR IS INPUT
				clr_bit(DDRA_REG, pin_number);
     ff8:	aa e3       	ldi	r26, 0x3A	; 58
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ea e3       	ldi	r30, 0x3A	; 58
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_vidSetPinxDir+0xaa>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	2a 95       	dec	r18
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_vidSetPinxDir+0xa6>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTA_REG, pin_number);
    101e:	ab e3       	ldi	r26, 0x3B	; 59
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	eb e3       	ldi	r30, 0x3B	; 59
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_vidSetPinxDir+0xd2>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_vidSetPinxDir+0xce>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	c4 c0       	rjmp	.+392    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	a1 f4       	brne	.+40     	; 0x1074 <DIO_vidSetPinxDir+0x10a>
				set_bit(DDRB_REG, pin_number);
    104c:	a7 e3       	ldi	r26, 0x37	; 55
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e7 e3       	ldi	r30, 0x37	; 55
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_vidSetPinxDir+0x100>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_vidSetPinxDir+0xfc>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	ad c0       	rjmp	.+346    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	88 23       	and	r24, r24
    1078:	09 f0       	breq	.+2      	; 0x107c <DIO_vidSetPinxDir+0x112>
    107a:	a9 c0       	rjmp	.+338    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			{
				clr_bit(DDRB_REG, pin_number);
    107c:	a7 e3       	ldi	r26, 0x37	; 55
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e3       	ldi	r30, 0x37	; 55
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_vidSetPinxDir+0x12e>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	2a 95       	dec	r18
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_vidSetPinxDir+0x12a>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTB_REG, pin_number);
    10a2:	a8 e3       	ldi	r26, 0x38	; 56
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e8 e3       	ldi	r30, 0x38	; 56
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_vidSetPinxDir+0x156>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_vidSetPinxDir+0x152>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	82 c0       	rjmp	.+260    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a1 f4       	brne	.+40     	; 0x10f8 <DIO_vidSetPinxDir+0x18e>
				set_bit(DDRC_REG, pin_number);
    10d0:	a4 e3       	ldi	r26, 0x34	; 52
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e4 e3       	ldi	r30, 0x34	; 52
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_vidSetPinxDir+0x184>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_vidSetPinxDir+0x180>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	6b c0       	rjmp	.+214    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_vidSetPinxDir+0x196>
    10fe:	67 c0       	rjmp	.+206    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			{
				clr_bit(DDRC_REG, pin_number);
    1100:	a4 e3       	ldi	r26, 0x34	; 52
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e4 e3       	ldi	r30, 0x34	; 52
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_vidSetPinxDir+0x1b2>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	2a 95       	dec	r18
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_vidSetPinxDir+0x1ae>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTC_REG, pin_number);
    1126:	a5 e3       	ldi	r26, 0x35	; 53
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e5 e3       	ldi	r30, 0x35	; 53
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_vidSetPinxDir+0x1da>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_vidSetPinxDir+0x1d6>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	40 c0       	rjmp	.+128    	; 0x11ce <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	a1 f4       	brne	.+40     	; 0x117c <DIO_vidSetPinxDir+0x212>
				set_bit(DDRD_REG, pin_number);
    1154:	a1 e3       	ldi	r26, 0x31	; 49
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_vidSetPinxDir+0x208>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_vidSetPinxDir+0x204>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	29 c0       	rjmp	.+82     	; 0x11ce <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 23       	and	r24, r24
    1180:	31 f5       	brne	.+76     	; 0x11ce <DIO_vidSetPinxDir+0x264>
			{
				// CLEAR
				clr_bit(DDRD_REG, pin_number);
    1182:	a1 e3       	ldi	r26, 0x31	; 49
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e1 e3       	ldi	r30, 0x31	; 49
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_vidSetPinxDir+0x234>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	2a 95       	dec	r18
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_vidSetPinxDir+0x230>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTD_REG, pin_number);
    11a8:	a2 e3       	ldi	r26, 0x32	; 50
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_vidSetPinxDir+0x25c>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_vidSetPinxDir+0x258>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_vidSetPinValue>:

// PINx Whole value
void DIO_vidSetPinValue(u8 portname, u8 value)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_vidSetPinValue+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_vidSetPinValue+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3c 83       	std	Y+4, r19	; 0x04
    11f6:	2b 83       	std	Y+3, r18	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	d1 f0       	breq	.+52     	; 0x1236 <DIO_vidSetPinValue+0x58>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <DIO_vidSetPinValue+0x38>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	61 f0       	breq	.+24     	; 0x122c <DIO_vidSetPinValue+0x4e>
    1214:	1e c0       	rjmp	.+60     	; 0x1252 <DIO_vidSetPinValue+0x74>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	81 f0       	breq	.+32     	; 0x1240 <DIO_vidSetPinValue+0x62>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	81 f0       	breq	.+32     	; 0x124a <DIO_vidSetPinValue+0x6c>
    122a:	13 c0       	rjmp	.+38     	; 0x1252 <DIO_vidSetPinValue+0x74>
	{
		case PORTA:
			PINA_REG = value;
    122c:	e9 e3       	ldi	r30, 0x39	; 57
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <DIO_vidSetPinValue+0x74>
			break;
		case PORTB:
			PINB_REG = value;
    1236:	e6 e3       	ldi	r30, 0x36	; 54
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <DIO_vidSetPinValue+0x74>
			break;
		case PORTC:
			PINC_REG = value;
    1240:	e3 e3       	ldi	r30, 0x33	; 51
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <DIO_vidSetPinValue+0x74>
			break;
		case PORTD:
			PIND_REG = value;
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <DIO_u8GetPinBitValue>:

// GET PIN VALUE
u8 DIO_u8GetPinBitValue(u8 Portname, u8 Pin_number)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <DIO_u8GetPinBitValue+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_u8GetPinBitValue+0x8>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	6b 83       	std	Y+3, r22	; 0x03
	u8 tmp = 0;
    1272:	19 82       	std	Y+1, r1	; 0x01
	switch(Portname)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3d 83       	std	Y+5, r19	; 0x05
    127c:	2c 83       	std	Y+4, r18	; 0x04
    127e:	4c 81       	ldd	r20, Y+4	; 0x04
    1280:	5d 81       	ldd	r21, Y+5	; 0x05
    1282:	41 30       	cpi	r20, 0x01	; 1
    1284:	51 05       	cpc	r21, r1
    1286:	59 f1       	breq	.+86     	; 0x12de <DIO_u8GetPinBitValue+0x7e>
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	91 05       	cpc	r25, r1
    1290:	34 f4       	brge	.+12     	; 0x129e <DIO_u8GetPinBitValue+0x3e>
    1292:	2c 81       	ldd	r18, Y+4	; 0x04
    1294:	3d 81       	ldd	r19, Y+5	; 0x05
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	69 f0       	breq	.+26     	; 0x12b6 <DIO_u8GetPinBitValue+0x56>
    129c:	5b c0       	rjmp	.+182    	; 0x1354 <DIO_u8GetPinBitValue+0xf4>
    129e:	4c 81       	ldd	r20, Y+4	; 0x04
    12a0:	5d 81       	ldd	r21, Y+5	; 0x05
    12a2:	42 30       	cpi	r20, 0x02	; 2
    12a4:	51 05       	cpc	r21, r1
    12a6:	79 f1       	breq	.+94     	; 0x1306 <DIO_u8GetPinBitValue+0xa6>
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO_u8GetPinBitValue+0x54>
    12b2:	3d c0       	rjmp	.+122    	; 0x132e <DIO_u8GetPinBitValue+0xce>
    12b4:	4f c0       	rjmp	.+158    	; 0x1354 <DIO_u8GetPinBitValue+0xf4>
	{
		case PORTA:
			tmp = PINA_REG;
    12b6:	e9 e3       	ldi	r30, 0x39	; 57
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8GetPinBitValue+0x72>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8GetPinBitValue+0x6e>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	3b c0       	rjmp	.+118    	; 0x1354 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTB:
			tmp = PINB_REG;
    12de:	e6 e3       	ldi	r30, 0x36	; 54
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8GetPinBitValue+0x9a>
    12f6:	55 95       	asr	r21
    12f8:	47 95       	ror	r20
    12fa:	8a 95       	dec	r24
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8GetPinBitValue+0x96>
    12fe:	ca 01       	movw	r24, r20
    1300:	81 70       	andi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	27 c0       	rjmp	.+78     	; 0x1354 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTC:
			tmp = PINC_REG;
    1306:	e3 e3       	ldi	r30, 0x33	; 51
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8GetPinBitValue+0xc2>
    131e:	55 95       	asr	r21
    1320:	47 95       	ror	r20
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8GetPinBitValue+0xbe>
    1326:	ca 01       	movw	r24, r20
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTD:
			tmp = PIND_REG;
    132e:	e0 e3       	ldi	r30, 0x30	; 48
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a9 01       	movw	r20, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_u8GetPinBitValue+0xea>
    1346:	55 95       	asr	r21
    1348:	47 95       	ror	r20
    134a:	8a 95       	dec	r24
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_u8GetPinBitValue+0xe6>
    134e:	ca 01       	movw	r24, r20
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_vidSetPortBitValue>:

// PORTx Bit value
void DIO_vidSetPortBitValue(u8 portname, u8 port_number, u8 state)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_vidSetPortBitValue+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_vidSetPortBitValue+0x8>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	6a 83       	std	Y+2, r22	; 0x02
    1378:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3d 83       	std	Y+5, r19	; 0x05
    1382:	2c 83       	std	Y+4, r18	; 0x04
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <DIO_vidSetPortBitValue+0x2a>
    138e:	47 c0       	rjmp	.+142    	; 0x141e <DIO_vidSetPortBitValue+0xb8>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <DIO_vidSetPortBitValue+0x3e>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	71 f0       	breq	.+28     	; 0x13be <DIO_vidSetPortBitValue+0x58>
    13a2:	cb c0       	rjmp	.+406    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_vidSetPortBitValue+0x4a>
    13ae:	67 c0       	rjmp	.+206    	; 0x147e <DIO_vidSetPortBitValue+0x118>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <DIO_vidSetPortBitValue+0x56>
    13ba:	91 c0       	rjmp	.+290    	; 0x14de <DIO_vidSetPortBitValue+0x178>
    13bc:	be c0       	rjmp	.+380    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
	{
		case PORTA:
			if (state == OUTPUT)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <DIO_vidSetPortBitValue+0x86>
				set_bit(PORTA_REG, port_number);
    13c4:	ab e3       	ldi	r26, 0x3B	; 59
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	eb e3       	ldi	r30, 0x3B	; 59
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_vidSetPortBitValue+0x7c>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_vidSetPortBitValue+0x78>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	a7 c0       	rjmp	.+334    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 23       	and	r24, r24
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <DIO_vidSetPortBitValue+0x8e>
    13f2:	a3 c0       	rjmp	.+326    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTA_REG, port_number);
    13f4:	ab e3       	ldi	r26, 0x3B	; 59
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	eb e3       	ldi	r30, 0x3B	; 59
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_vidSetPortBitValue+0xac>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_vidSetPortBitValue+0xa8>
    1416:	80 95       	com	r24
    1418:	84 23       	and	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	8e c0       	rjmp	.+284    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	a1 f4       	brne	.+40     	; 0x144c <DIO_vidSetPortBitValue+0xe6>
				set_bit(PORTB_REG, port_number);
    1424:	a8 e3       	ldi	r26, 0x38	; 56
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e8 e3       	ldi	r30, 0x38	; 56
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_vidSetPortBitValue+0xdc>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_vidSetPortBitValue+0xd8>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	77 c0       	rjmp	.+238    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 23       	and	r24, r24
    1450:	09 f0       	breq	.+2      	; 0x1454 <DIO_vidSetPortBitValue+0xee>
    1452:	73 c0       	rjmp	.+230    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTB_REG, port_number);
    1454:	a8 e3       	ldi	r26, 0x38	; 56
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 e3       	ldi	r30, 0x38	; 56
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_vidSetPortBitValue+0x10c>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_vidSetPortBitValue+0x108>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	5e c0       	rjmp	.+188    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	a1 f4       	brne	.+40     	; 0x14ac <DIO_vidSetPortBitValue+0x146>
				set_bit(PORTC_REG, port_number);
    1484:	a5 e3       	ldi	r26, 0x35	; 53
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e3       	ldi	r30, 0x35	; 53
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_vidSetPortBitValue+0x13c>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_vidSetPortBitValue+0x138>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	47 c0       	rjmp	.+142    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 23       	and	r24, r24
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <DIO_vidSetPortBitValue+0x14e>
    14b2:	43 c0       	rjmp	.+134    	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTC_REG, port_number);
    14b4:	a5 e3       	ldi	r26, 0x35	; 53
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e5 e3       	ldi	r30, 0x35	; 53
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_vidSetPortBitValue+0x16c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_vidSetPortBitValue+0x168>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	2e c0       	rjmp	.+92     	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	a1 f4       	brne	.+40     	; 0x150c <DIO_vidSetPortBitValue+0x1a6>
				set_bit(PORTD_REG, port_number);
    14e4:	a2 e3       	ldi	r26, 0x32	; 50
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e2 e3       	ldi	r30, 0x32	; 50
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_vidSetPortBitValue+0x19c>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_vidSetPortBitValue+0x198>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	17 c0       	rjmp	.+46     	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 23       	and	r24, r24
    1510:	a1 f4       	brne	.+40     	; 0x153a <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTD_REG, port_number);
    1512:	a2 e3       	ldi	r26, 0x32	; 50
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e2 e3       	ldi	r30, 0x32	; 50
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_vidSetPortBitValue+0x1ca>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_vidSetPortBitValue+0x1c6>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <DIO_vidSetPintBitValue>:



// PINx Bit value
void DIO_vidSetPintBitValue(u8 portname, u8 port_number, u8 state)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <DIO_vidSetPintBitValue+0x6>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_vidSetPintBitValue+0x8>
    1552:	0f 92       	push	r0
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	6a 83       	std	Y+2, r22	; 0x02
    155c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3d 83       	std	Y+5, r19	; 0x05
    1566:	2c 83       	std	Y+4, r18	; 0x04
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <DIO_vidSetPintBitValue+0x2a>
    1572:	47 c0       	rjmp	.+142    	; 0x1602 <DIO_vidSetPintBitValue+0xb8>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <DIO_vidSetPintBitValue+0x3e>
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	71 f0       	breq	.+28     	; 0x15a2 <DIO_vidSetPintBitValue+0x58>
    1586:	cb c0       	rjmp	.+406    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
    1588:	2c 81       	ldd	r18, Y+4	; 0x04
    158a:	3d 81       	ldd	r19, Y+5	; 0x05
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <DIO_vidSetPintBitValue+0x4a>
    1592:	67 c0       	rjmp	.+206    	; 0x1662 <DIO_vidSetPintBitValue+0x118>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_vidSetPintBitValue+0x56>
    159e:	91 c0       	rjmp	.+290    	; 0x16c2 <DIO_vidSetPintBitValue+0x178>
    15a0:	be c0       	rjmp	.+380    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
	{
		case PORTA:
			if (state == OUTPUT)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	a1 f4       	brne	.+40     	; 0x15d0 <DIO_vidSetPintBitValue+0x86>
				set_bit(PINA_REG, port_number);
    15a8:	a9 e3       	ldi	r26, 0x39	; 57
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e9 e3       	ldi	r30, 0x39	; 57
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_vidSetPintBitValue+0x7c>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_vidSetPintBitValue+0x78>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	a7 c0       	rjmp	.+334    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	88 23       	and	r24, r24
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <DIO_vidSetPintBitValue+0x8e>
    15d6:	a3 c0       	rjmp	.+326    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINA_REG, port_number);
    15d8:	a9 e3       	ldi	r26, 0x39	; 57
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e9 e3       	ldi	r30, 0x39	; 57
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_vidSetPintBitValue+0xac>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_vidSetPintBitValue+0xa8>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	8e c0       	rjmp	.+284    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	a1 f4       	brne	.+40     	; 0x1630 <DIO_vidSetPintBitValue+0xe6>
				set_bit(PINB_REG, port_number);
    1608:	a6 e3       	ldi	r26, 0x36	; 54
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e6 e3       	ldi	r30, 0x36	; 54
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_vidSetPintBitValue+0xdc>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_vidSetPintBitValue+0xd8>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	77 c0       	rjmp	.+238    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	88 23       	and	r24, r24
    1634:	09 f0       	breq	.+2      	; 0x1638 <DIO_vidSetPintBitValue+0xee>
    1636:	73 c0       	rjmp	.+230    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINB_REG, port_number);
    1638:	a6 e3       	ldi	r26, 0x36	; 54
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e6 e3       	ldi	r30, 0x36	; 54
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_vidSetPintBitValue+0x10c>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_vidSetPintBitValue+0x108>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	5e c0       	rjmp	.+188    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	a1 f4       	brne	.+40     	; 0x1690 <DIO_vidSetPintBitValue+0x146>
				set_bit(PINC_REG, port_number);
    1668:	a3 e3       	ldi	r26, 0x33	; 51
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e3 e3       	ldi	r30, 0x33	; 51
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_vidSetPintBitValue+0x13c>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_vidSetPintBitValue+0x138>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	47 c0       	rjmp	.+142    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	88 23       	and	r24, r24
    1694:	09 f0       	breq	.+2      	; 0x1698 <DIO_vidSetPintBitValue+0x14e>
    1696:	43 c0       	rjmp	.+134    	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINC_REG, port_number);
    1698:	a3 e3       	ldi	r26, 0x33	; 51
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e3 e3       	ldi	r30, 0x33	; 51
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_vidSetPintBitValue+0x16c>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_vidSetPintBitValue+0x168>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	2e c0       	rjmp	.+92     	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	a1 f4       	brne	.+40     	; 0x16f0 <DIO_vidSetPintBitValue+0x1a6>
				set_bit(PIND_REG, port_number);
    16c8:	a0 e3       	ldi	r26, 0x30	; 48
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e0 e3       	ldi	r30, 0x30	; 48
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_vidSetPintBitValue+0x19c>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_vidSetPintBitValue+0x198>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	17 c0       	rjmp	.+46     	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 23       	and	r24, r24
    16f4:	a1 f4       	brne	.+40     	; 0x171e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PIND_REG, port_number);
    16f6:	a0 e3       	ldi	r26, 0x30	; 48
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e0 e3       	ldi	r30, 0x30	; 48
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_vidSetPintBitValue+0x1ca>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_vidSetPintBitValue+0x1c6>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <DIO_GetPortValue>:

u8 DIO_GetPortValue(u8 portname)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <DIO_GetPortValue+0x6>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <DIO_GetPortValue+0x8>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	8a 83       	std	Y+2, r24	; 0x02
	u8 tmp = 0;
    173c:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3c 83       	std	Y+4, r19	; 0x04
    1746:	2b 83       	std	Y+3, r18	; 0x03
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	d1 f0       	breq	.+52     	; 0x1786 <DIO_GetPortValue+0x58>
    1752:	2b 81       	ldd	r18, Y+3	; 0x03
    1754:	3c 81       	ldd	r19, Y+4	; 0x04
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <DIO_GetPortValue+0x38>
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	61 f0       	breq	.+24     	; 0x177c <DIO_GetPortValue+0x4e>
    1764:	1e c0       	rjmp	.+60     	; 0x17a2 <DIO_GetPortValue+0x74>
    1766:	2b 81       	ldd	r18, Y+3	; 0x03
    1768:	3c 81       	ldd	r19, Y+4	; 0x04
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	81 f0       	breq	.+32     	; 0x1790 <DIO_GetPortValue+0x62>
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	91 05       	cpc	r25, r1
    1778:	81 f0       	breq	.+32     	; 0x179a <DIO_GetPortValue+0x6c>
    177a:	13 c0       	rjmp	.+38     	; 0x17a2 <DIO_GetPortValue+0x74>
	{
		case PORTA:
			tmp = PORTA_REG;
    177c:	eb e3       	ldi	r30, 0x3B	; 59
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	0e c0       	rjmp	.+28     	; 0x17a2 <DIO_GetPortValue+0x74>
			break;

		case PORTB:
			tmp = PORTB_REG;
    1786:	e8 e3       	ldi	r30, 0x38	; 56
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <DIO_GetPortValue+0x74>
			break;

		case PORTC:
			tmp = PORTC_REG;
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <DIO_GetPortValue+0x74>
			break;

		case PORTD:
			tmp = PORTD_REG;
    179a:	e2 e3       	ldi	r30, 0x32	; 50
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 portname)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_GetPinValue+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <DIO_GetPinValue+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = 0;
    17c0:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c 83       	std	Y+4, r19	; 0x04
    17ca:	2b 83       	std	Y+3, r18	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	d1 f0       	breq	.+52     	; 0x180a <DIO_GetPinValue+0x58>
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	2c f4       	brge	.+10     	; 0x17ea <DIO_GetPinValue+0x38>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	61 f0       	breq	.+24     	; 0x1800 <DIO_GetPinValue+0x4e>
    17e8:	1e c0       	rjmp	.+60     	; 0x1826 <DIO_GetPinValue+0x74>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	81 f0       	breq	.+32     	; 0x1814 <DIO_GetPinValue+0x62>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	81 f0       	breq	.+32     	; 0x181e <DIO_GetPinValue+0x6c>
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <DIO_GetPinValue+0x74>
	{
		case PORTA:
			value = PINA_REG;
    1800:	e9 e3       	ldi	r30, 0x39	; 57
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <DIO_GetPinValue+0x74>
			break;

		case PORTB:
			value = PINB_REG;
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <DIO_GetPinValue+0x74>
			break;

		case PORTC:
			value = PINC_REG;
    1814:	e3 e3       	ldi	r30, 0x33	; 51
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <DIO_GetPinValue+0x74>
			break;

		case PORTD:
			value = PIND_REG;
    181e:	e0 e3       	ldi	r30, 0x30	; 48
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return value;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO_u8GetPortBitValue>:

u8 DIO_u8GetPortBitValue(u8 portname, u8 Pin_number)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_u8GetPortBitValue+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_u8GetPortBitValue+0x8>
    183e:	0f 92       	push	r0
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	6b 83       	std	Y+3, r22	; 0x03
	u8 tmp = 0;
    1848:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3d 83       	std	Y+5, r19	; 0x05
    1852:	2c 83       	std	Y+4, r18	; 0x04
    1854:	4c 81       	ldd	r20, Y+4	; 0x04
    1856:	5d 81       	ldd	r21, Y+5	; 0x05
    1858:	41 30       	cpi	r20, 0x01	; 1
    185a:	51 05       	cpc	r21, r1
    185c:	59 f1       	breq	.+86     	; 0x18b4 <DIO_u8GetPortBitValue+0x7e>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	34 f4       	brge	.+12     	; 0x1874 <DIO_u8GetPortBitValue+0x3e>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	21 15       	cp	r18, r1
    186e:	31 05       	cpc	r19, r1
    1870:	69 f0       	breq	.+26     	; 0x188c <DIO_u8GetPortBitValue+0x56>
    1872:	5b c0       	rjmp	.+182    	; 0x192a <DIO_u8GetPortBitValue+0xf4>
    1874:	4c 81       	ldd	r20, Y+4	; 0x04
    1876:	5d 81       	ldd	r21, Y+5	; 0x05
    1878:	42 30       	cpi	r20, 0x02	; 2
    187a:	51 05       	cpc	r21, r1
    187c:	79 f1       	breq	.+94     	; 0x18dc <DIO_u8GetPortBitValue+0xa6>
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <DIO_u8GetPortBitValue+0x54>
    1888:	3d c0       	rjmp	.+122    	; 0x1904 <DIO_u8GetPortBitValue+0xce>
    188a:	4f c0       	rjmp	.+158    	; 0x192a <DIO_u8GetPortBitValue+0xf4>
	{
		case PORTA:
			tmp = PORTA_REG;
    188c:	eb e3       	ldi	r30, 0x3B	; 59
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_u8GetPortBitValue+0x72>
    18a4:	55 95       	asr	r21
    18a6:	47 95       	ror	r20
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_u8GetPortBitValue+0x6e>
    18ac:	ca 01       	movw	r24, r20
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	3b c0       	rjmp	.+118    	; 0x192a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTB:
			tmp = PORTB_REG;
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a9 01       	movw	r20, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_u8GetPortBitValue+0x9a>
    18cc:	55 95       	asr	r21
    18ce:	47 95       	ror	r20
    18d0:	8a 95       	dec	r24
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_u8GetPortBitValue+0x96>
    18d4:	ca 01       	movw	r24, r20
    18d6:	81 70       	andi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	27 c0       	rjmp	.+78     	; 0x192a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTC:
			tmp = PORTC_REG;
    18dc:	e5 e3       	ldi	r30, 0x35	; 53
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_u8GetPortBitValue+0xc2>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_u8GetPortBitValue+0xbe>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	13 c0       	rjmp	.+38     	; 0x192a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTD:
			tmp = PORTD_REG;
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a9 01       	movw	r20, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_u8GetPortBitValue+0xea>
    191c:	55 95       	asr	r21
    191e:	47 95       	ror	r20
    1920:	8a 95       	dec	r24
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_u8GetPortBitValue+0xe6>
    1924:	ca 01       	movw	r24, r20
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <INTERRUPT_vidGlobalEnable>:
#define DISABLE	0


// Set Global enable in Register SREG
void INTERRUPT_vidGlobalEnable(u8 MODE)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <INTERRUPT_vidGlobalEnable+0x6>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
	switch(MODE)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3b 83       	std	Y+3, r19	; 0x03
    1952:	2a 83       	std	Y+2, r18	; 0x02
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	31 f0       	breq	.+12     	; 0x1968 <INTERRUPT_vidGlobalEnable+0x2c>
    195c:	2a 81       	ldd	r18, Y+2	; 0x02
    195e:	3b 81       	ldd	r19, Y+3	; 0x03
    1960:	21 30       	cpi	r18, 0x01	; 1
    1962:	31 05       	cpc	r19, r1
    1964:	49 f0       	breq	.+18     	; 0x1978 <INTERRUPT_vidGlobalEnable+0x3c>
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <INTERRUPT_vidGlobalEnable+0x4a>
	{
	case DISABLE:
		clr_bit(SREG_M, 7);
    1968:	af e5       	ldi	r26, 0x5F	; 95
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ef e5       	ldi	r30, 0x5F	; 95
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 77       	andi	r24, 0x7F	; 127
    1974:	8c 93       	st	X, r24
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <INTERRUPT_vidGlobalEnable+0x4a>
		break;
	case ENABLE:
		set_bit(SREG_M, 7);
    1978:	af e5       	ldi	r26, 0x5F	; 95
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ef e5       	ldi	r30, 0x5F	; 95
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 68       	ori	r24, 0x80	; 128
    1984:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <INTERRUPT_vidSetInterrupt>:


// Enable EXTERNAL HARDWARE INTERRUPTS, INT0, INT1, INT2 FLAGS
void INTERRUPT_vidSetInterrupt(u8 PIN_NAME)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <INTERRUPT_vidSetInterrupt+0x6>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01
	switch(PIN_NAME)
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3b 83       	std	Y+3, r19	; 0x03
    19a8:	2a 83       	std	Y+2, r18	; 0x02
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	86 30       	cpi	r24, 0x06	; 6
    19b0:	91 05       	cpc	r25, r1
    19b2:	59 f0       	breq	.+22     	; 0x19ca <INTERRUPT_vidSetInterrupt+0x38>
    19b4:	2a 81       	ldd	r18, Y+2	; 0x02
    19b6:	3b 81       	ldd	r19, Y+3	; 0x03
    19b8:	27 30       	cpi	r18, 0x07	; 7
    19ba:	31 05       	cpc	r19, r1
    19bc:	71 f0       	breq	.+28     	; 0x19da <INTERRUPT_vidSetInterrupt+0x48>
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	85 30       	cpi	r24, 0x05	; 5
    19c4:	91 05       	cpc	r25, r1
    19c6:	89 f0       	breq	.+34     	; 0x19ea <INTERRUPT_vidSetInterrupt+0x58>
    19c8:	17 c0       	rjmp	.+46     	; 0x19f8 <INTERRUPT_vidSetInterrupt+0x66>
	{
	case INT0_BIT:
		set_bit(GICR_M, INT0_BIT);
    19ca:	ab e5       	ldi	r26, 0x5B	; 91
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	eb e5       	ldi	r30, 0x5B	; 91
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	80 64       	ori	r24, 0x40	; 64
    19d6:	8c 93       	st	X, r24
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <INTERRUPT_vidSetInterrupt+0x66>
		break;
	case INT1_BIT:
		set_bit(GICR_M, INT1_BIT);
    19da:	ab e5       	ldi	r26, 0x5B	; 91
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	eb e5       	ldi	r30, 0x5B	; 91
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 68       	ori	r24, 0x80	; 128
    19e6:	8c 93       	st	X, r24
    19e8:	07 c0       	rjmp	.+14     	; 0x19f8 <INTERRUPT_vidSetInterrupt+0x66>
		break;
	case INT2_BIT:
		set_bit(GICR_M, INT2_BIT);
    19ea:	ab e5       	ldi	r26, 0x5B	; 91
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	eb e5       	ldi	r30, 0x5B	; 91
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	80 62       	ori	r24, 0x20	; 32
    19f6:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <INTERRUPT_vidclrInterrupt>:


// Disable EXTERNAL HARDWARE INTERRUPTS, INT0, INT1, INT2 FLAGS
void INTERRUPT_vidclrInterrupt(u8 PIN_NAME)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <INTERRUPT_vidclrInterrupt+0x6>
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	89 83       	std	Y+1, r24	; 0x01
	switch(PIN_NAME)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	3b 83       	std	Y+3, r19	; 0x03
    1a1a:	2a 83       	std	Y+2, r18	; 0x02
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	86 30       	cpi	r24, 0x06	; 6
    1a22:	91 05       	cpc	r25, r1
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <INTERRUPT_vidclrInterrupt+0x38>
    1a26:	2a 81       	ldd	r18, Y+2	; 0x02
    1a28:	3b 81       	ldd	r19, Y+3	; 0x03
    1a2a:	27 30       	cpi	r18, 0x07	; 7
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	71 f0       	breq	.+28     	; 0x1a4c <INTERRUPT_vidclrInterrupt+0x48>
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	85 30       	cpi	r24, 0x05	; 5
    1a36:	91 05       	cpc	r25, r1
    1a38:	89 f0       	breq	.+34     	; 0x1a5c <INTERRUPT_vidclrInterrupt+0x58>
    1a3a:	17 c0       	rjmp	.+46     	; 0x1a6a <INTERRUPT_vidclrInterrupt+0x66>
	{
	case INT0_BIT:
		clr_bit(GICR_M, INT0_BIT);
    1a3c:	ab e5       	ldi	r26, 0x5B	; 91
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	eb e5       	ldi	r30, 0x5B	; 91
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	8f 7b       	andi	r24, 0xBF	; 191
    1a48:	8c 93       	st	X, r24
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <INTERRUPT_vidclrInterrupt+0x66>
		break;
	case INT1_BIT:
		clr_bit(GICR_M, INT1_BIT);
    1a4c:	ab e5       	ldi	r26, 0x5B	; 91
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	eb e5       	ldi	r30, 0x5B	; 91
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 77       	andi	r24, 0x7F	; 127
    1a58:	8c 93       	st	X, r24
    1a5a:	07 c0       	rjmp	.+14     	; 0x1a6a <INTERRUPT_vidclrInterrupt+0x66>
		break;
	case INT2_BIT:
		clr_bit(GICR_M, INT2_BIT);
    1a5c:	ab e5       	ldi	r26, 0x5B	; 91
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	eb e5       	ldi	r30, 0x5B	; 91
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 7d       	andi	r24, 0xDF	; 223
    1a68:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <INTERRUPT_vidSetMCUPin>:

// Mode for triggering
void INTERRUPT_vidSetMCUPin(u8 pin_name)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <INTERRUPT_vidSetMCUPin+0x6>
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	89 83       	std	Y+1, r24	; 0x01
	switch(pin_name)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3b 83       	std	Y+3, r19	; 0x03
    1a8c:	2a 83       	std	Y+2, r18	; 0x02
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	9b 81       	ldd	r25, Y+3	; 0x03
    1a92:	82 30       	cpi	r24, 0x02	; 2
    1a94:	91 05       	cpc	r25, r1
    1a96:	51 f1       	breq	.+84     	; 0x1aec <INTERRUPT_vidSetMCUPin+0x76>
    1a98:	2a 81       	ldd	r18, Y+2	; 0x02
    1a9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a9c:	23 30       	cpi	r18, 0x03	; 3
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	54 f4       	brge	.+20     	; 0x1ab6 <INTERRUPT_vidSetMCUPin+0x40>
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	89 f0       	breq	.+34     	; 0x1acc <INTERRUPT_vidSetMCUPin+0x56>
    1aaa:	2a 81       	ldd	r18, Y+2	; 0x02
    1aac:	3b 81       	ldd	r19, Y+3	; 0x03
    1aae:	21 30       	cpi	r18, 0x01	; 1
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	a1 f0       	breq	.+40     	; 0x1adc <INTERRUPT_vidSetMCUPin+0x66>
    1ab4:	32 c0       	rjmp	.+100    	; 0x1b1a <INTERRUPT_vidSetMCUPin+0xa4>
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	f1 f0       	breq	.+60     	; 0x1afc <INTERRUPT_vidSetMCUPin+0x86>
    1ac0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ac2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ac4:	26 30       	cpi	r18, 0x06	; 6
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	09 f1       	breq	.+66     	; 0x1b0c <INTERRUPT_vidSetMCUPin+0x96>
    1aca:	27 c0       	rjmp	.+78     	; 0x1b1a <INTERRUPT_vidSetMCUPin+0xa4>
	{
	case ISC00_BIT:
		set_bit(MCUSR_M, ISC00_BIT);
    1acc:	a5 e5       	ldi	r26, 0x55	; 85
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e5 e5       	ldi	r30, 0x55	; 85
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	81 60       	ori	r24, 0x01	; 1
    1ad8:	8c 93       	st	X, r24
    1ada:	1f c0       	rjmp	.+62     	; 0x1b1a <INTERRUPT_vidSetMCUPin+0xa4>
		break;
	case ISC01_BIT:
		set_bit(MCUSR_M, ISC01_BIT);
    1adc:	a5 e5       	ldi	r26, 0x55	; 85
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e5 e5       	ldi	r30, 0x55	; 85
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
    1aea:	17 c0       	rjmp	.+46     	; 0x1b1a <INTERRUPT_vidSetMCUPin+0xa4>
		break;
	case ISC10_BIT:
		set_bit(MCUSR_M, ISC10_BIT);
    1aec:	a5 e5       	ldi	r26, 0x55	; 85
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e5       	ldi	r30, 0x55	; 85
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	84 60       	ori	r24, 0x04	; 4
    1af8:	8c 93       	st	X, r24
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <INTERRUPT_vidSetMCUPin+0xa4>
		break;
	case ISC11_BIT:
		set_bit(MCUSR_M, ISC11_BIT);
    1afc:	a5 e5       	ldi	r26, 0x55	; 85
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e5 e5       	ldi	r30, 0x55	; 85
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	88 60       	ori	r24, 0x08	; 8
    1b08:	8c 93       	st	X, r24
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <INTERRUPT_vidSetMCUPin+0xa4>
		break;
	case ISC2_BIT:
		set_bit(MCUCSR_M, ISC2_BIT);
    1b0c:	a4 e5       	ldi	r26, 0x54	; 84
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e4 e5       	ldi	r30, 0x54	; 84
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 64       	ori	r24, 0x40	; 64
    1b18:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <INTERRUPT_vidClrMCUPin>:

// Mode for triggering
void INTERRUPT_vidClrMCUPin(u8 pin_name)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <INTERRUPT_vidClrMCUPin+0x6>
    1b2c:	0f 92       	push	r0
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
	switch(pin_name)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3b 83       	std	Y+3, r19	; 0x03
    1b3c:	2a 83       	std	Y+2, r18	; 0x02
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	91 05       	cpc	r25, r1
    1b46:	51 f1       	breq	.+84     	; 0x1b9c <INTERRUPT_vidClrMCUPin+0x76>
    1b48:	2a 81       	ldd	r18, Y+2	; 0x02
    1b4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b4c:	23 30       	cpi	r18, 0x03	; 3
    1b4e:	31 05       	cpc	r19, r1
    1b50:	54 f4       	brge	.+20     	; 0x1b66 <INTERRUPT_vidClrMCUPin+0x40>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	89 f0       	breq	.+34     	; 0x1b7c <INTERRUPT_vidClrMCUPin+0x56>
    1b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b5e:	21 30       	cpi	r18, 0x01	; 1
    1b60:	31 05       	cpc	r19, r1
    1b62:	a1 f0       	breq	.+40     	; 0x1b8c <INTERRUPT_vidClrMCUPin+0x66>
    1b64:	32 c0       	rjmp	.+100    	; 0x1bca <INTERRUPT_vidClrMCUPin+0xa4>
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	f1 f0       	breq	.+60     	; 0x1bac <INTERRUPT_vidClrMCUPin+0x86>
    1b70:	2a 81       	ldd	r18, Y+2	; 0x02
    1b72:	3b 81       	ldd	r19, Y+3	; 0x03
    1b74:	26 30       	cpi	r18, 0x06	; 6
    1b76:	31 05       	cpc	r19, r1
    1b78:	09 f1       	breq	.+66     	; 0x1bbc <INTERRUPT_vidClrMCUPin+0x96>
    1b7a:	27 c0       	rjmp	.+78     	; 0x1bca <INTERRUPT_vidClrMCUPin+0xa4>
	{
	case ISC00_BIT:
		clr_bit(MCUSR_M, ISC00_BIT);
    1b7c:	a5 e5       	ldi	r26, 0x55	; 85
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e5       	ldi	r30, 0x55	; 85
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	8c 93       	st	X, r24
    1b8a:	1f c0       	rjmp	.+62     	; 0x1bca <INTERRUPT_vidClrMCUPin+0xa4>
		break;
	case ISC01_BIT:
		clr_bit(MCUSR_M, ISC01_BIT);
    1b8c:	a5 e5       	ldi	r26, 0x55	; 85
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e5       	ldi	r30, 0x55	; 85
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8d 7f       	andi	r24, 0xFD	; 253
    1b98:	8c 93       	st	X, r24
    1b9a:	17 c0       	rjmp	.+46     	; 0x1bca <INTERRUPT_vidClrMCUPin+0xa4>
		break;
	case ISC10_BIT:
		clr_bit(MCUSR_M, ISC10_BIT);
    1b9c:	a5 e5       	ldi	r26, 0x55	; 85
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e5 e5       	ldi	r30, 0x55	; 85
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8b 7f       	andi	r24, 0xFB	; 251
    1ba8:	8c 93       	st	X, r24
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <INTERRUPT_vidClrMCUPin+0xa4>
		break;
	case ISC11_BIT:
		clr_bit(MCUSR_M, ISC11_BIT);
    1bac:	a5 e5       	ldi	r26, 0x55	; 85
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e5 e5       	ldi	r30, 0x55	; 85
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	87 7f       	andi	r24, 0xF7	; 247
    1bb8:	8c 93       	st	X, r24
    1bba:	07 c0       	rjmp	.+14     	; 0x1bca <INTERRUPT_vidClrMCUPin+0xa4>
		break;
	case ISC2_BIT:
		clr_bit(MCUCSR_M, ISC2_BIT);
    1bbc:	a4 e5       	ldi	r26, 0x54	; 84
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e4 e5       	ldi	r30, 0x54	; 84
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191
    1bc8:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <KeyPad_vidInitialize>:

u8 lcd_stage1 = 0, lcd_stage2 = 0, lcd_stage3 = 0;

// Columns are input, Rows are output
void KeyPad_vidInitialize(void)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	// Set low nibble columns are input and pulled up
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL1, INPUT);
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL2, INPUT);
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL3, INPUT);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	62 e0       	ldi	r22, 0x02	; 2
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL4, INPUT);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>

	// Set high nibble rows as output
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW1, OUTPUT);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	64 e0       	ldi	r22, 0x04	; 4
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW2, OUTPUT);
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	65 e0       	ldi	r22, 0x05	; 5
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW3, OUTPUT);
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	66 e0       	ldi	r22, 0x06	; 6
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW4, OUTPUT);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	67 e0       	ldi	r22, 0x07	; 7
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_vidSetPinxDir>

	// Rows are all  zeros
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	64 e0       	ldi	r22, 0x04	; 4
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	65 e0       	ldi	r22, 0x05	; 5
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	66 e0       	ldi	r22, 0x06	; 6
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	67 e0       	ldi	r22, 0x07	; 7
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>

	KeyPad_vidKey_Pressed();
    1c56:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KeyPad_vidKey_Pressed>

}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <KeyPad_vidKey_Pressed>:


u8 KeyPad_vidKey_Pressed(void)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	6d 97       	sbiw	r28, 0x1d	; 29
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
	{
		// 1st stage Make sure key is released
		do
		{
			// Rows are all  zeros
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	64 e0       	ldi	r22, 0x04	; 4
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	65 e0       	ldi	r22, 0x05	; 5
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	66 e0       	ldi	r22, 0x06	; 6
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	67 e0       	ldi	r22, 0x07	; 7
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
		}
		while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	8f 70       	andi	r24, 0x0F	; 15
    1ca8:	90 70       	andi	r25, 0x00	; 0
    1caa:	8f 30       	cpi	r24, 0x0F	; 15
    1cac:	91 05       	cpc	r25, r1
    1cae:	11 f7       	brne	.-60     	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 ea       	ldi	r26, 0xA0	; 160
    1cb6:	b1 e4       	ldi	r27, 0x41	; 65
    1cb8:	89 8f       	std	Y+25, r24	; 0x19
    1cba:	9a 8f       	std	Y+26, r25	; 0x1a
    1cbc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	4a ef       	ldi	r20, 0xFA	; 250
    1cce:	54 e4       	ldi	r21, 0x44	; 68
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	8d 8b       	std	Y+21, r24	; 0x15
    1cda:	9e 8b       	std	Y+22, r25	; 0x16
    1cdc:	af 8b       	std	Y+23, r26	; 0x17
    1cde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e8       	ldi	r20, 0x80	; 128
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf4:	88 23       	and	r24, r24
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <KeyPad_vidKey_Pressed+0xa2>
		__ticks = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
    1d00:	3f c0       	rjmp	.+126    	; 0x1d80 <KeyPad_vidKey_Pressed+0x120>
	else if (__tmp > 65535)
    1d02:	6d 89       	ldd	r22, Y+21	; 0x15
    1d04:	7e 89       	ldd	r23, Y+22	; 0x16
    1d06:	8f 89       	ldd	r24, Y+23	; 0x17
    1d08:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	57 e4       	ldi	r21, 0x47	; 71
    1d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	4c f5       	brge	.+82     	; 0x1d6c <KeyPad_vidKey_Pressed+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e2       	ldi	r20, 0x20	; 32
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62 <KeyPad_vidKey_Pressed+0x102>
    1d44:	88 ec       	ldi	r24, 0xC8	; 200
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9a 8b       	std	Y+18, r25	; 0x12
    1d4a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d4c:	89 89       	ldd	r24, Y+17	; 0x11
    1d4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <KeyPad_vidKey_Pressed+0xf0>
    1d54:	9a 8b       	std	Y+18, r25	; 0x12
    1d56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d58:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d62:	8b 89       	ldd	r24, Y+19	; 0x13
    1d64:	9c 89       	ldd	r25, Y+20	; 0x14
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <KeyPad_vidKey_Pressed+0xe4>
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <KeyPad_vidKey_Pressed+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d70:	8f 89       	ldd	r24, Y+23	; 0x17
    1d72:	98 8d       	ldd	r25, Y+24	; 0x18
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9c 8b       	std	Y+20, r25	; 0x14
    1d7e:	8b 8b       	std	Y+19, r24	; 0x13
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	98 8b       	std	Y+16, r25	; 0x10
    1d86:	8f 87       	std	Y+15, r24	; 0x0f
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	98 89       	ldd	r25, Y+16	; 0x10
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <KeyPad_vidKey_Pressed+0x12c>
    1d90:	98 8b       	std	Y+16, r25	; 0x10
    1d92:	8f 87       	std	Y+15, r24	; 0x0f
			do
			{
				// delay for  noise
				_delay_ms(20);
			}
			while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0f);
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	8f 70       	andi	r24, 0x0F	; 15
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	8f 30       	cpi	r24, 0x0F	; 15
    1da4:	91 05       	cpc	r25, r1
    1da6:	09 f4       	brne	.+2      	; 0x1daa <KeyPad_vidKey_Pressed+0x14a>
    1da8:	83 cf       	rjmp	.-250    	; 0x1cb0 <KeyPad_vidKey_Pressed+0x50>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 ea       	ldi	r26, 0xA0	; 160
    1db0:	b1 e4       	ldi	r27, 0x41	; 65
    1db2:	8b 87       	std	Y+11, r24	; 0x0b
    1db4:	9c 87       	std	Y+12, r25	; 0x0c
    1db6:	ad 87       	std	Y+13, r26	; 0x0d
    1db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a ef       	ldi	r20, 0xFA	; 250
    1dc8:	54 e4       	ldi	r21, 0x44	; 68
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8f 83       	std	Y+7, r24	; 0x07
    1dd4:	98 87       	std	Y+8, r25	; 0x08
    1dd6:	a9 87       	std	Y+9, r26	; 0x09
    1dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dda:	6f 81       	ldd	r22, Y+7	; 0x07
    1ddc:	78 85       	ldd	r23, Y+8	; 0x08
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <KeyPad_vidKey_Pressed+0x19c>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <KeyPad_vidKey_Pressed+0x21a>
	else if (__tmp > 65535)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <KeyPad_vidKey_Pressed+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <KeyPad_vidKey_Pressed+0x1fc>
    1e3e:	88 ec       	ldi	r24, 0xC8	; 200
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <KeyPad_vidKey_Pressed+0x1ea>
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <KeyPad_vidKey_Pressed+0x1de>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <KeyPad_vidKey_Pressed+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <KeyPad_vidKey_Pressed+0x226>
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01

			// Delay for De_bounce
			_delay_ms(20);
		}
		while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0f);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	8f 70       	andi	r24, 0x0F	; 15
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	8f 30       	cpi	r24, 0x0F	; 15
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <KeyPad_vidKey_Pressed+0x244>
    1ea2:	06 cf       	rjmp	.-500    	; 0x1cb0 <KeyPad_vidKey_Pressed+0x50>


		while(1)
		{
			// 3rd stage
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	64 e0       	ldi	r22, 0x04	; 4
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	65 e0       	ldi	r22, 0x05	; 5
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	66 e0       	ldi	r22, 0x06	; 6
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	67 e0       	ldi	r22, 0x07	; 7
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	8f 70       	andi	r24, 0x0F	; 15
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	8f 30       	cpi	r24, 0x0F	; 15
    1edc:	91 05       	cpc	r25, r1
    1ede:	29 f0       	breq	.+10     	; 0x1eea <KeyPad_vidKey_Pressed+0x28a>
			{
				location = X;		//0
    1ee0:	80 91 5e 04 	lds	r24, 0x045E
    1ee4:	80 93 5d 04 	sts	0x045D, r24
    1ee8:	6c c0       	rjmp	.+216    	; 0x1fc2 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	64 e0       	ldi	r22, 0x04	; 4
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	65 e0       	ldi	r22, 0x05	; 5
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	66 e0       	ldi	r22, 0x06	; 6
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	67 e0       	ldi	r22, 0x07	; 7
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	8f 70       	andi	r24, 0x0F	; 15
    1f1e:	90 70       	andi	r25, 0x00	; 0
    1f20:	8f 30       	cpi	r24, 0x0F	; 15
    1f22:	91 05       	cpc	r25, r1
    1f24:	31 f0       	breq	.+12     	; 0x1f32 <KeyPad_vidKey_Pressed+0x2d2>
			{
				location = X + 1;		//1
    1f26:	80 91 5e 04 	lds	r24, 0x045E
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	80 93 5d 04 	sts	0x045D, r24
    1f30:	48 c0       	rjmp	.+144    	; 0x1fc2 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	64 e0       	ldi	r22, 0x04	; 4
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	65 e0       	ldi	r22, 0x05	; 5
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	66 e0       	ldi	r22, 0x06	; 6
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	67 e0       	ldi	r22, 0x07	; 7
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	90 70       	andi	r25, 0x00	; 0
    1f68:	8f 30       	cpi	r24, 0x0F	; 15
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <KeyPad_vidKey_Pressed+0x31a>
			{
				location = X + 2;		//2
    1f6e:	80 91 5e 04 	lds	r24, 0x045E
    1f72:	8e 5f       	subi	r24, 0xFE	; 254
    1f74:	80 93 5d 04 	sts	0x045D, r24
    1f78:	24 c0       	rjmp	.+72     	; 0x1fc2 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	64 e0       	ldi	r22, 0x04	; 4
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	65 e0       	ldi	r22, 0x05	; 5
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	66 e0       	ldi	r22, 0x06	; 6
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	67 e0       	ldi	r22, 0x07	; 7
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	8f 70       	andi	r24, 0x0F	; 15
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	8f 30       	cpi	r24, 0x0F	; 15
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <KeyPad_vidKey_Pressed+0x358>
    1fb6:	76 cf       	rjmp	.-276    	; 0x1ea4 <KeyPad_vidKey_Pressed+0x244>
			{
				location = X + 3;		//3
    1fb8:	80 91 5e 04 	lds	r24, 0x045E
    1fbc:	8d 5f       	subi	r24, 0xFD	; 253
    1fbe:	80 93 5d 04 	sts	0x045D, r24

		}


		// Check for column location
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0E)
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	8f 70       	andi	r24, 0x0F	; 15
    1fce:	90 70       	andi	r25, 0x00	; 0
    1fd0:	8e 30       	cpi	r24, 0x0E	; 14
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	71 f4       	brne	.+28     	; 0x1ff2 <KeyPad_vidKey_Pressed+0x392>
			result = character[location][COL1];
    1fd6:	80 91 5d 04 	lds	r24, 0x045D
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e8 5d       	subi	r30, 0xD8	; 216
    1fea:	fb 4f       	sbci	r31, 0xFB	; 251
    1fec:	80 81       	ld	r24, Z
    1fee:	80 93 5f 04 	sts	0x045F, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x0D)
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	8f 70       	andi	r24, 0x0F	; 15
    1ffe:	90 70       	andi	r25, 0x00	; 0
    2000:	8d 30       	cpi	r24, 0x0D	; 13
    2002:	91 05       	cpc	r25, r1
    2004:	71 f4       	brne	.+28     	; 0x2022 <KeyPad_vidKey_Pressed+0x3c2>
			result = character[location][COL2];
    2006:	80 91 5d 04 	lds	r24, 0x045D
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	fc 01       	movw	r30, r24
    2018:	e7 5d       	subi	r30, 0xD7	; 215
    201a:	fb 4f       	sbci	r31, 0xFB	; 251
    201c:	80 81       	ld	r24, Z
    201e:	80 93 5f 04 	sts	0x045F, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x0B)
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	8f 70       	andi	r24, 0x0F	; 15
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	8b 30       	cpi	r24, 0x0B	; 11
    2032:	91 05       	cpc	r25, r1
    2034:	79 f4       	brne	.+30     	; 0x2054 <KeyPad_vidKey_Pressed+0x3f4>
			result = character[location][COL3];
    2036:	80 91 5d 04 	lds	r24, 0x045D
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	fc 01       	movw	r30, r24
    204a:	e8 5d       	subi	r30, 0xD8	; 216
    204c:	fb 4f       	sbci	r31, 0xFB	; 251
    204e:	80 81       	ld	r24, Z
    2050:	80 93 5f 04 	sts	0x045F, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x07)
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	8f 70       	andi	r24, 0x0F	; 15
    2060:	90 70       	andi	r25, 0x00	; 0
    2062:	87 30       	cpi	r24, 0x07	; 7
    2064:	91 05       	cpc	r25, r1
    2066:	71 f4       	brne	.+28     	; 0x2084 <KeyPad_vidKey_Pressed+0x424>
			result = character[location][COL4];
    2068:	80 91 5d 04 	lds	r24, 0x045D
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	fc 01       	movw	r30, r24
    207a:	e5 5d       	subi	r30, 0xD5	; 213
    207c:	fb 4f       	sbci	r31, 0xFB	; 251
    207e:	80 81       	ld	r24, Z
    2080:	80 93 5f 04 	sts	0x045F, r24


		// change charcters by a button
		if (result == character[(X + 3) % 12][3])
    2084:	80 91 5e 04 	lds	r24, 0x045E
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	03 96       	adiw	r24, 0x03	; 3
    208e:	2c e0       	ldi	r18, 0x0C	; 12
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 ef 32 	call	0x65de	; 0x65de <__divmodhi4>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	fc 01       	movw	r30, r24
    20a2:	e5 5d       	subi	r30, 0xD5	; 213
    20a4:	fb 4f       	sbci	r31, 0xFB	; 251
    20a6:	90 81       	ld	r25, Z
    20a8:	80 91 5f 04 	lds	r24, 0x045F
    20ac:	98 17       	cp	r25, r24
    20ae:	69 f4       	brne	.+26     	; 0x20ca <KeyPad_vidKey_Pressed+0x46a>
		{
			// Change keyPad on Demand
			X = (X + 4) % 12;
    20b0:	80 91 5e 04 	lds	r24, 0x045E
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	04 96       	adiw	r24, 0x04	; 4
    20ba:	2c e0       	ldi	r18, 0x0C	; 12
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	b9 01       	movw	r22, r18
    20c0:	0e 94 ef 32 	call	0x65de	; 0x65de <__divmodhi4>
    20c4:	80 93 5e 04 	sts	0x045E, r24
    20c8:	d5 cd       	rjmp	.-1110   	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>
		}
		else if (result == character[11][1])
    20ca:	90 91 55 04 	lds	r25, 0x0455
    20ce:	80 91 5f 04 	lds	r24, 0x045F
    20d2:	98 17       	cp	r25, r24
    20d4:	21 f4       	brne	.+8      	; 0x20de <KeyPad_vidKey_Pressed+0x47e>
		{
			// Change keyPad on Demand

			DEAD_SIGNAL_TERMINATE = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	80 93 5c 04 	sts	0x045C, r24
    20dc:	cb cd       	rjmp	.-1130   	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>
		}
		else if (result == character[3][1])
    20de:	90 91 35 04 	lds	r25, 0x0435
    20e2:	80 91 5f 04 	lds	r24, 0x045F
    20e6:	98 17       	cp	r25, r24
    20e8:	09 f5       	brne	.+66     	; 0x212c <KeyPad_vidKey_Pressed+0x4cc>
		{
			// DELETE THE PREVIOUS CHAR

			GPS_Index--;
    20ea:	80 91 70 04 	lds	r24, 0x0470
    20ee:	81 50       	subi	r24, 0x01	; 1
    20f0:	80 93 70 04 	sts	0x0470, r24
			General_Purpose_String[GPS_Index] = '\0';
    20f4:	80 91 70 04 	lds	r24, 0x0470
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	ef 59       	subi	r30, 0x9F	; 159
    2100:	fb 4f       	sbci	r31, 0xFB	; 251
    2102:	10 82       	st	Z, r1
			u8 tmp = LCD_u8CurrentLocation_AC();
    2104:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_u8CurrentLocation_AC>
    2108:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_vidInstruction(tmp - 1 + (1<<7), write_operation, IR);
    210a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    210c:	81 58       	subi	r24, 0x81	; 129
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(" ");
    2116:	80 e6       	ldi	r24, 0x60	; 96
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_vidInstruction(tmp - 1 + (1<<7), write_operation, IR);
    211e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2120:	81 58       	subi	r24, 0x81	; 129
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    212a:	a4 cd       	rjmp	.-1208   	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>
		}

		// Submit using equal button
		else if (result == character[(X + 3) % 12][2])
    212c:	80 91 5e 04 	lds	r24, 0x045E
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	03 96       	adiw	r24, 0x03	; 3
    2136:	2c e0       	ldi	r18, 0x0C	; 12
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	b9 01       	movw	r22, r18
    213c:	0e 94 ef 32 	call	0x65de	; 0x65de <__divmodhi4>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	fc 01       	movw	r30, r24
    214c:	e8 5d       	subi	r30, 0xD8	; 216
    214e:	fb 4f       	sbci	r31, 0xFB	; 251
    2150:	90 81       	ld	r25, Z
    2152:	80 91 5f 04 	lds	r24, 0x045F
    2156:	98 17       	cp	r25, r24
    2158:	f9 f4       	brne	.+62     	; 0x2198 <KeyPad_vidKey_Pressed+0x538>
		{
			// Change keyPad on Demand
			LCD_vidClearOnDemand(1, 16);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	60 e1       	ldi	r22, 0x10	; 16
    215e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

			// Incase of being at the beginning of the program
			if(!operation_flag)
    2162:	80 91 aa 04 	lds	r24, 0x04AA
    2166:	88 23       	and	r24, r24
    2168:	a1 f4       	brne	.+40     	; 0x2192 <KeyPad_vidKey_Pressed+0x532>
			{
				if(BREAK_CODE)
    216a:	80 91 ad 04 	lds	r24, 0x04AD
    216e:	88 23       	and	r24, r24
    2170:	69 f0       	breq	.+26     	; 0x218c <KeyPad_vidKey_Pressed+0x52c>
				{
					BREAK_CODE = 0;
    2172:	10 92 ad 04 	sts	0x04AD, r1
			KeyPad_CharAccumulateString(result);
			LCD_vidInstruction(result, write_operation, DR);
		}

	}
	return result;
    2176:	80 91 5f 04 	lds	r24, 0x045F
}
    217a:	6d 96       	adiw	r28, 0x1d	; 29
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret
				if(BREAK_CODE)
				{
					BREAK_CODE = 0;
					break;
				}
				LCD_OperateResult();
    218c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_OperateResult>
    2190:	71 cd       	rjmp	.-1310   	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>
			}
			else
			{
					KEY_PAD_vidOperations();
    2192:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <KEY_PAD_vidOperations>
    2196:	6e cd       	rjmp	.-1316   	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>
			}
		}
		else
		{
			KeyPad_CharAccumulateString(result);
    2198:	80 91 5f 04 	lds	r24, 0x045F
    219c:	0e 94 bb 13 	call	0x2776	; 0x2776 <KeyPad_CharAccumulateString>
			LCD_vidInstruction(result, write_operation, DR);
    21a0:	80 91 5f 04 	lds	r24, 0x045F
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    21ac:	63 cd       	rjmp	.-1338   	; 0x1c74 <KeyPad_vidKey_Pressed+0x14>

000021ae <LCD_OperateResult>:
	return result;
}

// 1st stage for LCD
void LCD_OperateResult(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	61 97       	sbiw	r28, 0x11	; 17
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
	u8 j = General_Purpose_String[0];
    21c2:	80 91 61 04 	lds	r24, 0x0461
    21c6:	8f 87       	std	Y+15, r24	; 0x0f
	GPS_Index = 0;
    21c8:	10 92 70 04 	sts	0x0470, r1

	hide_me = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 93 c1 04 	sts	0x04C1, r24
	switch(j)
    21d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	39 8b       	std	Y+17, r19	; 0x11
    21da:	28 8b       	std	Y+16, r18	; 0x10
    21dc:	88 89       	ldd	r24, Y+16	; 0x10
    21de:	99 89       	ldd	r25, Y+17	; 0x11
    21e0:	84 33       	cpi	r24, 0x34	; 52
    21e2:	91 05       	cpc	r25, r1
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <LCD_OperateResult+0x3a>
    21e6:	4b c0       	rjmp	.+150    	; 0x227e <LCD_OperateResult+0xd0>
    21e8:	28 89       	ldd	r18, Y+16	; 0x10
    21ea:	39 89       	ldd	r19, Y+17	; 0x11
    21ec:	25 33       	cpi	r18, 0x35	; 53
    21ee:	31 05       	cpc	r19, r1
    21f0:	84 f4       	brge	.+32     	; 0x2212 <LCD_OperateResult+0x64>
    21f2:	88 89       	ldd	r24, Y+16	; 0x10
    21f4:	99 89       	ldd	r25, Y+17	; 0x11
    21f6:	82 33       	cpi	r24, 0x32	; 50
    21f8:	91 05       	cpc	r25, r1
    21fa:	49 f1       	breq	.+82     	; 0x224e <LCD_OperateResult+0xa0>
    21fc:	28 89       	ldd	r18, Y+16	; 0x10
    21fe:	39 89       	ldd	r19, Y+17	; 0x11
    2200:	23 33       	cpi	r18, 0x33	; 51
    2202:	31 05       	cpc	r19, r1
    2204:	84 f5       	brge	.+96     	; 0x2266 <LCD_OperateResult+0xb8>
    2206:	88 89       	ldd	r24, Y+16	; 0x10
    2208:	99 89       	ldd	r25, Y+17	; 0x11
    220a:	81 33       	cpi	r24, 0x31	; 49
    220c:	91 05       	cpc	r25, r1
    220e:	99 f0       	breq	.+38     	; 0x2236 <LCD_OperateResult+0x88>
    2210:	5e c0       	rjmp	.+188    	; 0x22ce <LCD_OperateResult+0x120>
    2212:	28 89       	ldd	r18, Y+16	; 0x10
    2214:	39 89       	ldd	r19, Y+17	; 0x11
    2216:	26 33       	cpi	r18, 0x36	; 54
    2218:	31 05       	cpc	r19, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <LCD_OperateResult+0x70>
    221c:	44 c0       	rjmp	.+136    	; 0x22a6 <LCD_OperateResult+0xf8>
    221e:	88 89       	ldd	r24, Y+16	; 0x10
    2220:	99 89       	ldd	r25, Y+17	; 0x11
    2222:	86 33       	cpi	r24, 0x36	; 54
    2224:	91 05       	cpc	r25, r1
    2226:	bc f1       	brlt	.+110    	; 0x2296 <LCD_OperateResult+0xe8>
    2228:	28 89       	ldd	r18, Y+16	; 0x10
    222a:	39 89       	ldd	r19, Y+17	; 0x11
    222c:	27 33       	cpi	r18, 0x37	; 55
    222e:	31 05       	cpc	r19, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <LCD_OperateResult+0x86>
    2232:	41 c0       	rjmp	.+130    	; 0x22b6 <LCD_OperateResult+0x108>
    2234:	4c c0       	rjmp	.+152    	; 0x22ce <LCD_OperateResult+0x120>
	{
		case '1':
			LCD_String("NAME:");
    2236:	82 e6       	ldi	r24, 0x62	; 98
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit(Insert_new_book);
    223e:	81 e3       	ldi	r24, 0x31	; 49
    2240:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
			LCD_vidGoTo(1, 2);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    224c:	ca c0       	rjmp	.+404    	; 0x23e2 <LCD_OperateResult+0x234>
			break;

		case '2':
			LCD_String("ID:");
    224e:	88 e6       	ldi	r24, 0x68	; 104
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit(Insert_new_member);
    2256:	82 e3       	ldi	r24, 0x32	; 50
    2258:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
			LCD_vidGoTo(1, 2);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	62 e0       	ldi	r22, 0x02	; 2
    2260:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2264:	be c0       	rjmp	.+380    	; 0x23e2 <LCD_OperateResult+0x234>
			break;

		case '3':
			LCD_String("ID:");
    2266:	88 e6       	ldi	r24, 0x68	; 104
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit(Borrow);
    226e:	83 e3       	ldi	r24, 0x33	; 51
    2270:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
			LCD_vidGoTo(1, 2);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	62 e0       	ldi	r22, 0x02	; 2
    2278:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    227c:	b2 c0       	rjmp	.+356    	; 0x23e2 <LCD_OperateResult+0x234>
			break;

		case '4':
			LCD_String("ID:");
    227e:	88 e6       	ldi	r24, 0x68	; 104
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit(Return);
    2286:	84 e3       	ldi	r24, 0x34	; 52
    2288:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
			LCD_vidGoTo(1, 2);
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	62 e0       	ldi	r22, 0x02	; 2
    2290:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2294:	a6 c0       	rjmp	.+332    	; 0x23e2 <LCD_OperateResult+0x234>
			break;

		case '5':
			LCD_String("Book Confirm OP:");
    2296:	8c e6       	ldi	r24, 0x6C	; 108
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit('5');
    229e:	85 e3       	ldi	r24, 0x35	; 53
    22a0:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
    22a4:	9e c0       	rjmp	.+316    	; 0x23e2 <LCD_OperateResult+0x234>
			break;

		case '6':
			LCD_String("Member Confirm OP:");
    22a6:	8d e7       	ldi	r24, 0x7D	; 125
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit('6');
    22ae:	86 e3       	ldi	r24, 0x36	; 54
    22b0:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
    22b4:	96 c0       	rjmp	.+300    	; 0x23e2 <LCD_OperateResult+0x234>

			break;

		case '7':
			LCD_String("search ID:");
    22b6:	80 e9       	ldi	r24, 0x90	; 144
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			Operation_submit('7');
    22be:	87 e3       	ldi	r24, 0x37	; 55
    22c0:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>
			LCD_vidGoTo(1, 2);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    22cc:	8a c0       	rjmp	.+276    	; 0x23e2 <LCD_OperateResult+0x234>
			break;

		default:
			hide_me = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	80 93 c1 04 	sts	0x04C1, r24
			LCD_vidClearOnDemand(1, 32);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	60 e2       	ldi	r22, 0x20	; 32
    22d8:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
			LCD_String("INV. Operation");
    22dc:	8b e9       	ldi	r24, 0x9B	; 155
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e8       	ldi	r25, 0x80	; 128
    22e8:	ab eb       	ldi	r26, 0xBB	; 187
    22ea:	b4 e4       	ldi	r27, 0x44	; 68
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	9c 87       	std	Y+12, r25	; 0x0c
    22f0:	ad 87       	std	Y+13, r26	; 0x0d
    22f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LCD_OperateResult+0x188>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LCD_OperateResult+0x206>
	else if (__tmp > 65535)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LCD_OperateResult+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LCD_OperateResult+0x1e8>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_OperateResult+0x1d6>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LCD_OperateResult+0x1ca>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LCD_OperateResult+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_OperateResult+0x212>
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			Operation_submit('8');
    23c8:	88 e3       	ldi	r24, 0x38	; 56
    23ca:	0e 94 a4 14 	call	0x2948	; 0x2948 <Operation_submit>

			LCD_vidClearOnDemand(1, 32);
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	60 e2       	ldi	r22, 0x20	; 32
    23d2:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
			hide_me = 0;
    23d6:	10 92 c1 04 	sts	0x04C1, r1
			LCD_vidGoTo(1, 1);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			break;
	}
}
    23e2:	61 96       	adiw	r28, 0x11	; 17
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <KEY_PAD_vidOperations>:


// 2nd stage for LCD
// Pass string to the correspoinding field inside its operation
void KEY_PAD_vidOperations(void)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <KEY_PAD_vidOperations+0x6>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
	// Detect operations
	switch(operation)
    23fe:	80 91 ac 04 	lds	r24, 0x04AC
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	3a 83       	std	Y+2, r19	; 0x02
    2408:	29 83       	std	Y+1, r18	; 0x01
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	84 33       	cpi	r24, 0x34	; 52
    2410:	91 05       	cpc	r25, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <KEY_PAD_vidOperations+0x22>
    2414:	1f c1       	rjmp	.+574    	; 0x2654 <KEY_PAD_vidOperations+0x260>
    2416:	29 81       	ldd	r18, Y+1	; 0x01
    2418:	3a 81       	ldd	r19, Y+2	; 0x02
    241a:	25 33       	cpi	r18, 0x35	; 53
    241c:	31 05       	cpc	r19, r1
    241e:	94 f4       	brge	.+36     	; 0x2444 <KEY_PAD_vidOperations+0x50>
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	82 33       	cpi	r24, 0x32	; 50
    2426:	91 05       	cpc	r25, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <KEY_PAD_vidOperations+0x38>
    242a:	84 c0       	rjmp	.+264    	; 0x2534 <KEY_PAD_vidOperations+0x140>
    242c:	29 81       	ldd	r18, Y+1	; 0x01
    242e:	3a 81       	ldd	r19, Y+2	; 0x02
    2430:	23 33       	cpi	r18, 0x33	; 51
    2432:	31 05       	cpc	r19, r1
    2434:	0c f0       	brlt	.+2      	; 0x2438 <KEY_PAD_vidOperations+0x44>
    2436:	c6 c0       	rjmp	.+396    	; 0x25c4 <KEY_PAD_vidOperations+0x1d0>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	81 33       	cpi	r24, 0x31	; 49
    243e:	91 05       	cpc	r25, r1
    2440:	a1 f0       	breq	.+40     	; 0x246a <KEY_PAD_vidOperations+0x76>
    2442:	8e c1       	rjmp	.+796    	; 0x2760 <KEY_PAD_vidOperations+0x36c>
    2444:	29 81       	ldd	r18, Y+1	; 0x01
    2446:	3a 81       	ldd	r19, Y+2	; 0x02
    2448:	26 33       	cpi	r18, 0x36	; 54
    244a:	31 05       	cpc	r19, r1
    244c:	09 f4       	brne	.+2      	; 0x2450 <KEY_PAD_vidOperations+0x5c>
    244e:	53 c1       	rjmp	.+678    	; 0x26f6 <KEY_PAD_vidOperations+0x302>
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	86 33       	cpi	r24, 0x36	; 54
    2456:	91 05       	cpc	r25, r1
    2458:	0c f4       	brge	.+2      	; 0x245c <KEY_PAD_vidOperations+0x68>
    245a:	44 c1       	rjmp	.+648    	; 0x26e4 <KEY_PAD_vidOperations+0x2f0>
    245c:	29 81       	ldd	r18, Y+1	; 0x01
    245e:	3a 81       	ldd	r19, Y+2	; 0x02
    2460:	27 33       	cpi	r18, 0x37	; 55
    2462:	31 05       	cpc	r19, r1
    2464:	09 f4       	brne	.+2      	; 0x2468 <KEY_PAD_vidOperations+0x74>
    2466:	50 c1       	rjmp	.+672    	; 0x2708 <KEY_PAD_vidOperations+0x314>
    2468:	7b c1       	rjmp	.+758    	; 0x2760 <KEY_PAD_vidOperations+0x36c>
	{
		case Insert_new_book:
			// Sequential insertion
			
			if(!Name_General_flag)
    246a:	80 91 a8 04 	lds	r24, 0x04A8
    246e:	88 23       	and	r24, r24
    2470:	a1 f4       	brne	.+40     	; 0x249a <KEY_PAD_vidOperations+0xa6>
			{
				// Call to insert name and submit the string
				CopyString(Name);
    2472:	84 e8       	ldi	r24, 0x84	; 132
    2474:	94 e0       	ldi	r25, 0x04	; 4
    2476:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				Name_General_flag = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	80 93 a8 04 	sts	0x04A8, r24

				LCD_String("ISBN");
    2480:	8a ea       	ldi	r24, 0xAA	; 170
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2488:	81 e1       	ldi	r24, 0x11	; 17
    248a:	60 e2       	ldi	r22, 0x20	; 32
    248c:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	62 e0       	ldi	r22, 0x02	; 2
    2494:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2498:	48 c0       	rjmp	.+144    	; 0x252a <KEY_PAD_vidOperations+0x136>
			}
			else if(!ISBN_flag)
    249a:	80 91 a7 04 	lds	r24, 0x04A7
    249e:	88 23       	and	r24, r24
    24a0:	a1 f4       	brne	.+40     	; 0x24ca <KEY_PAD_vidOperations+0xd6>
			{
				// Call to submit ISBN and submit the string
				CopyString(serial);
    24a2:	88 e9       	ldi	r24, 0x98	; 152
    24a4:	94 e0       	ldi	r25, 0x04	; 4
    24a6:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				ISBN_flag = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 a7 04 	sts	0x04A7, r24

				LCD_String("COPIES:");
    24b0:	8f ea       	ldi	r24, 0xAF	; 175
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    24b8:	81 e1       	ldi	r24, 0x11	; 17
    24ba:	60 e2       	ldi	r22, 0x20	; 32
    24bc:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	62 e0       	ldi	r22, 0x02	; 2
    24c4:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    24c8:	30 c0       	rjmp	.+96     	; 0x252a <KEY_PAD_vidOperations+0x136>
			}
			else if(!copies_flag)
    24ca:	80 91 a9 04 	lds	r24, 0x04A9
    24ce:	88 23       	and	r24, r24
    24d0:	a1 f4       	brne	.+40     	; 0x24fa <KEY_PAD_vidOperations+0x106>
			{
				// Call to submit copies and submit the string
				copies = StringToInt();
    24d2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <StringToInt>
    24d6:	80 93 76 04 	sts	0x0476, r24
				copies_flag = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	80 93 a9 04 	sts	0x04A9, r24

				LCD_String("Confirm");
    24e0:	87 eb       	ldi	r24, 0xB7	; 183
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    24e8:	81 e1       	ldi	r24, 0x11	; 17
    24ea:	60 e2       	ldi	r22, 0x20	; 32
    24ec:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	62 e0       	ldi	r22, 0x02	; 2
    24f4:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    24f8:	18 c0       	rjmp	.+48     	; 0x252a <KEY_PAD_vidOperations+0x136>
			}
			else
			{
				// Make sure you checked for 3 inputs
				BOOKS_vidInsertion(serial, Name, copies);
    24fa:	20 91 76 04 	lds	r18, 0x0476
    24fe:	88 e9       	ldi	r24, 0x98	; 152
    2500:	94 e0       	ldi	r25, 0x04	; 4
    2502:	44 e8       	ldi	r20, 0x84	; 132
    2504:	54 e0       	ldi	r21, 0x04	; 4
    2506:	ba 01       	movw	r22, r20
    2508:	42 2f       	mov	r20, r18
    250a:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <BOOKS_vidInsertion>
				hide_me = 0;
    250e:	10 92 c1 04 	sts	0x04C1, r1
				// Reset for recheck
				Name_General_flag = 0;
    2512:	10 92 a8 04 	sts	0x04A8, r1
				copies_flag = 0;
    2516:	10 92 a9 04 	sts	0x04A9, r1
				ISBN_flag = 0;
    251a:	10 92 a7 04 	sts	0x04A7, r1
				LCD_vidClearOnDemand(17, 32);
    251e:	81 e1       	ldi	r24, 0x11	; 17
    2520:	60 e2       	ldi	r22, 0x20	; 32
    2522:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				Operation_Reset();
    2526:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>

			}
			
			GPS_Index = 0;
    252a:	10 92 70 04 	sts	0x0470, r1
			GPS_Reset();
    252e:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
    2532:	1c c1       	rjmp	.+568    	; 0x276c <KEY_PAD_vidOperations+0x378>
			
			
		case Insert_new_member:
			// Sequential insertion

			if(!id_flag)
    2534:	80 91 a5 04 	lds	r24, 0x04A5
    2538:	88 23       	and	r24, r24
    253a:	a1 f4       	brne	.+40     	; 0x2564 <KEY_PAD_vidOperations+0x170>
			{
				// return to insert id and submit the string 
				CopyString(id);
    253c:	81 e7       	ldi	r24, 0x71	; 113
    253e:	94 e0       	ldi	r25, 0x04	; 4
    2540:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				id_flag = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 a5 04 	sts	0x04A5, r24

				LCD_String("NAME:");
    254a:	82 e6       	ldi	r24, 0x62	; 98
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2552:	81 e1       	ldi	r24, 0x11	; 17
    2554:	60 e2       	ldi	r22, 0x20	; 32
    2556:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	62 e0       	ldi	r22, 0x02	; 2
    255e:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2562:	2b c0       	rjmp	.+86     	; 0x25ba <KEY_PAD_vidOperations+0x1c6>
			}
			else if(!Name_General_flag)
    2564:	80 91 a8 04 	lds	r24, 0x04A8
    2568:	88 23       	and	r24, r24
    256a:	a1 f4       	brne	.+40     	; 0x2594 <KEY_PAD_vidOperations+0x1a0>
			{
				// return to submit ISBN and submit the string
				CopyString(Name);
    256c:	84 e8       	ldi	r24, 0x84	; 132
    256e:	94 e0       	ldi	r25, 0x04	; 4
    2570:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				Name_General_flag = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	80 93 a8 04 	sts	0x04A8, r24

				LCD_String("Confirm");
    257a:	87 eb       	ldi	r24, 0xB7	; 183
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2582:	81 e1       	ldi	r24, 0x11	; 17
    2584:	60 e2       	ldi	r22, 0x20	; 32
    2586:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	62 e0       	ldi	r22, 0x02	; 2
    258e:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2592:	13 c0       	rjmp	.+38     	; 0x25ba <KEY_PAD_vidOperations+0x1c6>
			}
			else
			{
				LinkedList_vidInsertion(id, Name);
    2594:	81 e7       	ldi	r24, 0x71	; 113
    2596:	94 e0       	ldi	r25, 0x04	; 4
    2598:	24 e8       	ldi	r18, 0x84	; 132
    259a:	34 e0       	ldi	r19, 0x04	; 4
    259c:	b9 01       	movw	r22, r18
    259e:	0e 94 77 24 	call	0x48ee	; 0x48ee <LinkedList_vidInsertion>
				hide_me = 0;
    25a2:	10 92 c1 04 	sts	0x04C1, r1

				// Reset for recheck
				id_flag = 0;
    25a6:	10 92 a5 04 	sts	0x04A5, r1
				Name_General_flag = 0;
    25aa:	10 92 a8 04 	sts	0x04A8, r1
				LCD_vidClearOnDemand(17, 32);
    25ae:	81 e1       	ldi	r24, 0x11	; 17
    25b0:	60 e2       	ldi	r22, 0x20	; 32
    25b2:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

				Operation_Reset();
    25b6:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>
			}
			
			GPS_Index = 0;
    25ba:	10 92 70 04 	sts	0x0470, r1
			GPS_Reset();
    25be:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
    25c2:	d4 c0       	rjmp	.+424    	; 0x276c <KEY_PAD_vidOperations+0x378>


		case Borrow:
			// Sequential insertion

			if(!id_flag)
    25c4:	80 91 a5 04 	lds	r24, 0x04A5
    25c8:	88 23       	and	r24, r24
    25ca:	a1 f4       	brne	.+40     	; 0x25f4 <KEY_PAD_vidOperations+0x200>
			{
				// return to insert id and submit the string 
				CopyString(id);
    25cc:	81 e7       	ldi	r24, 0x71	; 113
    25ce:	94 e0       	ldi	r25, 0x04	; 4
    25d0:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				id_flag = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	80 93 a5 04 	sts	0x04A5, r24

				LCD_String("ISBN");
    25da:	8a ea       	ldi	r24, 0xAA	; 170
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    25e2:	81 e1       	ldi	r24, 0x11	; 17
    25e4:	60 e2       	ldi	r22, 0x20	; 32
    25e6:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	62 e0       	ldi	r22, 0x02	; 2
    25ee:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    25f2:	2b c0       	rjmp	.+86     	; 0x264a <KEY_PAD_vidOperations+0x256>
			}
			else if(!ISBN_flag)
    25f4:	80 91 a7 04 	lds	r24, 0x04A7
    25f8:	88 23       	and	r24, r24
    25fa:	a1 f4       	brne	.+40     	; 0x2624 <KEY_PAD_vidOperations+0x230>
			{
				// return to submit ISBN and submit the string
				CopyString(serial);
    25fc:	88 e9       	ldi	r24, 0x98	; 152
    25fe:	94 e0       	ldi	r25, 0x04	; 4
    2600:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				ISBN_flag = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 a7 04 	sts	0x04A7, r24

				LCD_String("Confirm");
    260a:	87 eb       	ldi	r24, 0xB7	; 183
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2612:	81 e1       	ldi	r24, 0x11	; 17
    2614:	60 e2       	ldi	r22, 0x20	; 32
    2616:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2622:	13 c0       	rjmp	.+38     	; 0x264a <KEY_PAD_vidOperations+0x256>
			}
			else
			{
				Borrow_vid(id, serial);
    2624:	81 e7       	ldi	r24, 0x71	; 113
    2626:	94 e0       	ldi	r25, 0x04	; 4
    2628:	28 e9       	ldi	r18, 0x98	; 152
    262a:	34 e0       	ldi	r19, 0x04	; 4
    262c:	b9 01       	movw	r22, r18
    262e:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <Borrow_vid>
				hide_me = 0;
    2632:	10 92 c1 04 	sts	0x04C1, r1
				// Reset for checking
				id_flag = 0;
    2636:	10 92 a5 04 	sts	0x04A5, r1
				ISBN_flag = 0;
    263a:	10 92 a7 04 	sts	0x04A7, r1
				LCD_vidClearOnDemand(17, 32);
    263e:	81 e1       	ldi	r24, 0x11	; 17
    2640:	60 e2       	ldi	r22, 0x20	; 32
    2642:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				Operation_Reset();
    2646:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>
			}

			GPS_Index = 0;
    264a:	10 92 70 04 	sts	0x0470, r1
			GPS_Reset();
    264e:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
    2652:	8c c0       	rjmp	.+280    	; 0x276c <KEY_PAD_vidOperations+0x378>
			break;

		case Return:
			// Sequential insertion
		
			if(!id_flag)
    2654:	80 91 a5 04 	lds	r24, 0x04A5
    2658:	88 23       	and	r24, r24
    265a:	a1 f4       	brne	.+40     	; 0x2684 <KEY_PAD_vidOperations+0x290>
			{
				// return to insert id and submit the string 
				CopyString(id);
    265c:	81 e7       	ldi	r24, 0x71	; 113
    265e:	94 e0       	ldi	r25, 0x04	; 4
    2660:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				id_flag = 1;	
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 93 a5 04 	sts	0x04A5, r24

				LCD_String("ISBN");
    266a:	8a ea       	ldi	r24, 0xAA	; 170
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2672:	81 e1       	ldi	r24, 0x11	; 17
    2674:	60 e2       	ldi	r22, 0x20	; 32
    2676:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2682:	2b c0       	rjmp	.+86     	; 0x26da <KEY_PAD_vidOperations+0x2e6>
			}
			else if(!ISBN_flag)
    2684:	80 91 a7 04 	lds	r24, 0x04A7
    2688:	88 23       	and	r24, r24
    268a:	a1 f4       	brne	.+40     	; 0x26b4 <KEY_PAD_vidOperations+0x2c0>
			{
				// return to submit ISBN and submit the string
				CopyString(serial);
    268c:	88 e9       	ldi	r24, 0x98	; 152
    268e:	94 e0       	ldi	r25, 0x04	; 4
    2690:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				ISBN_flag = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	80 93 a7 04 	sts	0x04A7, r24

				LCD_String("Confirm");
    269a:	87 eb       	ldi	r24, 0xB7	; 183
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    26a2:	81 e1       	ldi	r24, 0x11	; 17
    26a4:	60 e2       	ldi	r22, 0x20	; 32
    26a6:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    26b2:	13 c0       	rjmp	.+38     	; 0x26da <KEY_PAD_vidOperations+0x2e6>
			}
			else
			{
				// Insert into the list and set ready to overwrite
				RETURN_vid(id, serial);
    26b4:	81 e7       	ldi	r24, 0x71	; 113
    26b6:	94 e0       	ldi	r25, 0x04	; 4
    26b8:	28 e9       	ldi	r18, 0x98	; 152
    26ba:	34 e0       	ldi	r19, 0x04	; 4
    26bc:	b9 01       	movw	r22, r18
    26be:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <RETURN_vid>
				id_flag = 0;
    26c2:	10 92 a5 04 	sts	0x04A5, r1
				ISBN_flag = 0;
    26c6:	10 92 a7 04 	sts	0x04A7, r1
				LCD_vidClearOnDemand(17, 32);
    26ca:	81 e1       	ldi	r24, 0x11	; 17
    26cc:	60 e2       	ldi	r22, 0x20	; 32
    26ce:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				Operation_Reset();
    26d2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>
				hide_me = 0;
    26d6:	10 92 c1 04 	sts	0x04C1, r1
			}
			
			GPS_Index = 0;
    26da:	10 92 70 04 	sts	0x0470, r1
			GPS_Reset();
    26de:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
    26e2:	44 c0       	rjmp	.+136    	; 0x276c <KEY_PAD_vidOperations+0x378>
			break;
			
		// Shows all books in library
		case '5':
			BOOKS_show();
    26e4:	0e 94 8c 21 	call	0x4318	; 0x4318 <BOOKS_show>
			GPS_Index = 0;
    26e8:	10 92 70 04 	sts	0x0470, r1
			Operation_Reset();
    26ec:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>
			hide_me = 0;
    26f0:	10 92 c1 04 	sts	0x04C1, r1
    26f4:	3b c0       	rjmp	.+118    	; 0x276c <KEY_PAD_vidOperations+0x378>
			break;

		// Shows all member
		case '6':
			LinkedList_show();
    26f6:	0e 94 03 2a 	call	0x5406	; 0x5406 <LinkedList_show>
			GPS_Index = 0;
    26fa:	10 92 70 04 	sts	0x0470, r1
			Operation_Reset();
    26fe:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>
			hide_me = 0;
    2702:	10 92 c1 04 	sts	0x04C1, r1
    2706:	32 c0       	rjmp	.+100    	; 0x276c <KEY_PAD_vidOperations+0x378>
			break;

		// Gives info about specific member
		case '7':
			if(!id_flag)
    2708:	80 91 a5 04 	lds	r24, 0x04A5
    270c:	88 23       	and	r24, r24
    270e:	a1 f4       	brne	.+40     	; 0x2738 <KEY_PAD_vidOperations+0x344>
			{
				// return to submit ID
				CopyString(id);
    2710:	81 e7       	ldi	r24, 0x71	; 113
    2712:	94 e0       	ldi	r25, 0x04	; 4
    2714:	0e 94 45 14 	call	0x288a	; 0x288a <CopyString>
				id_flag = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 93 a5 04 	sts	0x04A5, r24

				LCD_String("Confirm");
    271e:	87 eb       	ldi	r24, 0xB7	; 183
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2726:	81 e1       	ldi	r24, 0x11	; 17
    2728:	60 e2       	ldi	r22, 0x20	; 32
    272a:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <KEY_PAD_vidOperations+0x362>
			}
			else
			{
				// Insert into the list and set ready to overwrite
				LinkedList_vidSearch(id, 1);
    2738:	81 e7       	ldi	r24, 0x71	; 113
    273a:	94 e0       	ldi	r25, 0x04	; 4
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 42 26 	call	0x4c84	; 0x4c84 <LinkedList_vidSearch>
				id_flag = 0;
    2742:	10 92 a5 04 	sts	0x04A5, r1
				LCD_vidClearOnDemand(17, 32);
    2746:	81 e1       	ldi	r24, 0x11	; 17
    2748:	60 e2       	ldi	r22, 0x20	; 32
    274a:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
				Operation_Reset();
    274e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>
				hide_me = 0;
    2752:	10 92 c1 04 	sts	0x04C1, r1
			}

			GPS_Index = 0;
    2756:	10 92 70 04 	sts	0x0470, r1
			GPS_Reset();
    275a:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
    275e:	06 c0       	rjmp	.+12     	; 0x276c <KEY_PAD_vidOperations+0x378>
			break;

		default:
			Operation_Reset();
    2760:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Operation_Reset>

			GPS_Reset();
    2764:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
			GPS_Index = 0;
    2768:	10 92 70 04 	sts	0x0470, r1
			break;
	}
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <KeyPad_CharAccumulateString>:


// Fetch string for every new input
void KeyPad_CharAccumulateString(u8 result)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	0f 92       	push	r0
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	89 83       	std	Y+1, r24	; 0x01
	// For new inputs remeber to set GPS_Index = 0
	General_Purpose_String[GPS_Index] = result;
    2782:	80 91 70 04 	lds	r24, 0x0470
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	fc 01       	movw	r30, r24
    278c:	ef 59       	subi	r30, 0x9F	; 159
    278e:	fb 4f       	sbci	r31, 0xFB	; 251
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 83       	st	Z, r24
	GPS_Index++;
    2794:	80 91 70 04 	lds	r24, 0x0470
    2798:	8f 5f       	subi	r24, 0xFF	; 255
    279a:	80 93 70 04 	sts	0x0470, r24
	General_Purpose_String[GPS_Index] = '\0';
    279e:	80 91 70 04 	lds	r24, 0x0470
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	fc 01       	movw	r30, r24
    27a8:	ef 59       	subi	r30, 0x9F	; 159
    27aa:	fb 4f       	sbci	r31, 0xFB	; 251
    27ac:	10 82       	st	Z, r1

}
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <StringToInt>:


// From string of chars to int
short int StringToInt(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <StringToInt+0x6>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <StringToInt+0x8>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
	u8 j = 0, times = 1;
    27c2:	1c 82       	std	Y+4, r1	; 0x04
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	8b 83       	std	Y+3, r24	; 0x03
	u16 sum = 0;
    27c8:	1a 82       	std	Y+2, r1	; 0x02
    27ca:	19 82       	std	Y+1, r1	; 0x01
    27cc:	18 c0       	rjmp	.+48     	; 0x27fe <StringToInt+0x48>

	// Get string length
	while(General_Purpose_String[j] != '\0')
	{
		if(!j)
    27ce:	8c 81       	ldd	r24, Y+4	; 0x04
    27d0:	88 23       	and	r24, r24
    27d2:	21 f4       	brne	.+8      	; 0x27dc <StringToInt+0x26>
		{
			j++;
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	8c 83       	std	Y+4, r24	; 0x04
    27da:	11 c0       	rjmp	.+34     	; 0x27fe <StringToInt+0x48>
		}
		else
		{
			j++;
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	8c 83       	std	Y+4, r24	; 0x04
			times *= 10;
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 01       	movw	r18, r24
    27ea:	22 0f       	add	r18, r18
    27ec:	33 1f       	adc	r19, r19
    27ee:	c9 01       	movw	r24, r18
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	82 0f       	add	r24, r18
    27fa:	93 1f       	adc	r25, r19
    27fc:	8b 83       	std	Y+3, r24	; 0x03
{
	u8 j = 0, times = 1;
	u16 sum = 0;

	// Get string length
	while(General_Purpose_String[j] != '\0')
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	fc 01       	movw	r30, r24
    2806:	ef 59       	subi	r30, 0x9F	; 159
    2808:	fb 4f       	sbci	r31, 0xFB	; 251
    280a:	80 81       	ld	r24, Z
    280c:	88 23       	and	r24, r24
    280e:	f9 f6       	brne	.-66     	; 0x27ce <StringToInt+0x18>
		}
	}


	// Get serial number from string
	for(j = 0; General_Purpose_String[j] != '\0'; j--)
    2810:	1c 82       	std	Y+4, r1	; 0x04
    2812:	29 c0       	rjmp	.+82     	; 0x2866 <StringToInt+0xb0>
	{
		// Serial is global variable
		sum += (General_Purpose_String[j] % 48)* times;
    2814:	8c 81       	ldd	r24, Y+4	; 0x04
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	fc 01       	movw	r30, r24
    281c:	ef 59       	subi	r30, 0x9F	; 159
    281e:	fb 4f       	sbci	r31, 0xFB	; 251
    2820:	80 81       	ld	r24, Z
    2822:	90 e3       	ldi	r25, 0x30	; 48
    2824:	69 2f       	mov	r22, r25
    2826:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    282a:	89 2f       	mov	r24, r25
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	ac 01       	movw	r20, r24
    2838:	24 9f       	mul	r18, r20
    283a:	c0 01       	movw	r24, r0
    283c:	25 9f       	mul	r18, r21
    283e:	90 0d       	add	r25, r0
    2840:	34 9f       	mul	r19, r20
    2842:	90 0d       	add	r25, r0
    2844:	11 24       	eor	r1, r1
    2846:	9c 01       	movw	r18, r24
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	82 0f       	add	r24, r18
    284e:	93 1f       	adc	r25, r19
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
		times /=10;
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9a e0       	ldi	r25, 0x0A	; 10
    2858:	69 2f       	mov	r22, r25
    285a:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    285e:	8b 83       	std	Y+3, r24	; 0x03
		}
	}


	// Get serial number from string
	for(j = 0; General_Purpose_String[j] != '\0'; j--)
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	81 50       	subi	r24, 0x01	; 1
    2864:	8c 83       	std	Y+4, r24	; 0x04
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	fc 01       	movw	r30, r24
    286e:	ef 59       	subi	r30, 0x9F	; 159
    2870:	fb 4f       	sbci	r31, 0xFB	; 251
    2872:	80 81       	ld	r24, Z
    2874:	88 23       	and	r24, r24
    2876:	71 f6       	brne	.-100    	; 0x2814 <StringToInt+0x5e>
		// Serial is global variable
		sum += (General_Purpose_String[j] % 48)* times;
		times /=10;
	}

	return sum;
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <CopyString>:


// Copy string
void CopyString(char *ptr)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	00 d0       	rcall	.+0      	; 0x2890 <CopyString+0x6>
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	9b 83       	std	Y+3, r25	; 0x03
    2898:	8a 83       	std	Y+2, r24	; 0x02
	u8 j = 0;
    289a:	19 82       	std	Y+1, r1	; 0x01

	// Get Name
	for(j = 0; General_Purpose_String[j] != '\0'; j++)
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	13 c0       	rjmp	.+38     	; 0x28c6 <CopyString+0x3c>
	{
		// Serial is global variable
		ptr[j] = (General_Purpose_String[j]);
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	dc 01       	movw	r26, r24
    28ac:	a2 0f       	add	r26, r18
    28ae:	b3 1f       	adc	r27, r19
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	ef 59       	subi	r30, 0x9F	; 159
    28ba:	fb 4f       	sbci	r31, 0xFB	; 251
    28bc:	80 81       	ld	r24, Z
    28be:	8c 93       	st	X, r24
void CopyString(char *ptr)
{
	u8 j = 0;

	// Get Name
	for(j = 0; General_Purpose_String[j] != '\0'; j++)
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	fc 01       	movw	r30, r24
    28ce:	ef 59       	subi	r30, 0x9F	; 159
    28d0:	fb 4f       	sbci	r31, 0xFB	; 251
    28d2:	80 81       	ld	r24, Z
    28d4:	88 23       	and	r24, r24
    28d6:	21 f7       	brne	.-56     	; 0x28a0 <CopyString+0x16>
	{
		// Serial is global variable
		ptr[j] = (General_Purpose_String[j]);

	}
	ptr[j] = '\0';
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	10 82       	st	Z, r1
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <Operation_Reset>:


// Reset after executing the current operation
void Operation_Reset(void)
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	// Reset operation fields
	operation = 0;
    28fe:	10 92 ac 04 	sts	0x04AC, r1
	operation_flag = 0;
    2902:	10 92 aa 04 	sts	0x04AA, r1
	GPS_Reset();
    2906:	0e 94 8b 14 	call	0x2916	; 0x2916 <GPS_Reset>
	BREAK_CODE = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	80 93 ad 04 	sts	0x04AD, r24

}
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <GPS_Reset>:


// Reset General_Purpose_string with '0' for operation's not to accumulate
void GPS_Reset(void)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	0f 92       	push	r0
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
	for(u8 i = 0; i < sizeof(General_Purpose_String); i++)
    2920:	19 82       	std	Y+1, r1	; 0x01
    2922:	0b c0       	rjmp	.+22     	; 0x293a <GPS_Reset+0x24>
	{
		General_Purpose_String[i] = '0';
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	fc 01       	movw	r30, r24
    292c:	ef 59       	subi	r30, 0x9F	; 159
    292e:	fb 4f       	sbci	r31, 0xFB	; 251
    2930:	80 e3       	ldi	r24, 0x30	; 48
    2932:	80 83       	st	Z, r24


// Reset General_Purpose_string with '0' for operation's not to accumulate
void GPS_Reset(void)
{
	for(u8 i = 0; i < sizeof(General_Purpose_String); i++)
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	8f 30       	cpi	r24, 0x0F	; 15
    293e:	90 f3       	brcs	.-28     	; 0x2924 <GPS_Reset+0xe>
	{
		General_Purpose_String[i] = '0';
	}
}
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <Operation_submit>:


// Submit operation to execute in the next loop
void Operation_submit(char x)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	0f 92       	push	r0
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	89 83       	std	Y+1, r24	; 0x01
	// Clear Display
	LCD_vidClearOnDemand(17, 32);
    2954:	81 e1       	ldi	r24, 0x11	; 17
    2956:	60 e2       	ldi	r22, 0x20	; 32
    2958:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

	// Submit operation global variable
	operation = x;
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	80 93 ac 04 	sts	0x04AC, r24
	operation_flag = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 93 aa 04 	sts	0x04AA, r24
}
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <LCD_vidInitialize>:
  */


// INITIALIZATION, always start an LCD with
void LCD_vidInitialize(void)
{
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	c6 55       	subi	r28, 0x56	; 86
    297e:	d0 40       	sbci	r29, 0x00	; 0
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
	// Set PORTD, PORTC as output by default
	DIO_vidSetPortxDir(LCD_PORT_DATA, 1);	// PORTC
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	61 e0       	ldi	r22, 0x01	; 1
    298e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_vidSetPortxDir>
	DIO_vidSetPortxDir(LCD_PORT_CONTROL, 1);	// PORTD
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	61 e0       	ldi	r22, 0x01	; 1
    2996:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_vidSetPortxDir>

	// RS and RW = 0
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 0);
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 0);
    29a4:	83 e0       	ldi	r24, 0x03	; 3
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>


	// Function Set, F = 0, DL = 1, N = 1
	LCD_vidInstruction(0X38, write_operation, IR);
    29ae:	88 e3       	ldi	r24, 0x38	; 56
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    29b8:	fe 01       	movw	r30, r28
    29ba:	ed 5a       	subi	r30, 0xAD	; 173
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a0 e3       	ldi	r26, 0x30	; 48
    29c4:	b1 e4       	ldi	r27, 0x41	; 65
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29ce:	8e 01       	movw	r16, r28
    29d0:	01 5b       	subi	r16, 0xB1	; 177
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 5a       	subi	r30, 0xAD	; 173
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	2b ea       	ldi	r18, 0xAB	; 171
    29e4:	3a ea       	ldi	r19, 0xAA	; 170
    29e6:	4a e2       	ldi	r20, 0x2A	; 42
    29e8:	50 e4       	ldi	r21, 0x40	; 64
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	f8 01       	movw	r30, r16
    29f4:	80 83       	st	Z, r24
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	a2 83       	std	Z+2, r26	; 0x02
    29fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29fc:	fe 01       	movw	r30, r28
    29fe:	e1 5b       	subi	r30, 0xB1	; 177
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f e3       	ldi	r21, 0x3F	; 63
    2a12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a16:	88 23       	and	r24, r24
    2a18:	34 f4       	brge	.+12     	; 0x2a26 <LCD_vidInitialize+0xb6>
		__ticks = 1;
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e2 5b       	subi	r30, 0xB2	; 178
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	80 83       	st	Z, r24
    2a24:	e0 c0       	rjmp	.+448    	; 0x2be6 <LCD_vidInitialize+0x276>
	else if (__tmp > 255)
    2a26:	fe 01       	movw	r30, r28
    2a28:	e1 5b       	subi	r30, 0xB1	; 177
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	53 e4       	ldi	r21, 0x43	; 67
    2a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <LCD_vidInitialize+0xd6>
    2a44:	c0 c0       	rjmp	.+384    	; 0x2bc6 <LCD_vidInitialize+0x256>
	{
		_delay_ms(__us / 1000.0);
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 5a       	subi	r30, 0xAD	; 173
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a e7       	ldi	r20, 0x7A	; 122
    2a5a:	54 e4       	ldi	r21, 0x44	; 68
    2a5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	fe 01       	movw	r30, r28
    2a66:	e6 5b       	subi	r30, 0xB6	; 182
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	8e 01       	movw	r16, r28
    2a74:	0a 5b       	subi	r16, 0xBA	; 186
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e6 5b       	subi	r30, 0xB6	; 182
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	a2 83       	std	Z+2, r26	; 0x02
    2a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ea 5b       	subi	r30, 0xBA	; 186
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	44 f4       	brge	.+16     	; 0x2ace <LCD_vidInitialize+0x15e>
		__ticks = 1;
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ec 5b       	subi	r30, 0xBC	; 188
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	64 c0       	rjmp	.+200    	; 0x2b96 <LCD_vidInitialize+0x226>
	else if (__tmp > 65535)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ea 5b       	subi	r30, 0xBA	; 186
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <LCD_vidInitialize+0x17e>
    2aec:	43 c0       	rjmp	.+134    	; 0x2b74 <LCD_vidInitialize+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	fe 01       	movw	r30, r28
    2af0:	e6 5b       	subi	r30, 0xB6	; 182
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	8e 01       	movw	r16, r28
    2b0e:	0c 5b       	subi	r16, 0xBC	; 188
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	1f c0       	rjmp	.+62     	; 0x2b64 <LCD_vidInitialize+0x1f4>
    2b26:	fe 01       	movw	r30, r28
    2b28:	ee 5b       	subi	r30, 0xBE	; 190
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	88 ec       	ldi	r24, 0xC8	; 200
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	ee 5b       	subi	r30, 0xBE	; 190
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_vidInitialize+0x1ce>
    2b42:	fe 01       	movw	r30, r28
    2b44:	ee 5b       	subi	r30, 0xBE	; 190
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4c:	de 01       	movw	r26, r28
    2b4e:	ac 5b       	subi	r26, 0xBC	; 188
    2b50:	bf 4f       	sbci	r27, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	ec 5b       	subi	r30, 0xBC	; 188
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	9c 93       	st	X, r25
    2b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	fe 01       	movw	r30, r28
    2b66:	ec 5b       	subi	r30, 0xBC	; 188
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	d1 f6       	brne	.-76     	; 0x2b26 <LCD_vidInitialize+0x1b6>
    2b72:	42 c0       	rjmp	.+132    	; 0x2bf8 <LCD_vidInitialize+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b74:	8e 01       	movw	r16, r28
    2b76:	0c 5b       	subi	r16, 0xBC	; 188
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ea 5b       	subi	r30, 0xBA	; 186
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	de 01       	movw	r26, r28
    2b98:	a0 5c       	subi	r26, 0xC0	; 192
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ec 5b       	subi	r30, 0xBC	; 188
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
    2bac:	fe 01       	movw	r30, r28
    2bae:	e0 5c       	subi	r30, 0xC0	; 192
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <LCD_vidInitialize+0x246>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e0 5c       	subi	r30, 0xC0	; 192
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	19 c0       	rjmp	.+50     	; 0x2bf8 <LCD_vidInitialize+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc6:	8e 01       	movw	r16, r28
    2bc8:	02 5b       	subi	r16, 0xB2	; 178
    2bca:	1f 4f       	sbci	r17, 0xFF	; 255
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e1 5b       	subi	r30, 0xB1	; 177
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	f8 01       	movw	r30, r16
    2be4:	80 83       	st	Z, r24
    2be6:	fe 01       	movw	r30, r28
    2be8:	e2 5b       	subi	r30, 0xB2	; 178
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf0:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bf2:	8a 95       	dec	r24
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_vidInitialize+0x282>
    2bf6:	8f af       	std	Y+63, r24	; 0x3f

	// Delay > 39us
	_delay_us(11);

	// Display ON/OFF Control D = 1, C = 1, B = 0
	LCD_vidInstruction(0X0c, write_operation, IR);
    2bf8:	8c e0       	ldi	r24, 0x0C	; 12
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a0 e3       	ldi	r26, 0x30	; 48
    2c08:	b1 e4       	ldi	r27, 0x41	; 65
    2c0a:	8b af       	std	Y+59, r24	; 0x3b
    2c0c:	9c af       	std	Y+60, r25	; 0x3c
    2c0e:	ad af       	std	Y+61, r26	; 0x3d
    2c10:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c12:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c14:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c1a:	2b ea       	ldi	r18, 0xAB	; 171
    2c1c:	3a ea       	ldi	r19, 0xAA	; 170
    2c1e:	4a e2       	ldi	r20, 0x2A	; 42
    2c20:	50 e4       	ldi	r21, 0x40	; 64
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8f ab       	std	Y+55, r24	; 0x37
    2c2c:	98 af       	std	Y+56, r25	; 0x38
    2c2e:	a9 af       	std	Y+57, r26	; 0x39
    2c30:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c32:	6f a9       	ldd	r22, Y+55	; 0x37
    2c34:	78 ad       	ldd	r23, Y+56	; 0x38
    2c36:	89 ad       	ldd	r24, Y+57	; 0x39
    2c38:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	1c f4       	brge	.+6      	; 0x2c50 <LCD_vidInitialize+0x2e0>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	8e ab       	std	Y+54, r24	; 0x36
    2c4e:	91 c0       	rjmp	.+290    	; 0x2d72 <LCD_vidInitialize+0x402>
	else if (__tmp > 255)
    2c50:	6f a9       	ldd	r22, Y+55	; 0x37
    2c52:	78 ad       	ldd	r23, Y+56	; 0x38
    2c54:	89 ad       	ldd	r24, Y+57	; 0x39
    2c56:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4f e7       	ldi	r20, 0x7F	; 127
    2c5e:	53 e4       	ldi	r21, 0x43	; 67
    2c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c64:	18 16       	cp	r1, r24
    2c66:	0c f0       	brlt	.+2      	; 0x2c6a <LCD_vidInitialize+0x2fa>
    2c68:	7b c0       	rjmp	.+246    	; 0x2d60 <LCD_vidInitialize+0x3f0>
	{
		_delay_ms(__us / 1000.0);
    2c6a:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c6c:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4a e7       	ldi	r20, 0x7A	; 122
    2c78:	54 e4       	ldi	r21, 0x44	; 68
    2c7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	8a ab       	std	Y+50, r24	; 0x32
    2c84:	9b ab       	std	Y+51, r25	; 0x33
    2c86:	ac ab       	std	Y+52, r26	; 0x34
    2c88:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8a:	6a a9       	ldd	r22, Y+50	; 0x32
    2c8c:	7b a9       	ldd	r23, Y+51	; 0x33
    2c8e:	8c a9       	ldd	r24, Y+52	; 0x34
    2c90:	9d a9       	ldd	r25, Y+53	; 0x35
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4a ef       	ldi	r20, 0xFA	; 250
    2c98:	54 e4       	ldi	r21, 0x44	; 68
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	8e a7       	std	Y+46, r24	; 0x2e
    2ca4:	9f a7       	std	Y+47, r25	; 0x2f
    2ca6:	a8 ab       	std	Y+48, r26	; 0x30
    2ca8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2caa:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cac:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cae:	88 a9       	ldd	r24, Y+48	; 0x30
    2cb0:	99 a9       	ldd	r25, Y+49	; 0x31
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e8       	ldi	r20, 0x80	; 128
    2cb8:	5f e3       	ldi	r21, 0x3F	; 63
    2cba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cbe:	88 23       	and	r24, r24
    2cc0:	2c f4       	brge	.+10     	; 0x2ccc <LCD_vidInitialize+0x35c>
		__ticks = 1;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9d a7       	std	Y+45, r25	; 0x2d
    2cc8:	8c a7       	std	Y+44, r24	; 0x2c
    2cca:	3f c0       	rjmp	.+126    	; 0x2d4a <LCD_vidInitialize+0x3da>
	else if (__tmp > 65535)
    2ccc:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cce:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cd0:	88 a9       	ldd	r24, Y+48	; 0x30
    2cd2:	99 a9       	ldd	r25, Y+49	; 0x31
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	3f ef       	ldi	r19, 0xFF	; 255
    2cd8:	4f e7       	ldi	r20, 0x7F	; 127
    2cda:	57 e4       	ldi	r21, 0x47	; 71
    2cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce0:	18 16       	cp	r1, r24
    2ce2:	4c f5       	brge	.+82     	; 0x2d36 <LCD_vidInitialize+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce4:	6a a9       	ldd	r22, Y+50	; 0x32
    2ce6:	7b a9       	ldd	r23, Y+51	; 0x33
    2ce8:	8c a9       	ldd	r24, Y+52	; 0x34
    2cea:	9d a9       	ldd	r25, Y+53	; 0x35
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e2       	ldi	r20, 0x20	; 32
    2cf2:	51 e4       	ldi	r21, 0x41	; 65
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	bc 01       	movw	r22, r24
    2cfe:	cd 01       	movw	r24, r26
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9d a7       	std	Y+45, r25	; 0x2d
    2d0a:	8c a7       	std	Y+44, r24	; 0x2c
    2d0c:	0f c0       	rjmp	.+30     	; 0x2d2c <LCD_vidInitialize+0x3bc>
    2d0e:	88 ec       	ldi	r24, 0xC8	; 200
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9b a7       	std	Y+43, r25	; 0x2b
    2d14:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d16:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d18:	9b a5       	ldd	r25, Y+43	; 0x2b
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <LCD_vidInitialize+0x3aa>
    2d1e:	9b a7       	std	Y+43, r25	; 0x2b
    2d20:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d22:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d24:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	9d a7       	std	Y+45, r25	; 0x2d
    2d2a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d2e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	69 f7       	brne	.-38     	; 0x2d0e <LCD_vidInitialize+0x39e>
    2d34:	24 c0       	rjmp	.+72     	; 0x2d7e <LCD_vidInitialize+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d36:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d38:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d3a:	88 a9       	ldd	r24, Y+48	; 0x30
    2d3c:	99 a9       	ldd	r25, Y+49	; 0x31
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9d a7       	std	Y+45, r25	; 0x2d
    2d48:	8c a7       	std	Y+44, r24	; 0x2c
    2d4a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d4c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d4e:	99 a7       	std	Y+41, r25	; 0x29
    2d50:	88 a7       	std	Y+40, r24	; 0x28
    2d52:	88 a5       	ldd	r24, Y+40	; 0x28
    2d54:	99 a5       	ldd	r25, Y+41	; 0x29
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_vidInitialize+0x3e6>
    2d5a:	99 a7       	std	Y+41, r25	; 0x29
    2d5c:	88 a7       	std	Y+40, r24	; 0x28
    2d5e:	0f c0       	rjmp	.+30     	; 0x2d7e <LCD_vidInitialize+0x40e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d60:	6f a9       	ldd	r22, Y+55	; 0x37
    2d62:	78 ad       	ldd	r23, Y+56	; 0x38
    2d64:	89 ad       	ldd	r24, Y+57	; 0x39
    2d66:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8e ab       	std	Y+54, r24	; 0x36
    2d72:	8e a9       	ldd	r24, Y+54	; 0x36
    2d74:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d76:	8f a1       	ldd	r24, Y+39	; 0x27
    2d78:	8a 95       	dec	r24
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <LCD_vidInitialize+0x408>
    2d7c:	8f a3       	std	Y+39, r24	; 0x27

	// Delay > 39us
	_delay_us(11);

	// Display Clear
	LCD_vidInstruction(0x01, write_operation, IR);
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	a0 e0       	ldi	r26, 0x00	; 0
    2d8e:	b0 e4       	ldi	r27, 0x40	; 64
    2d90:	8b a3       	std	Y+35, r24	; 0x23
    2d92:	9c a3       	std	Y+36, r25	; 0x24
    2d94:	ad a3       	std	Y+37, r26	; 0x25
    2d96:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d98:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	4a ef       	ldi	r20, 0xFA	; 250
    2da6:	54 e4       	ldi	r21, 0x44	; 68
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	8f 8f       	std	Y+31, r24	; 0x1f
    2db2:	98 a3       	std	Y+32, r25	; 0x20
    2db4:	a9 a3       	std	Y+33, r26	; 0x21
    2db6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2db8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dba:	78 a1       	ldd	r23, Y+32	; 0x20
    2dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e8       	ldi	r20, 0x80	; 128
    2dc6:	5f e3       	ldi	r21, 0x3F	; 63
    2dc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dcc:	88 23       	and	r24, r24
    2dce:	2c f4       	brge	.+10     	; 0x2dda <LCD_vidInitialize+0x46a>
		__ticks = 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd6:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd8:	3f c0       	rjmp	.+126    	; 0x2e58 <LCD_vidInitialize+0x4e8>
	else if (__tmp > 65535)
    2dda:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ddc:	78 a1       	ldd	r23, Y+32	; 0x20
    2dde:	89 a1       	ldd	r24, Y+33	; 0x21
    2de0:	9a a1       	ldd	r25, Y+34	; 0x22
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e7       	ldi	r20, 0x7F	; 127
    2de8:	57 e4       	ldi	r21, 0x47	; 71
    2dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dee:	18 16       	cp	r1, r24
    2df0:	4c f5       	brge	.+82     	; 0x2e44 <LCD_vidInitialize+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df2:	6b a1       	ldd	r22, Y+35	; 0x23
    2df4:	7c a1       	ldd	r23, Y+36	; 0x24
    2df6:	8d a1       	ldd	r24, Y+37	; 0x25
    2df8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e2       	ldi	r20, 0x20	; 32
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 8f       	std	Y+30, r25	; 0x1e
    2e18:	8d 8f       	std	Y+29, r24	; 0x1d
    2e1a:	0f c0       	rjmp	.+30     	; 0x2e3a <LCD_vidInitialize+0x4ca>
    2e1c:	88 ec       	ldi	r24, 0xC8	; 200
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9c 8f       	std	Y+28, r25	; 0x1c
    2e22:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_vidInitialize+0x4b8>
    2e2c:	9c 8f       	std	Y+28, r25	; 0x1c
    2e2e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	9e 8f       	std	Y+30, r25	; 0x1e
    2e38:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	69 f7       	brne	.-38     	; 0x2e1c <LCD_vidInitialize+0x4ac>
    2e42:	14 c0       	rjmp	.+40     	; 0x2e6c <LCD_vidInitialize+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e46:	78 a1       	ldd	r23, Y+32	; 0x20
    2e48:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	9e 8f       	std	Y+30, r25	; 0x1e
    2e56:	8d 8f       	std	Y+29, r24	; 0x1d
    2e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e5c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e5e:	89 8f       	std	Y+25, r24	; 0x19
    2e60:	89 8d       	ldd	r24, Y+25	; 0x19
    2e62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <LCD_vidInitialize+0x4f4>
    2e68:	9a 8f       	std	Y+26, r25	; 0x1a
    2e6a:	89 8f       	std	Y+25, r24	; 0x19

	// Delay > 1.53ms
	_delay_ms(2);

	// Entry Mode Set
	LCD_vidInstruction(0x06, write_operation, IR);
    2e6c:	86 e0       	ldi	r24, 0x06	; 6
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e3       	ldi	r26, 0x30	; 48
    2e7c:	b1 e4       	ldi	r27, 0x41	; 65
    2e7e:	8d 8b       	std	Y+21, r24	; 0x15
    2e80:	9e 8b       	std	Y+22, r25	; 0x16
    2e82:	af 8b       	std	Y+23, r26	; 0x17
    2e84:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e86:	6d 89       	ldd	r22, Y+21	; 0x15
    2e88:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8e:	2b ea       	ldi	r18, 0xAB	; 171
    2e90:	3a ea       	ldi	r19, 0xAA	; 170
    2e92:	4a e2       	ldi	r20, 0x2A	; 42
    2e94:	50 e4       	ldi	r21, 0x40	; 64
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	89 8b       	std	Y+17, r24	; 0x11
    2ea0:	9a 8b       	std	Y+18, r25	; 0x12
    2ea2:	ab 8b       	std	Y+19, r26	; 0x13
    2ea4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ea6:	69 89       	ldd	r22, Y+17	; 0x11
    2ea8:	7a 89       	ldd	r23, Y+18	; 0x12
    2eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2eac:	9c 89       	ldd	r25, Y+20	; 0x14
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	1c f4       	brge	.+6      	; 0x2ec4 <LCD_vidInitialize+0x554>
		__ticks = 1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	88 8b       	std	Y+16, r24	; 0x10
    2ec2:	91 c0       	rjmp	.+290    	; 0x2fe6 <LCD_vidInitialize+0x676>
	else if (__tmp > 255)
    2ec4:	69 89       	ldd	r22, Y+17	; 0x11
    2ec6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eca:	9c 89       	ldd	r25, Y+20	; 0x14
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	53 e4       	ldi	r21, 0x43	; 67
    2ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	0c f0       	brlt	.+2      	; 0x2ede <LCD_vidInitialize+0x56e>
    2edc:	7b c0       	rjmp	.+246    	; 0x2fd4 <LCD_vidInitialize+0x664>
	{
		_delay_ms(__us / 1000.0);
    2ede:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	4a e7       	ldi	r20, 0x7A	; 122
    2eec:	54 e4       	ldi	r21, 0x44	; 68
    2eee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	8c 87       	std	Y+12, r24	; 0x0c
    2ef8:	9d 87       	std	Y+13, r25	; 0x0d
    2efa:	ae 87       	std	Y+14, r26	; 0x0e
    2efc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f00:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	4a ef       	ldi	r20, 0xFA	; 250
    2f0c:	54 e4       	ldi	r21, 0x44	; 68
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	88 87       	std	Y+8, r24	; 0x08
    2f18:	99 87       	std	Y+9, r25	; 0x09
    2f1a:	aa 87       	std	Y+10, r26	; 0x0a
    2f1c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f1e:	68 85       	ldd	r22, Y+8	; 0x08
    2f20:	79 85       	ldd	r23, Y+9	; 0x09
    2f22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e8       	ldi	r20, 0x80	; 128
    2f2c:	5f e3       	ldi	r21, 0x3F	; 63
    2f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f32:	88 23       	and	r24, r24
    2f34:	2c f4       	brge	.+10     	; 0x2f40 <LCD_vidInitialize+0x5d0>
		__ticks = 1;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	9f 83       	std	Y+7, r25	; 0x07
    2f3c:	8e 83       	std	Y+6, r24	; 0x06
    2f3e:	3f c0       	rjmp	.+126    	; 0x2fbe <LCD_vidInitialize+0x64e>
	else if (__tmp > 65535)
    2f40:	68 85       	ldd	r22, Y+8	; 0x08
    2f42:	79 85       	ldd	r23, Y+9	; 0x09
    2f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	3f ef       	ldi	r19, 0xFF	; 255
    2f4c:	4f e7       	ldi	r20, 0x7F	; 127
    2f4e:	57 e4       	ldi	r21, 0x47	; 71
    2f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f54:	18 16       	cp	r1, r24
    2f56:	4c f5       	brge	.+82     	; 0x2faa <LCD_vidInitialize+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f58:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e2       	ldi	r20, 0x20	; 32
    2f66:	51 e4       	ldi	r21, 0x41	; 65
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	9f 83       	std	Y+7, r25	; 0x07
    2f7e:	8e 83       	std	Y+6, r24	; 0x06
    2f80:	0f c0       	rjmp	.+30     	; 0x2fa0 <LCD_vidInitialize+0x630>
    2f82:	88 ec       	ldi	r24, 0xC8	; 200
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9d 83       	std	Y+5, r25	; 0x05
    2f88:	8c 83       	std	Y+4, r24	; 0x04
    2f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <LCD_vidInitialize+0x61e>
    2f92:	9d 83       	std	Y+5, r25	; 0x05
    2f94:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f96:	8e 81       	ldd	r24, Y+6	; 0x06
    2f98:	9f 81       	ldd	r25, Y+7	; 0x07
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	9f 83       	std	Y+7, r25	; 0x07
    2f9e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	69 f7       	brne	.-38     	; 0x2f82 <LCD_vidInitialize+0x612>
    2fa8:	24 c0       	rjmp	.+72     	; 0x2ff2 <LCD_vidInitialize+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2faa:	68 85       	ldd	r22, Y+8	; 0x08
    2fac:	79 85       	ldd	r23, Y+9	; 0x09
    2fae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9f 83       	std	Y+7, r25	; 0x07
    2fbc:	8e 83       	std	Y+6, r24	; 0x06
    2fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc2:	9b 83       	std	Y+3, r25	; 0x03
    2fc4:	8a 83       	std	Y+2, r24	; 0x02
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <LCD_vidInitialize+0x65a>
    2fce:	9b 83       	std	Y+3, r25	; 0x03
    2fd0:	8a 83       	std	Y+2, r24	; 0x02
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <LCD_vidInitialize+0x682>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fd4:	69 89       	ldd	r22, Y+17	; 0x11
    2fd6:	7a 89       	ldd	r23, Y+18	; 0x12
    2fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fda:	9c 89       	ldd	r25, Y+20	; 0x14
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	88 8b       	std	Y+16, r24	; 0x10
    2fe6:	88 89       	ldd	r24, Y+16	; 0x10
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	8a 95       	dec	r24
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <LCD_vidInitialize+0x67c>
    2ff0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(11);
}
    2ff2:	ca 5a       	subi	r28, 0xAA	; 170
    2ff4:	df 4f       	sbci	r29, 0xFF	; 255
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	08 95       	ret

0000300a <LCD_vidInstruction>:


// Send instruction to execute
void LCD_vidInstruction(u8 command, u8 RW_value, u8 RS_value)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	e3 97       	sbiw	r28, 0x33	; 51
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	89 ab       	std	Y+49, r24	; 0x31
    3020:	6a ab       	std	Y+50, r22	; 0x32
    3022:	4b ab       	std	Y+51, r20	; 0x33
	// INDICATE WHICH REGISTER
	if(RS_value == IR)
    3024:	8b a9       	ldd	r24, Y+51	; 0x33
    3026:	88 23       	and	r24, r24
    3028:	31 f4       	brne	.+12     	; 0x3036 <LCD_vidInstruction+0x2c>
	{
		// RS = 0, indication for Instruction Register
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 0);
    302a:	83 e0       	ldi	r24, 0x03	; 3
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
    3034:	05 c0       	rjmp	.+10     	; 0x3040 <LCD_vidInstruction+0x36>
	}
	else
	{
		// RS = 1, indication for DATA Register
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 1);
    3036:	83 e0       	ldi	r24, 0x03	; 3
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	41 e0       	ldi	r20, 0x01	; 1
    303c:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
	}

	// INDICATE R/W OPERATION
	if(RW_value == write_operation)
    3040:	8a a9       	ldd	r24, Y+50	; 0x32
    3042:	88 23       	and	r24, r24
    3044:	51 f4       	brne	.+20     	; 0x305a <LCD_vidInstruction+0x50>
	{
		// R/W = 0, write indication
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 0);
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
		DIO_vidSetPortValue(LCD_PORT_DATA, command);
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	69 a9       	ldd	r22, Y+49	; 0x31
    3054:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_vidSetPortValue>
    3058:	09 c0       	rjmp	.+18     	; 0x306c <LCD_vidInstruction+0x62>
	}
	else
	{
		// R/W = 1, read indication
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 1);
    305a:	83 e0       	ldi	r24, 0x03	; 3
    305c:	61 e0       	ldi	r22, 0x01	; 1
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
		// Change Direction of PORT to input
		DIO_vidSetPortxDir(LCD_PORT_DATA, 0);
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_vidSetPortxDir>
	}

	// E = 1, H-to-L pulse
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, E_PIN, 1);
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	62 e0       	ldi	r22, 0x02	; 2
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 e2       	ldi	r26, 0x20	; 32
    307c:	b1 e4       	ldi	r27, 0x41	; 65
    307e:	8d a7       	std	Y+45, r24	; 0x2d
    3080:	9e a7       	std	Y+46, r25	; 0x2e
    3082:	af a7       	std	Y+47, r26	; 0x2f
    3084:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3086:	6d a5       	ldd	r22, Y+45	; 0x2d
    3088:	7e a5       	ldd	r23, Y+46	; 0x2e
    308a:	8f a5       	ldd	r24, Y+47	; 0x2f
    308c:	98 a9       	ldd	r25, Y+48	; 0x30
    308e:	2b ea       	ldi	r18, 0xAB	; 171
    3090:	3a ea       	ldi	r19, 0xAA	; 170
    3092:	4a e2       	ldi	r20, 0x2A	; 42
    3094:	50 e4       	ldi	r21, 0x40	; 64
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	89 a7       	std	Y+41, r24	; 0x29
    30a0:	9a a7       	std	Y+42, r25	; 0x2a
    30a2:	ab a7       	std	Y+43, r26	; 0x2b
    30a4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30a6:	69 a5       	ldd	r22, Y+41	; 0x29
    30a8:	7a a5       	ldd	r23, Y+42	; 0x2a
    30aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	5f e3       	ldi	r21, 0x3F	; 63
    30b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	1c f4       	brge	.+6      	; 0x30c4 <LCD_vidInstruction+0xba>
		__ticks = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	88 a7       	std	Y+40, r24	; 0x28
    30c2:	91 c0       	rjmp	.+290    	; 0x31e6 <LCD_vidInstruction+0x1dc>
	else if (__tmp > 255)
    30c4:	69 a5       	ldd	r22, Y+41	; 0x29
    30c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    30c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	53 e4       	ldi	r21, 0x43	; 67
    30d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d8:	18 16       	cp	r1, r24
    30da:	0c f0       	brlt	.+2      	; 0x30de <LCD_vidInstruction+0xd4>
    30dc:	7b c0       	rjmp	.+246    	; 0x31d4 <LCD_vidInstruction+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    30de:	6d a5       	ldd	r22, Y+45	; 0x2d
    30e0:	7e a5       	ldd	r23, Y+46	; 0x2e
    30e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e4:	98 a9       	ldd	r25, Y+48	; 0x30
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	4a e7       	ldi	r20, 0x7A	; 122
    30ec:	54 e4       	ldi	r21, 0x44	; 68
    30ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	8c a3       	std	Y+36, r24	; 0x24
    30f8:	9d a3       	std	Y+37, r25	; 0x25
    30fa:	ae a3       	std	Y+38, r26	; 0x26
    30fc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fe:	6c a1       	ldd	r22, Y+36	; 0x24
    3100:	7d a1       	ldd	r23, Y+37	; 0x25
    3102:	8e a1       	ldd	r24, Y+38	; 0x26
    3104:	9f a1       	ldd	r25, Y+39	; 0x27
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	4a ef       	ldi	r20, 0xFA	; 250
    310c:	54 e4       	ldi	r21, 0x44	; 68
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	88 a3       	std	Y+32, r24	; 0x20
    3118:	99 a3       	std	Y+33, r25	; 0x21
    311a:	aa a3       	std	Y+34, r26	; 0x22
    311c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    311e:	68 a1       	ldd	r22, Y+32	; 0x20
    3120:	79 a1       	ldd	r23, Y+33	; 0x21
    3122:	8a a1       	ldd	r24, Y+34	; 0x22
    3124:	9b a1       	ldd	r25, Y+35	; 0x23
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e8       	ldi	r20, 0x80	; 128
    312c:	5f e3       	ldi	r21, 0x3F	; 63
    312e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3132:	88 23       	and	r24, r24
    3134:	2c f4       	brge	.+10     	; 0x3140 <LCD_vidInstruction+0x136>
		__ticks = 1;
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	9f 8f       	std	Y+31, r25	; 0x1f
    313c:	8e 8f       	std	Y+30, r24	; 0x1e
    313e:	3f c0       	rjmp	.+126    	; 0x31be <LCD_vidInstruction+0x1b4>
	else if (__tmp > 65535)
    3140:	68 a1       	ldd	r22, Y+32	; 0x20
    3142:	79 a1       	ldd	r23, Y+33	; 0x21
    3144:	8a a1       	ldd	r24, Y+34	; 0x22
    3146:	9b a1       	ldd	r25, Y+35	; 0x23
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	3f ef       	ldi	r19, 0xFF	; 255
    314c:	4f e7       	ldi	r20, 0x7F	; 127
    314e:	57 e4       	ldi	r21, 0x47	; 71
    3150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3154:	18 16       	cp	r1, r24
    3156:	4c f5       	brge	.+82     	; 0x31aa <LCD_vidInstruction+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3158:	6c a1       	ldd	r22, Y+36	; 0x24
    315a:	7d a1       	ldd	r23, Y+37	; 0x25
    315c:	8e a1       	ldd	r24, Y+38	; 0x26
    315e:	9f a1       	ldd	r25, Y+39	; 0x27
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e2       	ldi	r20, 0x20	; 32
    3166:	51 e4       	ldi	r21, 0x41	; 65
    3168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	9f 8f       	std	Y+31, r25	; 0x1f
    317e:	8e 8f       	std	Y+30, r24	; 0x1e
    3180:	0f c0       	rjmp	.+30     	; 0x31a0 <LCD_vidInstruction+0x196>
    3182:	88 ec       	ldi	r24, 0xC8	; 200
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9d 8f       	std	Y+29, r25	; 0x1d
    3188:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    318a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    318c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    318e:	01 97       	sbiw	r24, 0x01	; 1
    3190:	f1 f7       	brne	.-4      	; 0x318e <LCD_vidInstruction+0x184>
    3192:	9d 8f       	std	Y+29, r25	; 0x1d
    3194:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3196:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3198:	9f 8d       	ldd	r25, Y+31	; 0x1f
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	9f 8f       	std	Y+31, r25	; 0x1f
    319e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31a4:	00 97       	sbiw	r24, 0x00	; 0
    31a6:	69 f7       	brne	.-38     	; 0x3182 <LCD_vidInstruction+0x178>
    31a8:	24 c0       	rjmp	.+72     	; 0x31f2 <LCD_vidInstruction+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31aa:	68 a1       	ldd	r22, Y+32	; 0x20
    31ac:	79 a1       	ldd	r23, Y+33	; 0x21
    31ae:	8a a1       	ldd	r24, Y+34	; 0x22
    31b0:	9b a1       	ldd	r25, Y+35	; 0x23
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9f 8f       	std	Y+31, r25	; 0x1f
    31bc:	8e 8f       	std	Y+30, r24	; 0x1e
    31be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31c2:	9b 8f       	std	Y+27, r25	; 0x1b
    31c4:	8a 8f       	std	Y+26, r24	; 0x1a
    31c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <LCD_vidInstruction+0x1c0>
    31ce:	9b 8f       	std	Y+27, r25	; 0x1b
    31d0:	8a 8f       	std	Y+26, r24	; 0x1a
    31d2:	0f c0       	rjmp	.+30     	; 0x31f2 <LCD_vidInstruction+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31d4:	69 a5       	ldd	r22, Y+41	; 0x29
    31d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    31d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31da:	9c a5       	ldd	r25, Y+44	; 0x2c
    31dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	88 a7       	std	Y+40, r24	; 0x28
    31e6:	88 a5       	ldd	r24, Y+40	; 0x28
    31e8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31ea:	89 8d       	ldd	r24, Y+25	; 0x19
    31ec:	8a 95       	dec	r24
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_vidInstruction+0x1e2>
    31f0:	89 8f       	std	Y+25, r24	; 0x19

	// Wait to make enable wide
	_delay_us(10);

	// READ/WRITE VALUES FROM/TO LCD
	if(RW_value == write_operation)
    31f2:	8a a9       	ldd	r24, Y+50	; 0x32
    31f4:	88 23       	and	r24, r24
    31f6:	29 f0       	breq	.+10     	; 0x3202 <LCD_vidInstruction+0x1f8>

	}
	else
	{
		// Store the whole PIN_REG value
		DATA = DIO_GetPinValue(LCD_PORT_DATA);
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DIO_GetPinValue>
    31fe:	80 93 b1 04 	sts	0x04B1, r24
	}

	// EN = 0
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, E_PIN, 0);
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	62 e0       	ldi	r22, 0x02	; 2
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_vidSetPortBitValue>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e2       	ldi	r26, 0x20	; 32
    3212:	b1 e4       	ldi	r27, 0x41	; 65
    3214:	8d 8b       	std	Y+21, r24	; 0x15
    3216:	9e 8b       	std	Y+22, r25	; 0x16
    3218:	af 8b       	std	Y+23, r26	; 0x17
    321a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	2b ea       	ldi	r18, 0xAB	; 171
    3226:	3a ea       	ldi	r19, 0xAA	; 170
    3228:	4a e2       	ldi	r20, 0x2A	; 42
    322a:	50 e4       	ldi	r21, 0x40	; 64
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	9a 8b       	std	Y+18, r25	; 0x12
    3238:	ab 8b       	std	Y+19, r26	; 0x13
    323a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    323c:	69 89       	ldd	r22, Y+17	; 0x11
    323e:	7a 89       	ldd	r23, Y+18	; 0x12
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	1c f4       	brge	.+6      	; 0x325a <LCD_vidInstruction+0x250>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	88 8b       	std	Y+16, r24	; 0x10
    3258:	91 c0       	rjmp	.+290    	; 0x337c <LCD_vidInstruction+0x372>
	else if (__tmp > 255)
    325a:	69 89       	ldd	r22, Y+17	; 0x11
    325c:	7a 89       	ldd	r23, Y+18	; 0x12
    325e:	8b 89       	ldd	r24, Y+19	; 0x13
    3260:	9c 89       	ldd	r25, Y+20	; 0x14
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	53 e4       	ldi	r21, 0x43	; 67
    326a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	0c f0       	brlt	.+2      	; 0x3274 <LCD_vidInstruction+0x26a>
    3272:	7b c0       	rjmp	.+246    	; 0x336a <LCD_vidInstruction+0x360>
	{
		_delay_ms(__us / 1000.0);
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a e7       	ldi	r20, 0x7A	; 122
    3282:	54 e4       	ldi	r21, 0x44	; 68
    3284:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	8c 87       	std	Y+12, r24	; 0x0c
    328e:	9d 87       	std	Y+13, r25	; 0x0d
    3290:	ae 87       	std	Y+14, r26	; 0x0e
    3292:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6c 85       	ldd	r22, Y+12	; 0x0c
    3296:	7d 85       	ldd	r23, Y+13	; 0x0d
    3298:	8e 85       	ldd	r24, Y+14	; 0x0e
    329a:	9f 85       	ldd	r25, Y+15	; 0x0f
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	88 87       	std	Y+8, r24	; 0x08
    32ae:	99 87       	std	Y+9, r25	; 0x09
    32b0:	aa 87       	std	Y+10, r26	; 0x0a
    32b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32b4:	68 85       	ldd	r22, Y+8	; 0x08
    32b6:	79 85       	ldd	r23, Y+9	; 0x09
    32b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <LCD_vidInstruction+0x2cc>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9f 83       	std	Y+7, r25	; 0x07
    32d2:	8e 83       	std	Y+6, r24	; 0x06
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <LCD_vidInstruction+0x34a>
	else if (__tmp > 65535)
    32d6:	68 85       	ldd	r22, Y+8	; 0x08
    32d8:	79 85       	ldd	r23, Y+9	; 0x09
    32da:	8a 85       	ldd	r24, Y+10	; 0x0a
    32dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <LCD_vidInstruction+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    32f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    32f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9f 83       	std	Y+7, r25	; 0x07
    3314:	8e 83       	std	Y+6, r24	; 0x06
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <LCD_vidInstruction+0x32c>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9d 83       	std	Y+5, r25	; 0x05
    331e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3320:	8c 81       	ldd	r24, Y+4	; 0x04
    3322:	9d 81       	ldd	r25, Y+5	; 0x05
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <LCD_vidInstruction+0x31a>
    3328:	9d 83       	std	Y+5, r25	; 0x05
    332a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8e 81       	ldd	r24, Y+6	; 0x06
    332e:	9f 81       	ldd	r25, Y+7	; 0x07
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9f 83       	std	Y+7, r25	; 0x07
    3334:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8e 81       	ldd	r24, Y+6	; 0x06
    3338:	9f 81       	ldd	r25, Y+7	; 0x07
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <LCD_vidInstruction+0x30e>
    333e:	24 c0       	rjmp	.+72     	; 0x3388 <LCD_vidInstruction+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	68 85       	ldd	r22, Y+8	; 0x08
    3342:	79 85       	ldd	r23, Y+9	; 0x09
    3344:	8a 85       	ldd	r24, Y+10	; 0x0a
    3346:	9b 85       	ldd	r25, Y+11	; 0x0b
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9f 83       	std	Y+7, r25	; 0x07
    3352:	8e 83       	std	Y+6, r24	; 0x06
    3354:	8e 81       	ldd	r24, Y+6	; 0x06
    3356:	9f 81       	ldd	r25, Y+7	; 0x07
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <LCD_vidInstruction+0x356>
    3364:	9b 83       	std	Y+3, r25	; 0x03
    3366:	8a 83       	std	Y+2, r24	; 0x02
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <LCD_vidInstruction+0x37e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    336a:	69 89       	ldd	r22, Y+17	; 0x11
    336c:	7a 89       	ldd	r23, Y+18	; 0x12
    336e:	8b 89       	ldd	r24, Y+19	; 0x13
    3370:	9c 89       	ldd	r25, Y+20	; 0x14
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	88 8b       	std	Y+16, r24	; 0x10
    337c:	88 89       	ldd	r24, Y+16	; 0x10
    337e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	8a 95       	dec	r24
    3384:	f1 f7       	brne	.-4      	; 0x3382 <LCD_vidInstruction+0x378>
    3386:	89 83       	std	Y+1, r24	; 0x01
	// Wait to make enable wide
	_delay_us(10);

	// FORCE Direction of PORT to OUTPUT

	DIO_vidSetPortxDir(LCD_PORT_DATA, 1);
    3388:	82 e0       	ldi	r24, 0x02	; 2
    338a:	61 e0       	ldi	r22, 0x01	; 1
    338c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_vidSetPortxDir>
}
    3390:	e3 96       	adiw	r28, 0x33	; 51
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <LCD_vidData>:

// Send Data to display
void LCD_vidData(s16 data)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <LCD_vidData+0x6>
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidInstruction(data, write_operation, DR);
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	60 e0       	ldi	r22, 0x00	; 0
    33b4:	41 e0       	ldi	r20, 0x01	; 1
    33b6:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <LCD_String>:

// Display string from user
char LCD_String(char *ch)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <LCD_String+0x6>
    33ca:	0f 92       	push	r0
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	9b 83       	std	Y+3, r25	; 0x03
    33d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;

	// Iterate over string characters
	for(i = 0; ch[i] != '\0'; i++)
    33d4:	19 82       	std	Y+1, r1	; 0x01
    33d6:	10 c0       	rjmp	.+32     	; 0x33f8 <LCD_String+0x34>
	{
		LCD_vidData(ch[i]);
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	9b 81       	ldd	r25, Y+3	; 0x03
    33e2:	fc 01       	movw	r30, r24
    33e4:	e2 0f       	add	r30, r18
    33e6:	f3 1f       	adc	r31, r19
    33e8:	80 81       	ld	r24, Z
    33ea:	88 2f       	mov	r24, r24
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <LCD_vidData>
char LCD_String(char *ch)
{
	u8 i;

	// Iterate over string characters
	for(i = 0; ch[i] != '\0'; i++)
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	8f 5f       	subi	r24, 0xFF	; 255
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	9b 81       	ldd	r25, Y+3	; 0x03
    3402:	fc 01       	movw	r30, r24
    3404:	e2 0f       	add	r30, r18
    3406:	f3 1f       	adc	r31, r19
    3408:	80 81       	ld	r24, Z
    340a:	88 23       	and	r24, r24
    340c:	29 f7       	brne	.-54     	; 0x33d8 <LCD_String+0x14>
	{
		LCD_vidData(ch[i]);
	}

	// Return length of string
	return i;
    340e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <LCD_vidGoTo>:


// Define a location to write to
void LCD_vidGoTo(u8 x, u8 y)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	6d 97       	sbiw	r28, 0x1d	; 29
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	8c 8f       	std	Y+28, r24	; 0x1c
    3432:	6d 8f       	std	Y+29, r22	; 0x1d
	// Array with 2 possible lines
	u8 location[] = {0x00, 0x40};
    3434:	1a 8e       	std	Y+26, r1	; 0x1a
    3436:	80 e4       	ldi	r24, 0x40	; 64
    3438:	8b 8f       	std	Y+27, r24	; 0x1b

	// Configuring the instruction for the location acquired
	u8 address = location[y-1] + x - 1;
    343a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    343c:	88 2f       	mov	r24, r24
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9c 01       	movw	r18, r24
    3442:	21 50       	subi	r18, 0x01	; 1
    3444:	30 40       	sbci	r19, 0x00	; 0
    3446:	ce 01       	movw	r24, r28
    3448:	4a 96       	adiw	r24, 0x1a	; 26
    344a:	fc 01       	movw	r30, r24
    344c:	e2 0f       	add	r30, r18
    344e:	f3 1f       	adc	r31, r19
    3450:	90 81       	ld	r25, Z
    3452:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3454:	89 0f       	add	r24, r25
    3456:	81 50       	subi	r24, 0x01	; 1
    3458:	89 8f       	std	Y+25, r24	; 0x19

	// Just complete the instruction from data_sheet
	address = address + (1<<7);
    345a:	89 8d       	ldd	r24, Y+25	; 0x19
    345c:	80 58       	subi	r24, 0x80	; 128
    345e:	89 8f       	std	Y+25, r24	; 0x19

	// Execute instruction
	LCD_vidInstruction(address, write_operation, IR);
    3460:	89 8d       	ldd	r24, Y+25	; 0x19
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	40 e0       	ldi	r20, 0x00	; 0
    3466:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	a0 ea       	ldi	r26, 0xA0	; 160
    3470:	b1 e4       	ldi	r27, 0x41	; 65
    3472:	8d 8b       	std	Y+21, r24	; 0x15
    3474:	9e 8b       	std	Y+22, r25	; 0x16
    3476:	af 8b       	std	Y+23, r26	; 0x17
    3478:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    347a:	6d 89       	ldd	r22, Y+21	; 0x15
    347c:	7e 89       	ldd	r23, Y+22	; 0x16
    347e:	8f 89       	ldd	r24, Y+23	; 0x17
    3480:	98 8d       	ldd	r25, Y+24	; 0x18
    3482:	2b ea       	ldi	r18, 0xAB	; 171
    3484:	3a ea       	ldi	r19, 0xAA	; 170
    3486:	4a e2       	ldi	r20, 0x2A	; 42
    3488:	50 e4       	ldi	r21, 0x40	; 64
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	89 8b       	std	Y+17, r24	; 0x11
    3494:	9a 8b       	std	Y+18, r25	; 0x12
    3496:	ab 8b       	std	Y+19, r26	; 0x13
    3498:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    349a:	69 89       	ldd	r22, Y+17	; 0x11
    349c:	7a 89       	ldd	r23, Y+18	; 0x12
    349e:	8b 89       	ldd	r24, Y+19	; 0x13
    34a0:	9c 89       	ldd	r25, Y+20	; 0x14
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e8       	ldi	r20, 0x80	; 128
    34a8:	5f e3       	ldi	r21, 0x3F	; 63
    34aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ae:	88 23       	and	r24, r24
    34b0:	1c f4       	brge	.+6      	; 0x34b8 <LCD_vidGoTo+0x9c>
		__ticks = 1;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	88 8b       	std	Y+16, r24	; 0x10
    34b6:	91 c0       	rjmp	.+290    	; 0x35da <LCD_vidGoTo+0x1be>
	else if (__tmp > 255)
    34b8:	69 89       	ldd	r22, Y+17	; 0x11
    34ba:	7a 89       	ldd	r23, Y+18	; 0x12
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4f e7       	ldi	r20, 0x7F	; 127
    34c6:	53 e4       	ldi	r21, 0x43	; 67
    34c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34cc:	18 16       	cp	r1, r24
    34ce:	0c f0       	brlt	.+2      	; 0x34d2 <LCD_vidGoTo+0xb6>
    34d0:	7b c0       	rjmp	.+246    	; 0x35c8 <LCD_vidGoTo+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    34d2:	6d 89       	ldd	r22, Y+21	; 0x15
    34d4:	7e 89       	ldd	r23, Y+22	; 0x16
    34d6:	8f 89       	ldd	r24, Y+23	; 0x17
    34d8:	98 8d       	ldd	r25, Y+24	; 0x18
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4a e7       	ldi	r20, 0x7A	; 122
    34e0:	54 e4       	ldi	r21, 0x44	; 68
    34e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	8c 87       	std	Y+12, r24	; 0x0c
    34ec:	9d 87       	std	Y+13, r25	; 0x0d
    34ee:	ae 87       	std	Y+14, r26	; 0x0e
    34f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    34f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    34f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4a ef       	ldi	r20, 0xFA	; 250
    3500:	54 e4       	ldi	r21, 0x44	; 68
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	88 87       	std	Y+8, r24	; 0x08
    350c:	99 87       	std	Y+9, r25	; 0x09
    350e:	aa 87       	std	Y+10, r26	; 0x0a
    3510:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3512:	68 85       	ldd	r22, Y+8	; 0x08
    3514:	79 85       	ldd	r23, Y+9	; 0x09
    3516:	8a 85       	ldd	r24, Y+10	; 0x0a
    3518:	9b 85       	ldd	r25, Y+11	; 0x0b
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3526:	88 23       	and	r24, r24
    3528:	2c f4       	brge	.+10     	; 0x3534 <LCD_vidGoTo+0x118>
		__ticks = 1;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9f 83       	std	Y+7, r25	; 0x07
    3530:	8e 83       	std	Y+6, r24	; 0x06
    3532:	3f c0       	rjmp	.+126    	; 0x35b2 <LCD_vidGoTo+0x196>
	else if (__tmp > 65535)
    3534:	68 85       	ldd	r22, Y+8	; 0x08
    3536:	79 85       	ldd	r23, Y+9	; 0x09
    3538:	8a 85       	ldd	r24, Y+10	; 0x0a
    353a:	9b 85       	ldd	r25, Y+11	; 0x0b
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	4f e7       	ldi	r20, 0x7F	; 127
    3542:	57 e4       	ldi	r21, 0x47	; 71
    3544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3548:	18 16       	cp	r1, r24
    354a:	4c f5       	brge	.+82     	; 0x359e <LCD_vidGoTo+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	6c 85       	ldd	r22, Y+12	; 0x0c
    354e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3550:	8e 85       	ldd	r24, Y+14	; 0x0e
    3552:	9f 85       	ldd	r25, Y+15	; 0x0f
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e2       	ldi	r20, 0x20	; 32
    355a:	51 e4       	ldi	r21, 0x41	; 65
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9f 83       	std	Y+7, r25	; 0x07
    3572:	8e 83       	std	Y+6, r24	; 0x06
    3574:	0f c0       	rjmp	.+30     	; 0x3594 <LCD_vidGoTo+0x178>
    3576:	88 ec       	ldi	r24, 0xC8	; 200
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9d 83       	std	Y+5, r25	; 0x05
    357c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    357e:	8c 81       	ldd	r24, Y+4	; 0x04
    3580:	9d 81       	ldd	r25, Y+5	; 0x05
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <LCD_vidGoTo+0x166>
    3586:	9d 83       	std	Y+5, r25	; 0x05
    3588:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358a:	8e 81       	ldd	r24, Y+6	; 0x06
    358c:	9f 81       	ldd	r25, Y+7	; 0x07
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	9f 83       	std	Y+7, r25	; 0x07
    3592:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3594:	8e 81       	ldd	r24, Y+6	; 0x06
    3596:	9f 81       	ldd	r25, Y+7	; 0x07
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	69 f7       	brne	.-38     	; 0x3576 <LCD_vidGoTo+0x15a>
    359c:	24 c0       	rjmp	.+72     	; 0x35e6 <LCD_vidGoTo+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359e:	68 85       	ldd	r22, Y+8	; 0x08
    35a0:	79 85       	ldd	r23, Y+9	; 0x09
    35a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9f 83       	std	Y+7, r25	; 0x07
    35b0:	8e 83       	std	Y+6, r24	; 0x06
    35b2:	8e 81       	ldd	r24, Y+6	; 0x06
    35b4:	9f 81       	ldd	r25, Y+7	; 0x07
    35b6:	9b 83       	std	Y+3, r25	; 0x03
    35b8:	8a 83       	std	Y+2, r24	; 0x02
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	9b 81       	ldd	r25, Y+3	; 0x03
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <LCD_vidGoTo+0x1a2>
    35c2:	9b 83       	std	Y+3, r25	; 0x03
    35c4:	8a 83       	std	Y+2, r24	; 0x02
    35c6:	0f c0       	rjmp	.+30     	; 0x35e6 <LCD_vidGoTo+0x1ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35c8:	69 89       	ldd	r22, Y+17	; 0x11
    35ca:	7a 89       	ldd	r23, Y+18	; 0x12
    35cc:	8b 89       	ldd	r24, Y+19	; 0x13
    35ce:	9c 89       	ldd	r25, Y+20	; 0x14
    35d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	88 8b       	std	Y+16, r24	; 0x10
    35da:	88 89       	ldd	r24, Y+16	; 0x10
    35dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	8a 95       	dec	r24
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <LCD_vidGoTo+0x1c4>
    35e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20);
}
    35e6:	6d 96       	adiw	r28, 0x1d	; 29
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <LCD_u8CurrentLocation_AC>:


u8 LCD_u8CurrentLocation_AC(void)
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	0f 92       	push	r0
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
	u8 final_location = 0;
    3602:	19 82       	std	Y+1, r1	; 0x01

	// READ_FROM IR and assign to GLOBAL VAR. DATA
	LCD_vidInstruction(0, read_operation, IR);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	61 e0       	ldi	r22, 0x01	; 1
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>

	// to lose the value of BF and get only AC value
	final_location = DATA & 0x7f;
    360e:	80 91 b1 04 	lds	r24, 0x04B1
    3612:	8f 77       	andi	r24, 0x7F	; 127
    3614:	89 83       	std	Y+1, r24	; 0x01

	return final_location;
    3616:	89 81       	ldd	r24, Y+1	; 0x01
}
    3618:	0f 90       	pop	r0
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <LCD_vidClearOnDemand>:


// Clear display via start and end locations specified by the user
void LCD_vidClearOnDemand(u8 start, u8 end)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	00 d0       	rcall	.+0      	; 0x3626 <LCD_vidClearOnDemand+0x6>
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	89 83       	std	Y+1, r24	; 0x01
    362c:	6a 83       	std	Y+2, r22	; 0x02

	// Start where the user has provided
	LCD_vidGoTo(start, 1);
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	61 e0       	ldi	r22, 0x01	; 1
    3632:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
    3636:	14 c0       	rjmp	.+40     	; 0x3660 <LCD_vidClearOnDemand+0x40>

	// Move with addresses to clear the display pixel by pixel
	for(start; start <= end; start ++)
	{
		// Indication for second line in LCD
		if(start > 16)
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	81 31       	cpi	r24, 0x11	; 17
    363c:	48 f0       	brcs	.+18     	; 0x3650 <LCD_vidClearOnDemand+0x30>
		{
			start = 1;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidGoTo(start, 2);
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	62 e0       	ldi	r22, 0x02	; 2
    3646:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			end -= 16;
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	80 51       	subi	r24, 0x10	; 16
    364e:	8a 83       	std	Y+2, r24	; 0x02
		}
		LCD_vidInstruction(0x20, write_operation, DR);
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>

	// Start where the user has provided
	LCD_vidGoTo(start, 1);

	// Move with addresses to clear the display pixel by pixel
	for(start; start <= end; start ++)
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	8f 5f       	subi	r24, 0xFF	; 255
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	99 81       	ldd	r25, Y+1	; 0x01
    3662:	8a 81       	ldd	r24, Y+2	; 0x02
    3664:	89 17       	cp	r24, r25
    3666:	40 f7       	brcc	.-48     	; 0x3638 <LCD_vidClearOnDemand+0x18>
			end -= 16;
		}
		LCD_vidInstruction(0x20, write_operation, DR);
	}

	LCD_vidGoTo(1, 1);
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>

}
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <Timer1_vidPreScaler>:

f32 Tick_timer = 0;

// Value returned is Tick_time in microseconds
f32 Timer1_vidPreScaler(u16 scale)
{
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	28 97       	sbiw	r28, 0x08	; 8
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
	switch(scale)
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	98 87       	std	Y+8, r25	; 0x08
    3698:	8f 83       	std	Y+7, r24	; 0x07
    369a:	af 81       	ldd	r26, Y+7	; 0x07
    369c:	b8 85       	ldd	r27, Y+8	; 0x08
    369e:	a0 34       	cpi	r26, 0x40	; 64
    36a0:	b1 05       	cpc	r27, r1
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <Timer1_vidPreScaler+0x2c>
    36a4:	5d c0       	rjmp	.+186    	; 0x3760 <Timer1_vidPreScaler+0xe6>
    36a6:	8f 81       	ldd	r24, Y+7	; 0x07
    36a8:	98 85       	ldd	r25, Y+8	; 0x08
    36aa:	81 34       	cpi	r24, 0x41	; 65
    36ac:	91 05       	cpc	r25, r1
    36ae:	58 f4       	brcc	.+22     	; 0x36c6 <Timer1_vidPreScaler+0x4c>
    36b0:	af 81       	ldd	r26, Y+7	; 0x07
    36b2:	b8 85       	ldd	r27, Y+8	; 0x08
    36b4:	a1 30       	cpi	r26, 0x01	; 1
    36b6:	b1 05       	cpc	r27, r1
    36b8:	a9 f0       	breq	.+42     	; 0x36e4 <Timer1_vidPreScaler+0x6a>
    36ba:	8f 81       	ldd	r24, Y+7	; 0x07
    36bc:	98 85       	ldd	r25, Y+8	; 0x08
    36be:	88 30       	cpi	r24, 0x08	; 8
    36c0:	91 05       	cpc	r25, r1
    36c2:	79 f1       	breq	.+94     	; 0x3722 <Timer1_vidPreScaler+0xa8>
    36c4:	aa c0       	rjmp	.+340    	; 0x381a <Timer1_vidPreScaler+0x1a0>
    36c6:	af 81       	ldd	r26, Y+7	; 0x07
    36c8:	b8 85       	ldd	r27, Y+8	; 0x08
    36ca:	21 e0       	ldi	r18, 0x01	; 1
    36cc:	a0 30       	cpi	r26, 0x00	; 0
    36ce:	b2 07       	cpc	r27, r18
    36d0:	09 f4       	brne	.+2      	; 0x36d4 <Timer1_vidPreScaler+0x5a>
    36d2:	65 c0       	rjmp	.+202    	; 0x379e <Timer1_vidPreScaler+0x124>
    36d4:	8f 81       	ldd	r24, Y+7	; 0x07
    36d6:	98 85       	ldd	r25, Y+8	; 0x08
    36d8:	a4 e0       	ldi	r26, 0x04	; 4
    36da:	80 30       	cpi	r24, 0x00	; 0
    36dc:	9a 07       	cpc	r25, r26
    36de:	09 f4       	brne	.+2      	; 0x36e2 <Timer1_vidPreScaler+0x68>
    36e0:	7d c0       	rjmp	.+250    	; 0x37dc <Timer1_vidPreScaler+0x162>
    36e2:	9b c0       	rjmp	.+310    	; 0x381a <Timer1_vidPreScaler+0x1a0>
	{
	case 1:
		set_bit(TCCR1B, CS10);
    36e4:	ae e4       	ldi	r26, 0x4E	; 78
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	ee e4       	ldi	r30, 0x4E	; 78
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	81 60       	ori	r24, 0x01	; 1
    36f2:	11 96       	adiw	r26, 0x01	; 1
    36f4:	9c 93       	st	X, r25
    36f6:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS11);
    36f8:	ae e4       	ldi	r26, 0x4E	; 78
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	ee e4       	ldi	r30, 0x4E	; 78
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	8d 7f       	andi	r24, 0xFD	; 253
    3706:	11 96       	adiw	r26, 0x01	; 1
    3708:	9c 93       	st	X, r25
    370a:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS12);
    370c:	ae e4       	ldi	r26, 0x4E	; 78
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	ee e4       	ldi	r30, 0x4E	; 78
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	8b 7f       	andi	r24, 0xFB	; 251
    371a:	11 96       	adiw	r26, 0x01	; 1
    371c:	9c 93       	st	X, r25
    371e:	8e 93       	st	-X, r24
    3720:	c0 c0       	rjmp	.+384    	; 0x38a2 <Timer1_vidPreScaler+0x228>
		break;

	case 8:
		clr_bit(TCCR1B, CS10);
    3722:	ae e4       	ldi	r26, 0x4E	; 78
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	ee e4       	ldi	r30, 0x4E	; 78
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	91 81       	ldd	r25, Z+1	; 0x01
    372e:	8e 7f       	andi	r24, 0xFE	; 254
    3730:	11 96       	adiw	r26, 0x01	; 1
    3732:	9c 93       	st	X, r25
    3734:	8e 93       	st	-X, r24
		set_bit(TCCR1B, CS11);
    3736:	ae e4       	ldi	r26, 0x4E	; 78
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	ee e4       	ldi	r30, 0x4E	; 78
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	82 60       	ori	r24, 0x02	; 2
    3744:	11 96       	adiw	r26, 0x01	; 1
    3746:	9c 93       	st	X, r25
    3748:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS12);
    374a:	ae e4       	ldi	r26, 0x4E	; 78
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	ee e4       	ldi	r30, 0x4E	; 78
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	80 81       	ld	r24, Z
    3754:	91 81       	ldd	r25, Z+1	; 0x01
    3756:	8b 7f       	andi	r24, 0xFB	; 251
    3758:	11 96       	adiw	r26, 0x01	; 1
    375a:	9c 93       	st	X, r25
    375c:	8e 93       	st	-X, r24
    375e:	a1 c0       	rjmp	.+322    	; 0x38a2 <Timer1_vidPreScaler+0x228>
		break;

	case 64:
		set_bit(TCCR1B, CS10);
    3760:	ae e4       	ldi	r26, 0x4E	; 78
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	ee e4       	ldi	r30, 0x4E	; 78
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	81 60       	ori	r24, 0x01	; 1
    376e:	11 96       	adiw	r26, 0x01	; 1
    3770:	9c 93       	st	X, r25
    3772:	8e 93       	st	-X, r24
		set_bit(TCCR1B, CS11);
    3774:	ae e4       	ldi	r26, 0x4E	; 78
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	ee e4       	ldi	r30, 0x4E	; 78
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	91 81       	ldd	r25, Z+1	; 0x01
    3780:	82 60       	ori	r24, 0x02	; 2
    3782:	11 96       	adiw	r26, 0x01	; 1
    3784:	9c 93       	st	X, r25
    3786:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS12);
    3788:	ae e4       	ldi	r26, 0x4E	; 78
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	ee e4       	ldi	r30, 0x4E	; 78
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	8b 7f       	andi	r24, 0xFB	; 251
    3796:	11 96       	adiw	r26, 0x01	; 1
    3798:	9c 93       	st	X, r25
    379a:	8e 93       	st	-X, r24
    379c:	82 c0       	rjmp	.+260    	; 0x38a2 <Timer1_vidPreScaler+0x228>
		break;

	case 256:
		clr_bit(TCCR1B, CS10);
    379e:	ae e4       	ldi	r26, 0x4E	; 78
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	ee e4       	ldi	r30, 0x4E	; 78
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	8e 7f       	andi	r24, 0xFE	; 254
    37ac:	11 96       	adiw	r26, 0x01	; 1
    37ae:	9c 93       	st	X, r25
    37b0:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS11);
    37b2:	ae e4       	ldi	r26, 0x4E	; 78
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	ee e4       	ldi	r30, 0x4E	; 78
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	8d 7f       	andi	r24, 0xFD	; 253
    37c0:	11 96       	adiw	r26, 0x01	; 1
    37c2:	9c 93       	st	X, r25
    37c4:	8e 93       	st	-X, r24
		set_bit(TCCR1B, CS12);
    37c6:	ae e4       	ldi	r26, 0x4E	; 78
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	ee e4       	ldi	r30, 0x4E	; 78
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	91 81       	ldd	r25, Z+1	; 0x01
    37d2:	84 60       	ori	r24, 0x04	; 4
    37d4:	11 96       	adiw	r26, 0x01	; 1
    37d6:	9c 93       	st	X, r25
    37d8:	8e 93       	st	-X, r24
    37da:	63 c0       	rjmp	.+198    	; 0x38a2 <Timer1_vidPreScaler+0x228>
		break;

	case 1024:
		set_bit(TCCR1B, CS10);
    37dc:	ae e4       	ldi	r26, 0x4E	; 78
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	ee e4       	ldi	r30, 0x4E	; 78
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	81 60       	ori	r24, 0x01	; 1
    37ea:	11 96       	adiw	r26, 0x01	; 1
    37ec:	9c 93       	st	X, r25
    37ee:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS11);
    37f0:	ae e4       	ldi	r26, 0x4E	; 78
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	ee e4       	ldi	r30, 0x4E	; 78
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	8d 7f       	andi	r24, 0xFD	; 253
    37fe:	11 96       	adiw	r26, 0x01	; 1
    3800:	9c 93       	st	X, r25
    3802:	8e 93       	st	-X, r24
		set_bit(TCCR1B, CS12);
    3804:	ae e4       	ldi	r26, 0x4E	; 78
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	ee e4       	ldi	r30, 0x4E	; 78
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	91 81       	ldd	r25, Z+1	; 0x01
    3810:	84 60       	ori	r24, 0x04	; 4
    3812:	11 96       	adiw	r26, 0x01	; 1
    3814:	9c 93       	st	X, r25
    3816:	8e 93       	st	-X, r24
    3818:	44 c0       	rjmp	.+136    	; 0x38a2 <Timer1_vidPreScaler+0x228>
		break;

	default:
		clr_bit(TCCR1B, CS10);
    381a:	ae e4       	ldi	r26, 0x4E	; 78
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	ee e4       	ldi	r30, 0x4E	; 78
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	91 81       	ldd	r25, Z+1	; 0x01
    3826:	8e 7f       	andi	r24, 0xFE	; 254
    3828:	11 96       	adiw	r26, 0x01	; 1
    382a:	9c 93       	st	X, r25
    382c:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS11);
    382e:	ae e4       	ldi	r26, 0x4E	; 78
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	ee e4       	ldi	r30, 0x4E	; 78
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	8d 7f       	andi	r24, 0xFD	; 253
    383c:	11 96       	adiw	r26, 0x01	; 1
    383e:	9c 93       	st	X, r25
    3840:	8e 93       	st	-X, r24
		clr_bit(TCCR1B, CS12);
    3842:	ae e4       	ldi	r26, 0x4E	; 78
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	ee e4       	ldi	r30, 0x4E	; 78
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
    384e:	8b 7f       	andi	r24, 0xFB	; 251
    3850:	11 96       	adiw	r26, 0x01	; 1
    3852:	9c 93       	st	X, r25
    3854:	8e 93       	st	-X, r24
		return (Tick_timer = (scale / 8));
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	96 95       	lsr	r25
    385c:	87 95       	ror	r24
    385e:	96 95       	lsr	r25
    3860:	87 95       	ror	r24
    3862:	96 95       	lsr	r25
    3864:	87 95       	ror	r24
    3866:	cc 01       	movw	r24, r24
    3868:	a0 e0       	ldi	r26, 0x00	; 0
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	80 93 b4 04 	sts	0x04B4, r24
    387c:	90 93 b5 04 	sts	0x04B5, r25
    3880:	a0 93 b6 04 	sts	0x04B6, r26
    3884:	b0 93 b7 04 	sts	0x04B7, r27
    3888:	80 91 b4 04 	lds	r24, 0x04B4
    388c:	90 91 b5 04 	lds	r25, 0x04B5
    3890:	a0 91 b6 04 	lds	r26, 0x04B6
    3894:	b0 91 b7 04 	lds	r27, 0x04B7
    3898:	8b 83       	std	Y+3, r24	; 0x03
    389a:	9c 83       	std	Y+4, r25	; 0x04
    389c:	ad 83       	std	Y+5, r26	; 0x05
    389e:	be 83       	std	Y+6, r27	; 0x06
    38a0:	25 c0       	rjmp	.+74     	; 0x38ec <Timer1_vidPreScaler+0x272>
		break;
	}

	return (Tick_timer = (scale / 8));
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	9a 81       	ldd	r25, Y+2	; 0x02
    38a6:	96 95       	lsr	r25
    38a8:	87 95       	ror	r24
    38aa:	96 95       	lsr	r25
    38ac:	87 95       	ror	r24
    38ae:	96 95       	lsr	r25
    38b0:	87 95       	ror	r24
    38b2:	cc 01       	movw	r24, r24
    38b4:	a0 e0       	ldi	r26, 0x00	; 0
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	80 93 b4 04 	sts	0x04B4, r24
    38c8:	90 93 b5 04 	sts	0x04B5, r25
    38cc:	a0 93 b6 04 	sts	0x04B6, r26
    38d0:	b0 93 b7 04 	sts	0x04B7, r27
    38d4:	80 91 b4 04 	lds	r24, 0x04B4
    38d8:	90 91 b5 04 	lds	r25, 0x04B5
    38dc:	a0 91 b6 04 	lds	r26, 0x04B6
    38e0:	b0 91 b7 04 	lds	r27, 0x04B7
    38e4:	8b 83       	std	Y+3, r24	; 0x03
    38e6:	9c 83       	std	Y+4, r25	; 0x04
    38e8:	ad 83       	std	Y+5, r26	; 0x05
    38ea:	be 83       	std	Y+6, r27	; 0x06
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	ad 81       	ldd	r26, Y+5	; 0x05
    38f2:	be 81       	ldd	r27, Y+6	; 0x06
}
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	28 96       	adiw	r28, 0x08	; 8
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <Timer1_vidInitialtize>:


void Timer1_vidInitialtize(u16 scale)
{
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	00 d0       	rcall	.+0      	; 0x3910 <Timer1_vidInitialtize+0x6>
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
	// Set global interrupt
	set_bit(SREG_M, I_G_flag);
    3918:	af e5       	ldi	r26, 0x5F	; 95
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	ef e5       	ldi	r30, 0x5F	; 95
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	80 68       	ori	r24, 0x80	; 128
    3924:	8c 93       	st	X, r24

	// Set interrupt enable for timer1
	set_bit(TIMSK, OCIE1A);
    3926:	a9 e5       	ldi	r26, 0x59	; 89
    3928:	b0 e0       	ldi	r27, 0x00	; 0
    392a:	e9 e5       	ldi	r30, 0x59	; 89
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	80 61       	ori	r24, 0x10	; 16
    3932:	8c 93       	st	X, r24

	// CTC mode of operation
	set_bit(TCCR1B, WGM12_TCCR1B);
    3934:	ae e4       	ldi	r26, 0x4E	; 78
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	ee e4       	ldi	r30, 0x4E	; 78
    393a:	f0 e0       	ldi	r31, 0x00	; 0
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	88 60       	ori	r24, 0x08	; 8
    3942:	11 96       	adiw	r26, 0x01	; 1
    3944:	9c 93       	st	X, r25
    3946:	8e 93       	st	-X, r24
	clr_bit(TCCR1B, WGM13_TCCR1B);
    3948:	ae e4       	ldi	r26, 0x4E	; 78
    394a:	b0 e0       	ldi	r27, 0x00	; 0
    394c:	ee e4       	ldi	r30, 0x4E	; 78
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	91 81       	ldd	r25, Z+1	; 0x01
    3954:	8f 7e       	andi	r24, 0xEF	; 239
    3956:	11 96       	adiw	r26, 0x01	; 1
    3958:	9c 93       	st	X, r25
    395a:	8e 93       	st	-X, r24
	clr_bit(TCCR1B, WGM10_TCCR1A);
    395c:	ae e4       	ldi	r26, 0x4E	; 78
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	ee e4       	ldi	r30, 0x4E	; 78
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	91 81       	ldd	r25, Z+1	; 0x01
    3968:	8e 7f       	andi	r24, 0xFE	; 254
    396a:	11 96       	adiw	r26, 0x01	; 1
    396c:	9c 93       	st	X, r25
    396e:	8e 93       	st	-X, r24
	clr_bit(TCCR1B, WGM11_TCCR1A);
    3970:	ae e4       	ldi	r26, 0x4E	; 78
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	ee e4       	ldi	r30, 0x4E	; 78
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	8d 7f       	andi	r24, 0xFD	; 253
    397e:	11 96       	adiw	r26, 0x01	; 1
    3980:	9c 93       	st	X, r25
    3982:	8e 93       	st	-X, r24

	// set prescale
	Timer1_vidPreScaler(scale);
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	9a 81       	ldd	r25, Y+2	; 0x02
    3988:	0e 94 3d 1b 	call	0x367a	; 0x367a <Timer1_vidPreScaler>
}
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <Timer1_vidSetOCRValue>:

void Timer1_vidSetOCRValue(u16 counts)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	00 d0       	rcall	.+0      	; 0x399c <Timer1_vidSetOCRValue+0x6>
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	9a 83       	std	Y+2, r25	; 0x02
    39a2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_WHOLE = counts;
    39a4:	ea e4       	ldi	r30, 0x4A	; 74
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	91 83       	std	Z+1, r25	; 0x01
    39ae:	80 83       	st	Z, r24
}
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <Timer1_setcallback>:

extern void Timer1_setcallback(void(*function)(void))
{
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	00 d0       	rcall	.+0      	; 0x39c0 <Timer1_setcallback+0x6>
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	9a 83       	std	Y+2, r25	; 0x02
    39c6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_callback = function;
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	9a 81       	ldd	r25, Y+2	; 0x02
    39cc:	90 93 b3 04 	sts	0x04B3, r25
    39d0:	80 93 b2 04 	sts	0x04B2, r24
}
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	08 95       	ret

000039de <__vector_7>:

ISR(7)
{
    39de:	1f 92       	push	r1
    39e0:	0f 92       	push	r0
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	0f 92       	push	r0
    39e6:	11 24       	eor	r1, r1
    39e8:	2f 93       	push	r18
    39ea:	3f 93       	push	r19
    39ec:	4f 93       	push	r20
    39ee:	5f 93       	push	r21
    39f0:	6f 93       	push	r22
    39f2:	7f 93       	push	r23
    39f4:	8f 93       	push	r24
    39f6:	9f 93       	push	r25
    39f8:	af 93       	push	r26
    39fa:	bf 93       	push	r27
    39fc:	ef 93       	push	r30
    39fe:	ff 93       	push	r31
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callback != 0)
    3a08:	80 91 b2 04 	lds	r24, 0x04B2
    3a0c:	90 91 b3 04 	lds	r25, 0x04B3
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	29 f0       	breq	.+10     	; 0x3a1e <__vector_7+0x40>
	{
		Timer1_callback();
    3a14:	e0 91 b2 04 	lds	r30, 0x04B2
    3a18:	f0 91 b3 04 	lds	r31, 0x04B3
    3a1c:	09 95       	icall
	}
}
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	ff 91       	pop	r31
    3a24:	ef 91       	pop	r30
    3a26:	bf 91       	pop	r27
    3a28:	af 91       	pop	r26
    3a2a:	9f 91       	pop	r25
    3a2c:	8f 91       	pop	r24
    3a2e:	7f 91       	pop	r23
    3a30:	6f 91       	pop	r22
    3a32:	5f 91       	pop	r21
    3a34:	4f 91       	pop	r20
    3a36:	3f 91       	pop	r19
    3a38:	2f 91       	pop	r18
    3a3a:	0f 90       	pop	r0
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	0f 90       	pop	r0
    3a40:	1f 90       	pop	r1
    3a42:	18 95       	reti

00003a44 <BOOKS_vidInitialize>:


/********************************* READY *********************************/
// Initialize books list
void BOOKS_vidInitialize(void)
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
	root_book = malloc(sizeof(books));
    3a4c:	88 e0       	ldi	r24, 0x08	; 8
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    3a54:	90 93 c3 04 	sts	0x04C3, r25
    3a58:	80 93 c2 04 	sts	0x04C2, r24
	
	// Initializing list
	root_book -> NAME_BOOK = NULL;
    3a5c:	e0 91 c2 04 	lds	r30, 0x04C2
    3a60:	f0 91 c3 04 	lds	r31, 0x04C3
    3a64:	11 82       	std	Z+1, r1	; 0x01
    3a66:	10 82       	st	Z, r1
	root_book -> NEXT_BOOK = NULL;
    3a68:	e0 91 c2 04 	lds	r30, 0x04C2
    3a6c:	f0 91 c3 04 	lds	r31, 0x04C3
    3a70:	17 82       	std	Z+7, r1	; 0x07
    3a72:	16 82       	std	Z+6, r1	; 0x06
	root_book -> INDEX_BOOK = 0;
    3a74:	e0 91 c2 04 	lds	r30, 0x04C2
    3a78:	f0 91 c3 04 	lds	r31, 0x04C3
    3a7c:	12 82       	std	Z+2, r1	; 0x02
	root_book -> SERIAL_NUMBER = NULL;
    3a7e:	e0 91 c2 04 	lds	r30, 0x04C2
    3a82:	f0 91 c3 04 	lds	r31, 0x04C3
    3a86:	14 82       	std	Z+4, r1	; 0x04
    3a88:	13 82       	std	Z+3, r1	; 0x03
	root_book -> COPIES = 0;
    3a8a:	e0 91 c2 04 	lds	r30, 0x04C2
    3a8e:	f0 91 c3 04 	lds	r31, 0x04C3
    3a92:	15 82       	std	Z+5, r1	; 0x05
	
	ptr_book = root_book;
    3a94:	80 91 c2 04 	lds	r24, 0x04C2
    3a98:	90 91 c3 04 	lds	r25, 0x04C3
    3a9c:	90 93 c5 04 	sts	0x04C5, r25
    3aa0:	80 93 c4 04 	sts	0x04C4, r24
}
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <BOOKS_vidInsertion>:


/********************************* READY *********************************/
// Insertion for values from user
bool BOOKS_vidInsertion(char *serial, char *name, char copies)			// if still, you can change to u8
{
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	6b 97       	sbiw	r28, 0x1b	; 27
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	98 8f       	std	Y+24, r25	; 0x18
    3ac0:	8f 8b       	std	Y+23, r24	; 0x17
    3ac2:	7a 8f       	std	Y+26, r23	; 0x1a
    3ac4:	69 8f       	std	Y+25, r22	; 0x19
    3ac6:	4b 8f       	std	Y+27, r20	; 0x1b
	
	int k = 0, i = 0, j = 0;
    3ac8:	1e 8a       	std	Y+22, r1	; 0x16
    3aca:	1d 8a       	std	Y+21, r1	; 0x15
    3acc:	1c 8a       	std	Y+20, r1	; 0x14
    3ace:	1b 8a       	std	Y+19, r1	; 0x13
    3ad0:	1a 8a       	std	Y+18, r1	; 0x12
    3ad2:	19 8a       	std	Y+17, r1	; 0x11
	
	// Inserting sequence initialized
	ptr_book = root_book;
    3ad4:	80 91 c2 04 	lds	r24, 0x04C2
    3ad8:	90 91 c3 04 	lds	r25, 0x04C3
    3adc:	90 93 c5 04 	sts	0x04C5, r25
    3ae0:	80 93 c4 04 	sts	0x04C4, r24
	books *tmp = malloc(sizeof(books));
    3ae4:	88 e0       	ldi	r24, 0x08	; 8
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    3aec:	98 8b       	std	Y+16, r25	; 0x10
    3aee:	8f 87       	std	Y+15, r24	; 0x0f
	
	// For future reference
	NoOfBooks++;
    3af0:	80 91 b8 04 	lds	r24, 0x04B8
    3af4:	8f 5f       	subi	r24, 0xFF	; 255
    3af6:	80 93 b8 04 	sts	0x04B8, r24
	INDEX_BOOKS_GLOBAL++;
    3afa:	80 91 ba 04 	lds	r24, 0x04BA
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	80 93 ba 04 	sts	0x04BA, r24
    3b04:	05 c0       	rjmp	.+10     	; 0x3b10 <BOOKS_vidInsertion+0x66>

	// Get member's name length
	while(name[k] != '\0')
	{
		k++;
    3b06:	8d 89       	ldd	r24, Y+21	; 0x15
    3b08:	9e 89       	ldd	r25, Y+22	; 0x16
    3b0a:	01 96       	adiw	r24, 0x01	; 1
    3b0c:	9e 8b       	std	Y+22, r25	; 0x16
    3b0e:	8d 8b       	std	Y+21, r24	; 0x15
	// For future reference
	NoOfBooks++;
	INDEX_BOOKS_GLOBAL++;

	// Get member's name length
	while(name[k] != '\0')
    3b10:	2d 89       	ldd	r18, Y+21	; 0x15
    3b12:	3e 89       	ldd	r19, Y+22	; 0x16
    3b14:	89 8d       	ldd	r24, Y+25	; 0x19
    3b16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b18:	fc 01       	movw	r30, r24
    3b1a:	e2 0f       	add	r30, r18
    3b1c:	f3 1f       	adc	r31, r19
    3b1e:	80 81       	ld	r24, Z
    3b20:	88 23       	and	r24, r24
    3b22:	89 f7       	brne	.-30     	; 0x3b06 <BOOKS_vidInsertion+0x5c>
    3b24:	05 c0       	rjmp	.+10     	; 0x3b30 <BOOKS_vidInsertion+0x86>
		k++;
	}
	
	while(serial[i] != '\0')
	{
		i++;
    3b26:	8b 89       	ldd	r24, Y+19	; 0x13
    3b28:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	9c 8b       	std	Y+20, r25	; 0x14
    3b2e:	8b 8b       	std	Y+19, r24	; 0x13
	while(name[k] != '\0')
	{
		k++;
	}
	
	while(serial[i] != '\0')
    3b30:	2b 89       	ldd	r18, Y+19	; 0x13
    3b32:	3c 89       	ldd	r19, Y+20	; 0x14
    3b34:	8f 89       	ldd	r24, Y+23	; 0x17
    3b36:	98 8d       	ldd	r25, Y+24	; 0x18
    3b38:	fc 01       	movw	r30, r24
    3b3a:	e2 0f       	add	r30, r18
    3b3c:	f3 1f       	adc	r31, r19
    3b3e:	80 81       	ld	r24, Z
    3b40:	88 23       	and	r24, r24
    3b42:	89 f7       	brne	.-30     	; 0x3b26 <BOOKS_vidInsertion+0x7c>
	{
		i++;
	}

	tmp -> NAME_BOOK = malloc(k+1 *sizeof(char));
    3b44:	8d 89       	ldd	r24, Y+21	; 0x15
    3b46:	9e 89       	ldd	r25, Y+22	; 0x16
    3b48:	01 96       	adiw	r24, 0x01	; 1
    3b4a:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    3b4e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b50:	f8 89       	ldd	r31, Y+16	; 0x10
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
	tmp -> SERIAL_NUMBER = malloc(i+1 *sizeof(char));
    3b56:	8b 89       	ldd	r24, Y+19	; 0x13
    3b58:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5a:	01 96       	adiw	r24, 0x01	; 1
    3b5c:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    3b60:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b62:	f8 89       	ldd	r31, Y+16	; 0x10
    3b64:	94 83       	std	Z+4, r25	; 0x04
    3b66:	83 83       	std	Z+3, r24	; 0x03

	// Insert patient details
	tmp -> NEXT_BOOK = ptr_book -> NEXT_BOOK;
    3b68:	e0 91 c4 04 	lds	r30, 0x04C4
    3b6c:	f0 91 c5 04 	lds	r31, 0x04C5
    3b70:	86 81       	ldd	r24, Z+6	; 0x06
    3b72:	97 81       	ldd	r25, Z+7	; 0x07
    3b74:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b76:	f8 89       	ldd	r31, Y+16	; 0x10
    3b78:	97 83       	std	Z+7, r25	; 0x07
    3b7a:	86 83       	std	Z+6, r24	; 0x06

	tmp -> INDEX_BOOK = INDEX_BOOKS_GLOBAL;
    3b7c:	80 91 ba 04 	lds	r24, 0x04BA
    3b80:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b82:	f8 89       	ldd	r31, Y+16	; 0x10
    3b84:	82 83       	std	Z+2, r24	; 0x02
	tmp -> COPIES = copies;
    3b86:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b88:	f8 89       	ldd	r31, Y+16	; 0x10
    3b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b8c:	85 83       	std	Z+5, r24	; 0x05
	
	// Save name
	for(j = 0; j < k ; j++)
    3b8e:	1a 8a       	std	Y+18, r1	; 0x12
    3b90:	19 8a       	std	Y+17, r1	; 0x11
    3b92:	17 c0       	rjmp	.+46     	; 0x3bc2 <BOOKS_vidInsertion+0x118>
	{
		tmp ->  NAME_BOOK[j] = name[j];
    3b94:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b96:	f8 89       	ldd	r31, Y+16	; 0x10
    3b98:	20 81       	ld	r18, Z
    3b9a:	31 81       	ldd	r19, Z+1	; 0x01
    3b9c:	89 89       	ldd	r24, Y+17	; 0x11
    3b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3ba0:	d9 01       	movw	r26, r18
    3ba2:	a8 0f       	add	r26, r24
    3ba4:	b9 1f       	adc	r27, r25
    3ba6:	29 89       	ldd	r18, Y+17	; 0x11
    3ba8:	3a 89       	ldd	r19, Y+18	; 0x12
    3baa:	89 8d       	ldd	r24, Y+25	; 0x19
    3bac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3bae:	fc 01       	movw	r30, r24
    3bb0:	e2 0f       	add	r30, r18
    3bb2:	f3 1f       	adc	r31, r19
    3bb4:	80 81       	ld	r24, Z
    3bb6:	8c 93       	st	X, r24

	tmp -> INDEX_BOOK = INDEX_BOOKS_GLOBAL;
	tmp -> COPIES = copies;
	
	// Save name
	for(j = 0; j < k ; j++)
    3bb8:	89 89       	ldd	r24, Y+17	; 0x11
    3bba:	9a 89       	ldd	r25, Y+18	; 0x12
    3bbc:	01 96       	adiw	r24, 0x01	; 1
    3bbe:	9a 8b       	std	Y+18, r25	; 0x12
    3bc0:	89 8b       	std	Y+17, r24	; 0x11
    3bc2:	29 89       	ldd	r18, Y+17	; 0x11
    3bc4:	3a 89       	ldd	r19, Y+18	; 0x12
    3bc6:	8d 89       	ldd	r24, Y+21	; 0x15
    3bc8:	9e 89       	ldd	r25, Y+22	; 0x16
    3bca:	28 17       	cp	r18, r24
    3bcc:	39 07       	cpc	r19, r25
    3bce:	14 f3       	brlt	.-60     	; 0x3b94 <BOOKS_vidInsertion+0xea>
	{
		tmp ->  NAME_BOOK[j] = name[j];
	}
	tmp ->  NAME_BOOK[j] = '\0';
    3bd0:	ef 85       	ldd	r30, Y+15	; 0x0f
    3bd2:	f8 89       	ldd	r31, Y+16	; 0x10
    3bd4:	20 81       	ld	r18, Z
    3bd6:	31 81       	ldd	r19, Z+1	; 0x01
    3bd8:	89 89       	ldd	r24, Y+17	; 0x11
    3bda:	9a 89       	ldd	r25, Y+18	; 0x12
    3bdc:	f9 01       	movw	r30, r18
    3bde:	e8 0f       	add	r30, r24
    3be0:	f9 1f       	adc	r31, r25
    3be2:	10 82       	st	Z, r1

	// Save serialNumber
	for(j = 0; j < i ; j++)
    3be4:	1a 8a       	std	Y+18, r1	; 0x12
    3be6:	19 8a       	std	Y+17, r1	; 0x11
    3be8:	17 c0       	rjmp	.+46     	; 0x3c18 <BOOKS_vidInsertion+0x16e>
	{
		tmp ->  SERIAL_NUMBER[j] = serial[j];
    3bea:	ef 85       	ldd	r30, Y+15	; 0x0f
    3bec:	f8 89       	ldd	r31, Y+16	; 0x10
    3bee:	23 81       	ldd	r18, Z+3	; 0x03
    3bf0:	34 81       	ldd	r19, Z+4	; 0x04
    3bf2:	89 89       	ldd	r24, Y+17	; 0x11
    3bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    3bf6:	d9 01       	movw	r26, r18
    3bf8:	a8 0f       	add	r26, r24
    3bfa:	b9 1f       	adc	r27, r25
    3bfc:	29 89       	ldd	r18, Y+17	; 0x11
    3bfe:	3a 89       	ldd	r19, Y+18	; 0x12
    3c00:	8f 89       	ldd	r24, Y+23	; 0x17
    3c02:	98 8d       	ldd	r25, Y+24	; 0x18
    3c04:	fc 01       	movw	r30, r24
    3c06:	e2 0f       	add	r30, r18
    3c08:	f3 1f       	adc	r31, r19
    3c0a:	80 81       	ld	r24, Z
    3c0c:	8c 93       	st	X, r24
		tmp ->  NAME_BOOK[j] = name[j];
	}
	tmp ->  NAME_BOOK[j] = '\0';

	// Save serialNumber
	for(j = 0; j < i ; j++)
    3c0e:	89 89       	ldd	r24, Y+17	; 0x11
    3c10:	9a 89       	ldd	r25, Y+18	; 0x12
    3c12:	01 96       	adiw	r24, 0x01	; 1
    3c14:	9a 8b       	std	Y+18, r25	; 0x12
    3c16:	89 8b       	std	Y+17, r24	; 0x11
    3c18:	29 89       	ldd	r18, Y+17	; 0x11
    3c1a:	3a 89       	ldd	r19, Y+18	; 0x12
    3c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c20:	28 17       	cp	r18, r24
    3c22:	39 07       	cpc	r19, r25
    3c24:	14 f3       	brlt	.-60     	; 0x3bea <BOOKS_vidInsertion+0x140>
	{
		tmp ->  SERIAL_NUMBER[j] = serial[j];
	}
	tmp ->  SERIAL_NUMBER[j] = '\0';
    3c26:	ef 85       	ldd	r30, Y+15	; 0x0f
    3c28:	f8 89       	ldd	r31, Y+16	; 0x10
    3c2a:	23 81       	ldd	r18, Z+3	; 0x03
    3c2c:	34 81       	ldd	r19, Z+4	; 0x04
    3c2e:	89 89       	ldd	r24, Y+17	; 0x11
    3c30:	9a 89       	ldd	r25, Y+18	; 0x12
    3c32:	f9 01       	movw	r30, r18
    3c34:	e8 0f       	add	r30, r24
    3c36:	f9 1f       	adc	r31, r25
    3c38:	10 82       	st	Z, r1


	// Update list
	ptr_book -> NEXT_BOOK = tmp;
    3c3a:	e0 91 c4 04 	lds	r30, 0x04C4
    3c3e:	f0 91 c5 04 	lds	r31, 0x04C5
    3c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c44:	98 89       	ldd	r25, Y+16	; 0x10
    3c46:	97 83       	std	Z+7, r25	; 0x07
    3c48:	86 83       	std	Z+6, r24	; 0x06

	// Indicate success
	LCD_String("BOOKS INSERTED");
    3c4a:	8f eb       	ldi	r24, 0xBF	; 191
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	aa ef       	ldi	r26, 0xFA	; 250
    3c58:	b3 e4       	ldi	r27, 0x43	; 67
    3c5a:	8b 87       	std	Y+11, r24	; 0x0b
    3c5c:	9c 87       	std	Y+12, r25	; 0x0c
    3c5e:	ad 87       	std	Y+13, r26	; 0x0d
    3c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	4a ef       	ldi	r20, 0xFA	; 250
    3c70:	54 e4       	ldi	r21, 0x44	; 68
    3c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	8f 83       	std	Y+7, r24	; 0x07
    3c7c:	98 87       	std	Y+8, r25	; 0x08
    3c7e:	a9 87       	std	Y+9, r26	; 0x09
    3c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c82:	6f 81       	ldd	r22, Y+7	; 0x07
    3c84:	78 85       	ldd	r23, Y+8	; 0x08
    3c86:	89 85       	ldd	r24, Y+9	; 0x09
    3c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	40 e8       	ldi	r20, 0x80	; 128
    3c90:	5f e3       	ldi	r21, 0x3F	; 63
    3c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c96:	88 23       	and	r24, r24
    3c98:	2c f4       	brge	.+10     	; 0x3ca4 <BOOKS_vidInsertion+0x1fa>
		__ticks = 1;
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	9e 83       	std	Y+6, r25	; 0x06
    3ca0:	8d 83       	std	Y+5, r24	; 0x05
    3ca2:	3f c0       	rjmp	.+126    	; 0x3d22 <BOOKS_vidInsertion+0x278>
	else if (__tmp > 65535)
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	78 85       	ldd	r23, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	3f ef       	ldi	r19, 0xFF	; 255
    3cb0:	4f e7       	ldi	r20, 0x7F	; 127
    3cb2:	57 e4       	ldi	r21, 0x47	; 71
    3cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cb8:	18 16       	cp	r1, r24
    3cba:	4c f5       	brge	.+82     	; 0x3d0e <BOOKS_vidInsertion+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e2       	ldi	r20, 0x20	; 32
    3cca:	51 e4       	ldi	r21, 0x41	; 65
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	bc 01       	movw	r22, r24
    3cd6:	cd 01       	movw	r24, r26
    3cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	9e 83       	std	Y+6, r25	; 0x06
    3ce2:	8d 83       	std	Y+5, r24	; 0x05
    3ce4:	0f c0       	rjmp	.+30     	; 0x3d04 <BOOKS_vidInsertion+0x25a>
    3ce6:	88 ec       	ldi	r24, 0xC8	; 200
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	9c 83       	std	Y+4, r25	; 0x04
    3cec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cee:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <BOOKS_vidInsertion+0x248>
    3cf6:	9c 83       	std	Y+4, r25	; 0x04
    3cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	9e 83       	std	Y+6, r25	; 0x06
    3d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	9e 81       	ldd	r25, Y+6	; 0x06
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	69 f7       	brne	.-38     	; 0x3ce6 <BOOKS_vidInsertion+0x23c>
    3d0c:	14 c0       	rjmp	.+40     	; 0x3d36 <BOOKS_vidInsertion+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	9a 83       	std	Y+2, r25	; 0x02
    3d28:	89 83       	std	Y+1, r24	; 0x01
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	f1 f7       	brne	.-4      	; 0x3d2e <BOOKS_vidInsertion+0x284>
    3d32:	9a 83       	std	Y+2, r25	; 0x02
    3d34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearOnDemand(1, 32);
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	60 e2       	ldi	r22, 0x20	; 32
    3d3a:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
	return true;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
}
    3d40:	6b 96       	adiw	r28, 0x1b	; 27
    3d42:	0f b6       	in	r0, 0x3f	; 63
    3d44:	f8 94       	cli
    3d46:	de bf       	out	0x3e, r29	; 62
    3d48:	0f be       	out	0x3f, r0	; 63
    3d4a:	cd bf       	out	0x3d, r28	; 61
    3d4c:	cf 91       	pop	r28
    3d4e:	df 91       	pop	r29
    3d50:	08 95       	ret

00003d52 <BOOKS_u8DeleteEntire>:



/********************************* READY *********************************/
char BOOKS_u8DeleteEntire(void)
{
    3d52:	df 93       	push	r29
    3d54:	cf 93       	push	r28
    3d56:	00 d0       	rcall	.+0      	; 0x3d58 <BOOKS_u8DeleteEntire+0x6>
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
	// Buffer to save the previous condition of ptr
	books *last_before_stack = NULL;
    3d5c:	1a 82       	std	Y+2, r1	; 0x02
    3d5e:	19 82       	std	Y+1, r1	; 0x01

	// Checking on the next field
	if(ptr_book -> NEXT_BOOK != NULL)
    3d60:	e0 91 c4 04 	lds	r30, 0x04C4
    3d64:	f0 91 c5 04 	lds	r31, 0x04C5
    3d68:	86 81       	ldd	r24, Z+6	; 0x06
    3d6a:	97 81       	ldd	r25, Z+7	; 0x07
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	c1 f0       	breq	.+48     	; 0x3da0 <BOOKS_u8DeleteEntire+0x4e>
	{
		last_before_stack = ptr_book;
    3d70:	80 91 c4 04 	lds	r24, 0x04C4
    3d74:	90 91 c5 04 	lds	r25, 0x04C5
    3d78:	9a 83       	std	Y+2, r25	; 0x02
    3d7a:	89 83       	std	Y+1, r24	; 0x01
		ptr_book = ptr_book -> NEXT_BOOK;
    3d7c:	e0 91 c4 04 	lds	r30, 0x04C4
    3d80:	f0 91 c5 04 	lds	r31, 0x04C5
    3d84:	86 81       	ldd	r24, Z+6	; 0x06
    3d86:	97 81       	ldd	r25, Z+7	; 0x07
    3d88:	90 93 c5 04 	sts	0x04C5, r25
    3d8c:	80 93 c4 04 	sts	0x04C4, r24
		BOOKS_u8DeleteEntire();
    3d90:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <BOOKS_u8DeleteEntire>
		ptr_book = last_before_stack;
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	90 93 c5 04 	sts	0x04C5, r25
    3d9c:	80 93 c4 04 	sts	0x04C4, r24
	}

	// free current node and return
	free(ptr_book);
    3da0:	80 91 c4 04 	lds	r24, 0x04C4
    3da4:	90 91 c5 04 	lds	r25, 0x04C5
    3da8:	0e 94 e6 33 	call	0x67cc	; 0x67cc <free>
	NoOfBooks = 0;
    3dac:	10 92 b8 04 	sts	0x04B8, r1
	return 0;
    3db0:	80 e0       	ldi	r24, 0x00	; 0
}
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	cf 91       	pop	r28
    3db8:	df 91       	pop	r29
    3dba:	08 95       	ret

00003dbc <BOOKS_vidRestart>:



void BOOKS_vidRestart (void)
{
    3dbc:	df 93       	push	r29
    3dbe:	cf 93       	push	r28
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
	BOOKS_restart_vip();
    3dc4:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <BOOKS_restart_vip>
	BOOKS_u8DeleteEntire();
    3dc8:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <BOOKS_u8DeleteEntire>
	BOOKS_vidInitialize();
    3dcc:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <BOOKS_vidInitialize>
}
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	08 95       	ret

00003dd6 <BOOKS_restart_vip>:

void BOOKS_restart_vip(void)
{
    3dd6:	df 93       	push	r29
    3dd8:	cf 93       	push	r28
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
	ptr_book = root_book;
    3dde:	80 91 c2 04 	lds	r24, 0x04C2
    3de2:	90 91 c3 04 	lds	r25, 0x04C3
    3de6:	90 93 c5 04 	sts	0x04C5, r25
    3dea:	80 93 c4 04 	sts	0x04C4, r24
}
    3dee:	cf 91       	pop	r28
    3df0:	df 91       	pop	r29
    3df2:	08 95       	ret

00003df4 <BOOKS_search>:

// Search for a book either via ISBN or its location in list
u8 BOOKS_search (char *serial, char index)
{
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
    3dfc:	ef 97       	sbiw	r28, 0x3f	; 63
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	9d af       	std	Y+61, r25	; 0x3d
    3e0a:	8c af       	std	Y+60, r24	; 0x3c
    3e0c:	6e af       	std	Y+62, r22	; 0x3e
	// Start after the root
	ptr_book = root_book -> NEXT_BOOK;
    3e0e:	e0 91 c2 04 	lds	r30, 0x04C2
    3e12:	f0 91 c3 04 	lds	r31, 0x04C3
    3e16:	86 81       	ldd	r24, Z+6	; 0x06
    3e18:	97 81       	ldd	r25, Z+7	; 0x07
    3e1a:	90 93 c5 04 	sts	0x04C5, r25
    3e1e:	80 93 c4 04 	sts	0x04C4, r24
	
	bool found = false;
    3e22:	1b ae       	std	Y+59, r1	; 0x3b


	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfBooks; i++)
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	9a af       	std	Y+58, r25	; 0x3a
    3e2a:	89 af       	std	Y+57, r24	; 0x39
    3e2c:	c8 c1       	rjmp	.+912    	; 0x41be <BOOKS_search+0x3ca>
	{
		if(CompareString(serial, ptr_book -> SERIAL_NUMBER) || index == ptr_book -> INDEX_BOOK)
    3e2e:	e0 91 c4 04 	lds	r30, 0x04C4
    3e32:	f0 91 c5 04 	lds	r31, 0x04C5
    3e36:	23 81       	ldd	r18, Z+3	; 0x03
    3e38:	34 81       	ldd	r19, Z+4	; 0x04
    3e3a:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e3c:	9d ad       	ldd	r25, Y+61	; 0x3d
    3e3e:	b9 01       	movw	r22, r18
    3e40:	0e 94 a0 23 	call	0x4740	; 0x4740 <CompareString>
    3e44:	88 23       	and	r24, r24
    3e46:	49 f4       	brne	.+18     	; 0x3e5a <BOOKS_search+0x66>
    3e48:	e0 91 c4 04 	lds	r30, 0x04C4
    3e4c:	f0 91 c5 04 	lds	r31, 0x04C5
    3e50:	92 81       	ldd	r25, Z+2	; 0x02
    3e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e54:	98 17       	cp	r25, r24
    3e56:	09 f0       	breq	.+2      	; 0x3e5a <BOOKS_search+0x66>
    3e58:	a3 c1       	rjmp	.+838    	; 0x41a0 <BOOKS_search+0x3ac>
		{
			found = true;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	8b af       	std	Y+59, r24	; 0x3b
			book_to_decay = ptr_book;
    3e5e:	80 91 c4 04 	lds	r24, 0x04C4
    3e62:	90 91 c5 04 	lds	r25, 0x04C5
    3e66:	90 93 c7 04 	sts	0x04C7, r25
    3e6a:	80 93 c6 04 	sts	0x04C6, r24
			LCD_vidClearOnDemand(1, 32);
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	60 e2       	ldi	r22, 0x20	; 32
    3e72:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

			LCD_String("BOOK'S INFO:");
    3e76:	8e ec       	ldi	r24, 0xCE	; 206
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_vidGoTo(1, 2);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	62 e0       	ldi	r22, 0x02	; 2
    3e82:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			LCD_String("wait...");
    3e86:	8b ed       	ldi	r24, 0xDB	; 219
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	aa ef       	ldi	r26, 0xFA	; 250
    3e94:	b3 e4       	ldi	r27, 0x43	; 67
    3e96:	8d ab       	std	Y+53, r24	; 0x35
    3e98:	9e ab       	std	Y+54, r25	; 0x36
    3e9a:	af ab       	std	Y+55, r26	; 0x37
    3e9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9e:	6d a9       	ldd	r22, Y+53	; 0x35
    3ea0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ea2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ea4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	4a ef       	ldi	r20, 0xFA	; 250
    3eac:	54 e4       	ldi	r21, 0x44	; 68
    3eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	89 ab       	std	Y+49, r24	; 0x31
    3eb8:	9a ab       	std	Y+50, r25	; 0x32
    3eba:	ab ab       	std	Y+51, r26	; 0x33
    3ebc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ebe:	69 a9       	ldd	r22, Y+49	; 0x31
    3ec0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ec2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ec4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e8       	ldi	r20, 0x80	; 128
    3ecc:	5f e3       	ldi	r21, 0x3F	; 63
    3ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	2c f4       	brge	.+10     	; 0x3ee0 <BOOKS_search+0xec>
		__ticks = 1;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	98 ab       	std	Y+48, r25	; 0x30
    3edc:	8f a7       	std	Y+47, r24	; 0x2f
    3ede:	3f c0       	rjmp	.+126    	; 0x3f5e <BOOKS_search+0x16a>
	else if (__tmp > 65535)
    3ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	3f ef       	ldi	r19, 0xFF	; 255
    3eec:	4f e7       	ldi	r20, 0x7F	; 127
    3eee:	57 e4       	ldi	r21, 0x47	; 71
    3ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef4:	18 16       	cp	r1, r24
    3ef6:	4c f5       	brge	.+82     	; 0x3f4a <BOOKS_search+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef8:	6d a9       	ldd	r22, Y+53	; 0x35
    3efa:	7e a9       	ldd	r23, Y+54	; 0x36
    3efc:	8f a9       	ldd	r24, Y+55	; 0x37
    3efe:	98 ad       	ldd	r25, Y+56	; 0x38
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	40 e2       	ldi	r20, 0x20	; 32
    3f06:	51 e4       	ldi	r21, 0x41	; 65
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	98 ab       	std	Y+48, r25	; 0x30
    3f1e:	8f a7       	std	Y+47, r24	; 0x2f
    3f20:	0f c0       	rjmp	.+30     	; 0x3f40 <BOOKS_search+0x14c>
    3f22:	88 ec       	ldi	r24, 0xC8	; 200
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	9e a7       	std	Y+46, r25	; 0x2e
    3f28:	8d a7       	std	Y+45, r24	; 0x2d
    3f2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <BOOKS_search+0x13a>
    3f32:	9e a7       	std	Y+46, r25	; 0x2e
    3f34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f38:	98 a9       	ldd	r25, Y+48	; 0x30
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	98 ab       	std	Y+48, r25	; 0x30
    3f3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f42:	98 a9       	ldd	r25, Y+48	; 0x30
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	69 f7       	brne	.-38     	; 0x3f22 <BOOKS_search+0x12e>
    3f48:	14 c0       	rjmp	.+40     	; 0x3f72 <BOOKS_search+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f50:	9c a9       	ldd	r25, Y+52	; 0x34
    3f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	98 ab       	std	Y+48, r25	; 0x30
    3f5c:	8f a7       	std	Y+47, r24	; 0x2f
    3f5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f60:	98 a9       	ldd	r25, Y+48	; 0x30
    3f62:	9c a7       	std	Y+44, r25	; 0x2c
    3f64:	8b a7       	std	Y+43, r24	; 0x2b
    3f66:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f68:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <BOOKS_search+0x176>
    3f6e:	9c a7       	std	Y+44, r25	; 0x2c
    3f70:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);

			LCD_vidClearOnDemand(1, 32);
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	60 e2       	ldi	r22, 0x20	; 32
    3f76:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

			LCD_String("Name:");
    3f7a:	83 ee       	ldi	r24, 0xE3	; 227
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_vidGoTo(1, 2);
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	62 e0       	ldi	r22, 0x02	; 2
    3f86:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			LCD_String(ptr_book -> NAME_BOOK);
    3f8a:	e0 91 c4 04 	lds	r30, 0x04C4
    3f8e:	f0 91 c5 04 	lds	r31, 0x04C5
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	aa ef       	ldi	r26, 0xFA	; 250
    3fa0:	b4 e4       	ldi	r27, 0x44	; 68
    3fa2:	8f a3       	std	Y+39, r24	; 0x27
    3fa4:	98 a7       	std	Y+40, r25	; 0x28
    3fa6:	a9 a7       	std	Y+41, r26	; 0x29
    3fa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3faa:	6f a1       	ldd	r22, Y+39	; 0x27
    3fac:	78 a5       	ldd	r23, Y+40	; 0x28
    3fae:	89 a5       	ldd	r24, Y+41	; 0x29
    3fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	4a ef       	ldi	r20, 0xFA	; 250
    3fb8:	54 e4       	ldi	r21, 0x44	; 68
    3fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	8b a3       	std	Y+35, r24	; 0x23
    3fc4:	9c a3       	std	Y+36, r25	; 0x24
    3fc6:	ad a3       	std	Y+37, r26	; 0x25
    3fc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fca:	6b a1       	ldd	r22, Y+35	; 0x23
    3fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    3fce:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e8       	ldi	r20, 0x80	; 128
    3fd8:	5f e3       	ldi	r21, 0x3F	; 63
    3fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fde:	88 23       	and	r24, r24
    3fe0:	2c f4       	brge	.+10     	; 0x3fec <BOOKS_search+0x1f8>
		__ticks = 1;
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	9a a3       	std	Y+34, r25	; 0x22
    3fe8:	89 a3       	std	Y+33, r24	; 0x21
    3fea:	3f c0       	rjmp	.+126    	; 0x406a <BOOKS_search+0x276>
	else if (__tmp > 65535)
    3fec:	6b a1       	ldd	r22, Y+35	; 0x23
    3fee:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	3f ef       	ldi	r19, 0xFF	; 255
    3ff8:	4f e7       	ldi	r20, 0x7F	; 127
    3ffa:	57 e4       	ldi	r21, 0x47	; 71
    3ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4000:	18 16       	cp	r1, r24
    4002:	4c f5       	brge	.+82     	; 0x4056 <BOOKS_search+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4004:	6f a1       	ldd	r22, Y+39	; 0x27
    4006:	78 a5       	ldd	r23, Y+40	; 0x28
    4008:	89 a5       	ldd	r24, Y+41	; 0x29
    400a:	9a a5       	ldd	r25, Y+42	; 0x2a
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e2       	ldi	r20, 0x20	; 32
    4012:	51 e4       	ldi	r21, 0x41	; 65
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	bc 01       	movw	r22, r24
    401e:	cd 01       	movw	r24, r26
    4020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	9a a3       	std	Y+34, r25	; 0x22
    402a:	89 a3       	std	Y+33, r24	; 0x21
    402c:	0f c0       	rjmp	.+30     	; 0x404c <BOOKS_search+0x258>
    402e:	88 ec       	ldi	r24, 0xC8	; 200
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	98 a3       	std	Y+32, r25	; 0x20
    4034:	8f 8f       	std	Y+31, r24	; 0x1f
    4036:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4038:	98 a1       	ldd	r25, Y+32	; 0x20
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	f1 f7       	brne	.-4      	; 0x403a <BOOKS_search+0x246>
    403e:	98 a3       	std	Y+32, r25	; 0x20
    4040:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4042:	89 a1       	ldd	r24, Y+33	; 0x21
    4044:	9a a1       	ldd	r25, Y+34	; 0x22
    4046:	01 97       	sbiw	r24, 0x01	; 1
    4048:	9a a3       	std	Y+34, r25	; 0x22
    404a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404c:	89 a1       	ldd	r24, Y+33	; 0x21
    404e:	9a a1       	ldd	r25, Y+34	; 0x22
    4050:	00 97       	sbiw	r24, 0x00	; 0
    4052:	69 f7       	brne	.-38     	; 0x402e <BOOKS_search+0x23a>
    4054:	14 c0       	rjmp	.+40     	; 0x407e <BOOKS_search+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4056:	6b a1       	ldd	r22, Y+35	; 0x23
    4058:	7c a1       	ldd	r23, Y+36	; 0x24
    405a:	8d a1       	ldd	r24, Y+37	; 0x25
    405c:	9e a1       	ldd	r25, Y+38	; 0x26
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	9a a3       	std	Y+34, r25	; 0x22
    4068:	89 a3       	std	Y+33, r24	; 0x21
    406a:	89 a1       	ldd	r24, Y+33	; 0x21
    406c:	9a a1       	ldd	r25, Y+34	; 0x22
    406e:	9e 8f       	std	Y+30, r25	; 0x1e
    4070:	8d 8f       	std	Y+29, r24	; 0x1d
    4072:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4074:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	f1 f7       	brne	.-4      	; 0x4076 <BOOKS_search+0x282>
    407a:	9e 8f       	std	Y+30, r25	; 0x1e
    407c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	60 e2       	ldi	r22, 0x20	; 32
    4082:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

			LCD_String("ISBN:");
    4086:	89 ee       	ldi	r24, 0xE9	; 233
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_vidGoTo(1, 2);
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	62 e0       	ldi	r22, 0x02	; 2
    4092:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			LCD_String(ptr_book -> SERIAL_NUMBER);
    4096:	e0 91 c4 04 	lds	r30, 0x04C4
    409a:	f0 91 c5 04 	lds	r31, 0x04C5
    409e:	83 81       	ldd	r24, Z+3	; 0x03
    40a0:	94 81       	ldd	r25, Z+4	; 0x04
    40a2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	aa ef       	ldi	r26, 0xFA	; 250
    40ac:	b4 e4       	ldi	r27, 0x44	; 68
    40ae:	89 8f       	std	Y+25, r24	; 0x19
    40b0:	9a 8f       	std	Y+26, r25	; 0x1a
    40b2:	ab 8f       	std	Y+27, r26	; 0x1b
    40b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b6:	69 8d       	ldd	r22, Y+25	; 0x19
    40b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	4a ef       	ldi	r20, 0xFA	; 250
    40c4:	54 e4       	ldi	r21, 0x44	; 68
    40c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	8d 8b       	std	Y+21, r24	; 0x15
    40d0:	9e 8b       	std	Y+22, r25	; 0x16
    40d2:	af 8b       	std	Y+23, r26	; 0x17
    40d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40d6:	6d 89       	ldd	r22, Y+21	; 0x15
    40d8:	7e 89       	ldd	r23, Y+22	; 0x16
    40da:	8f 89       	ldd	r24, Y+23	; 0x17
    40dc:	98 8d       	ldd	r25, Y+24	; 0x18
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	40 e8       	ldi	r20, 0x80	; 128
    40e4:	5f e3       	ldi	r21, 0x3F	; 63
    40e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ea:	88 23       	and	r24, r24
    40ec:	2c f4       	brge	.+10     	; 0x40f8 <BOOKS_search+0x304>
		__ticks = 1;
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	9c 8b       	std	Y+20, r25	; 0x14
    40f4:	8b 8b       	std	Y+19, r24	; 0x13
    40f6:	3f c0       	rjmp	.+126    	; 0x4176 <BOOKS_search+0x382>
	else if (__tmp > 65535)
    40f8:	6d 89       	ldd	r22, Y+21	; 0x15
    40fa:	7e 89       	ldd	r23, Y+22	; 0x16
    40fc:	8f 89       	ldd	r24, Y+23	; 0x17
    40fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	3f ef       	ldi	r19, 0xFF	; 255
    4104:	4f e7       	ldi	r20, 0x7F	; 127
    4106:	57 e4       	ldi	r21, 0x47	; 71
    4108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    410c:	18 16       	cp	r1, r24
    410e:	4c f5       	brge	.+82     	; 0x4162 <BOOKS_search+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4110:	69 8d       	ldd	r22, Y+25	; 0x19
    4112:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4114:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4116:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	40 e2       	ldi	r20, 0x20	; 32
    411e:	51 e4       	ldi	r21, 0x41	; 65
    4120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	bc 01       	movw	r22, r24
    412a:	cd 01       	movw	r24, r26
    412c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	9c 8b       	std	Y+20, r25	; 0x14
    4136:	8b 8b       	std	Y+19, r24	; 0x13
    4138:	0f c0       	rjmp	.+30     	; 0x4158 <BOOKS_search+0x364>
    413a:	88 ec       	ldi	r24, 0xC8	; 200
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	9a 8b       	std	Y+18, r25	; 0x12
    4140:	89 8b       	std	Y+17, r24	; 0x11
    4142:	89 89       	ldd	r24, Y+17	; 0x11
    4144:	9a 89       	ldd	r25, Y+18	; 0x12
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <BOOKS_search+0x352>
    414a:	9a 8b       	std	Y+18, r25	; 0x12
    414c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    414e:	8b 89       	ldd	r24, Y+19	; 0x13
    4150:	9c 89       	ldd	r25, Y+20	; 0x14
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	9c 8b       	std	Y+20, r25	; 0x14
    4156:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4158:	8b 89       	ldd	r24, Y+19	; 0x13
    415a:	9c 89       	ldd	r25, Y+20	; 0x14
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	69 f7       	brne	.-38     	; 0x413a <BOOKS_search+0x346>
    4160:	14 c0       	rjmp	.+40     	; 0x418a <BOOKS_search+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4162:	6d 89       	ldd	r22, Y+21	; 0x15
    4164:	7e 89       	ldd	r23, Y+22	; 0x16
    4166:	8f 89       	ldd	r24, Y+23	; 0x17
    4168:	98 8d       	ldd	r25, Y+24	; 0x18
    416a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	9c 8b       	std	Y+20, r25	; 0x14
    4174:	8b 8b       	std	Y+19, r24	; 0x13
    4176:	8b 89       	ldd	r24, Y+19	; 0x13
    4178:	9c 89       	ldd	r25, Y+20	; 0x14
    417a:	98 8b       	std	Y+16, r25	; 0x10
    417c:	8f 87       	std	Y+15, r24	; 0x0f
    417e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4180:	98 89       	ldd	r25, Y+16	; 0x10
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <BOOKS_search+0x38e>
    4186:	98 8b       	std	Y+16, r25	; 0x10
    4188:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	60 e2       	ldi	r22, 0x20	; 32
    418e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

			// Update buffer incase of borrowing			
			return ptr_book -> INDEX_BOOK;
    4192:	e0 91 c4 04 	lds	r30, 0x04C4
    4196:	f0 91 c5 04 	lds	r31, 0x04C5
    419a:	82 81       	ldd	r24, Z+2	; 0x02
    419c:	8f af       	std	Y+63, r24	; 0x3f
    419e:	b2 c0       	rjmp	.+356    	; 0x4304 <BOOKS_search+0x510>
		}
		ptr_book = ptr_book -> NEXT_BOOK;
    41a0:	e0 91 c4 04 	lds	r30, 0x04C4
    41a4:	f0 91 c5 04 	lds	r31, 0x04C5
    41a8:	86 81       	ldd	r24, Z+6	; 0x06
    41aa:	97 81       	ldd	r25, Z+7	; 0x07
    41ac:	90 93 c5 04 	sts	0x04C5, r25
    41b0:	80 93 c4 04 	sts	0x04C4, r24
	
	bool found = false;


	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfBooks; i++)
    41b4:	89 ad       	ldd	r24, Y+57	; 0x39
    41b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    41b8:	01 96       	adiw	r24, 0x01	; 1
    41ba:	9a af       	std	Y+58, r25	; 0x3a
    41bc:	89 af       	std	Y+57, r24	; 0x39
    41be:	80 91 b8 04 	lds	r24, 0x04B8
    41c2:	28 2f       	mov	r18, r24
    41c4:	33 27       	eor	r19, r19
    41c6:	27 fd       	sbrc	r18, 7
    41c8:	30 95       	com	r19
    41ca:	89 ad       	ldd	r24, Y+57	; 0x39
    41cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    41ce:	28 17       	cp	r18, r24
    41d0:	39 07       	cpc	r19, r25
    41d2:	0c f0       	brlt	.+2      	; 0x41d6 <BOOKS_search+0x3e2>
    41d4:	2c ce       	rjmp	.-936    	; 0x3e2e <BOOKS_search+0x3a>
			return ptr_book -> INDEX_BOOK;
		}
		ptr_book = ptr_book -> NEXT_BOOK;
	}

	if(!found)
    41d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	89 27       	eor	r24, r25
    41dc:	88 23       	and	r24, r24
    41de:	09 f4       	brne	.+2      	; 0x41e2 <BOOKS_search+0x3ee>
    41e0:	88 c0       	rjmp	.+272    	; 0x42f2 <BOOKS_search+0x4fe>
	{
		LCD_vidGoTo(1, 1);
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		LCD_String("NO BOOK found");
    41ea:	8f ee       	ldi	r24, 0xEF	; 239
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	aa ef       	ldi	r26, 0xFA	; 250
    41f8:	b4 e4       	ldi	r27, 0x44	; 68
    41fa:	8b 87       	std	Y+11, r24	; 0x0b
    41fc:	9c 87       	std	Y+12, r25	; 0x0c
    41fe:	ad 87       	std	Y+13, r26	; 0x0d
    4200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4202:	6b 85       	ldd	r22, Y+11	; 0x0b
    4204:	7c 85       	ldd	r23, Y+12	; 0x0c
    4206:	8d 85       	ldd	r24, Y+13	; 0x0d
    4208:	9e 85       	ldd	r25, Y+14	; 0x0e
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4a ef       	ldi	r20, 0xFA	; 250
    4210:	54 e4       	ldi	r21, 0x44	; 68
    4212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	8f 83       	std	Y+7, r24	; 0x07
    421c:	98 87       	std	Y+8, r25	; 0x08
    421e:	a9 87       	std	Y+9, r26	; 0x09
    4220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4222:	6f 81       	ldd	r22, Y+7	; 0x07
    4224:	78 85       	ldd	r23, Y+8	; 0x08
    4226:	89 85       	ldd	r24, Y+9	; 0x09
    4228:	9a 85       	ldd	r25, Y+10	; 0x0a
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e8       	ldi	r20, 0x80	; 128
    4230:	5f e3       	ldi	r21, 0x3F	; 63
    4232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4236:	88 23       	and	r24, r24
    4238:	2c f4       	brge	.+10     	; 0x4244 <BOOKS_search+0x450>
		__ticks = 1;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
    4242:	3f c0       	rjmp	.+126    	; 0x42c2 <BOOKS_search+0x4ce>
	else if (__tmp > 65535)
    4244:	6f 81       	ldd	r22, Y+7	; 0x07
    4246:	78 85       	ldd	r23, Y+8	; 0x08
    4248:	89 85       	ldd	r24, Y+9	; 0x09
    424a:	9a 85       	ldd	r25, Y+10	; 0x0a
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	3f ef       	ldi	r19, 0xFF	; 255
    4250:	4f e7       	ldi	r20, 0x7F	; 127
    4252:	57 e4       	ldi	r21, 0x47	; 71
    4254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4258:	18 16       	cp	r1, r24
    425a:	4c f5       	brge	.+82     	; 0x42ae <BOOKS_search+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    425c:	6b 85       	ldd	r22, Y+11	; 0x0b
    425e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4260:	8d 85       	ldd	r24, Y+13	; 0x0d
    4262:	9e 85       	ldd	r25, Y+14	; 0x0e
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e2       	ldi	r20, 0x20	; 32
    426a:	51 e4       	ldi	r21, 0x41	; 65
    426c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	bc 01       	movw	r22, r24
    4276:	cd 01       	movw	r24, r26
    4278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	9e 83       	std	Y+6, r25	; 0x06
    4282:	8d 83       	std	Y+5, r24	; 0x05
    4284:	0f c0       	rjmp	.+30     	; 0x42a4 <BOOKS_search+0x4b0>
    4286:	88 ec       	ldi	r24, 0xC8	; 200
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	8b 83       	std	Y+3, r24	; 0x03
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	9c 81       	ldd	r25, Y+4	; 0x04
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <BOOKS_search+0x49e>
    4296:	9c 83       	std	Y+4, r25	; 0x04
    4298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429a:	8d 81       	ldd	r24, Y+5	; 0x05
    429c:	9e 81       	ldd	r25, Y+6	; 0x06
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	9e 83       	std	Y+6, r25	; 0x06
    42a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a4:	8d 81       	ldd	r24, Y+5	; 0x05
    42a6:	9e 81       	ldd	r25, Y+6	; 0x06
    42a8:	00 97       	sbiw	r24, 0x00	; 0
    42aa:	69 f7       	brne	.-38     	; 0x4286 <BOOKS_search+0x492>
    42ac:	14 c0       	rjmp	.+40     	; 0x42d6 <BOOKS_search+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ae:	6f 81       	ldd	r22, Y+7	; 0x07
    42b0:	78 85       	ldd	r23, Y+8	; 0x08
    42b2:	89 85       	ldd	r24, Y+9	; 0x09
    42b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	9e 83       	std	Y+6, r25	; 0x06
    42c0:	8d 83       	std	Y+5, r24	; 0x05
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	9a 83       	std	Y+2, r25	; 0x02
    42c8:	89 83       	std	Y+1, r24	; 0x01
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	9a 81       	ldd	r25, Y+2	; 0x02
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <BOOKS_search+0x4da>
    42d2:	9a 83       	std	Y+2, r25	; 0x02
    42d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	60 e2       	ldi	r22, 0x20	; 32
    42da:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		ptr_book = root_book;
    42de:	80 91 c2 04 	lds	r24, 0x04C2
    42e2:	90 91 c3 04 	lds	r25, 0x04C3
    42e6:	90 93 c5 04 	sts	0x04C5, r25
    42ea:	80 93 c4 04 	sts	0x04C4, r24
		return DoesNot_exist;
    42ee:	1f ae       	std	Y+63, r1	; 0x3f
    42f0:	09 c0       	rjmp	.+18     	; 0x4304 <BOOKS_search+0x510>
	}

	ptr_book = root_book;
    42f2:	80 91 c2 04 	lds	r24, 0x04C2
    42f6:	90 91 c3 04 	lds	r25, 0x04C3
    42fa:	90 93 c5 04 	sts	0x04C5, r25
    42fe:	80 93 c4 04 	sts	0x04C4, r24
	return 0;
    4302:	1f ae       	std	Y+63, r1	; 0x3f
    4304:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    4306:	ef 96       	adiw	r28, 0x3f	; 63
    4308:	0f b6       	in	r0, 0x3f	; 63
    430a:	f8 94       	cli
    430c:	de bf       	out	0x3e, r29	; 62
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	cd bf       	out	0x3d, r28	; 61
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <BOOKS_show>:
*/


// Shows all Books in the library
bool BOOKS_show(void)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    4320:	ab 97       	sbiw	r28, 0x2b	; 43
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	cd bf       	out	0x3d, r28	; 61
	LCD_vidClearOnDemand(1, 32);
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	60 e2       	ldi	r22, 0x20	; 32
    4330:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

	ptr_book = root_book -> NEXT_BOOK;
    4334:	e0 91 c2 04 	lds	r30, 0x04C2
    4338:	f0 91 c3 04 	lds	r31, 0x04C3
    433c:	86 81       	ldd	r24, Z+6	; 0x06
    433e:	97 81       	ldd	r25, Z+7	; 0x07
    4340:	90 93 c5 04 	sts	0x04C5, r25
    4344:	80 93 c4 04 	sts	0x04C4, r24

	// Only root is no valid list
	if(!ptr_book)
    4348:	80 91 c4 04 	lds	r24, 0x04C4
    434c:	90 91 c5 04 	lds	r25, 0x04C5
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	09 f0       	breq	.+2      	; 0x4356 <BOOKS_show+0x3e>
    4354:	80 c0       	rjmp	.+256    	; 0x4456 <BOOKS_show+0x13e>
	{
		LCD_String("NO BOOKS");
    4356:	8d ef       	ldi	r24, 0xFD	; 253
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	aa e7       	ldi	r26, 0x7A	; 122
    4364:	b4 e4       	ldi	r27, 0x44	; 68
    4366:	8f a3       	std	Y+39, r24	; 0x27
    4368:	98 a7       	std	Y+40, r25	; 0x28
    436a:	a9 a7       	std	Y+41, r26	; 0x29
    436c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436e:	6f a1       	ldd	r22, Y+39	; 0x27
    4370:	78 a5       	ldd	r23, Y+40	; 0x28
    4372:	89 a5       	ldd	r24, Y+41	; 0x29
    4374:	9a a5       	ldd	r25, Y+42	; 0x2a
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	4a ef       	ldi	r20, 0xFA	; 250
    437c:	54 e4       	ldi	r21, 0x44	; 68
    437e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4382:	dc 01       	movw	r26, r24
    4384:	cb 01       	movw	r24, r22
    4386:	8b a3       	std	Y+35, r24	; 0x23
    4388:	9c a3       	std	Y+36, r25	; 0x24
    438a:	ad a3       	std	Y+37, r26	; 0x25
    438c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    438e:	6b a1       	ldd	r22, Y+35	; 0x23
    4390:	7c a1       	ldd	r23, Y+36	; 0x24
    4392:	8d a1       	ldd	r24, Y+37	; 0x25
    4394:	9e a1       	ldd	r25, Y+38	; 0x26
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e8       	ldi	r20, 0x80	; 128
    439c:	5f e3       	ldi	r21, 0x3F	; 63
    439e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a2:	88 23       	and	r24, r24
    43a4:	2c f4       	brge	.+10     	; 0x43b0 <BOOKS_show+0x98>
		__ticks = 1;
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	9a a3       	std	Y+34, r25	; 0x22
    43ac:	89 a3       	std	Y+33, r24	; 0x21
    43ae:	3f c0       	rjmp	.+126    	; 0x442e <BOOKS_show+0x116>
	else if (__tmp > 65535)
    43b0:	6b a1       	ldd	r22, Y+35	; 0x23
    43b2:	7c a1       	ldd	r23, Y+36	; 0x24
    43b4:	8d a1       	ldd	r24, Y+37	; 0x25
    43b6:	9e a1       	ldd	r25, Y+38	; 0x26
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	3f ef       	ldi	r19, 0xFF	; 255
    43bc:	4f e7       	ldi	r20, 0x7F	; 127
    43be:	57 e4       	ldi	r21, 0x47	; 71
    43c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c4:	18 16       	cp	r1, r24
    43c6:	4c f5       	brge	.+82     	; 0x441a <BOOKS_show+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c8:	6f a1       	ldd	r22, Y+39	; 0x27
    43ca:	78 a5       	ldd	r23, Y+40	; 0x28
    43cc:	89 a5       	ldd	r24, Y+41	; 0x29
    43ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e2       	ldi	r20, 0x20	; 32
    43d6:	51 e4       	ldi	r21, 0x41	; 65
    43d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	9a a3       	std	Y+34, r25	; 0x22
    43ee:	89 a3       	std	Y+33, r24	; 0x21
    43f0:	0f c0       	rjmp	.+30     	; 0x4410 <BOOKS_show+0xf8>
    43f2:	88 ec       	ldi	r24, 0xC8	; 200
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	98 a3       	std	Y+32, r25	; 0x20
    43f8:	8f 8f       	std	Y+31, r24	; 0x1f
    43fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43fc:	98 a1       	ldd	r25, Y+32	; 0x20
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	f1 f7       	brne	.-4      	; 0x43fe <BOOKS_show+0xe6>
    4402:	98 a3       	std	Y+32, r25	; 0x20
    4404:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4406:	89 a1       	ldd	r24, Y+33	; 0x21
    4408:	9a a1       	ldd	r25, Y+34	; 0x22
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	9a a3       	std	Y+34, r25	; 0x22
    440e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4410:	89 a1       	ldd	r24, Y+33	; 0x21
    4412:	9a a1       	ldd	r25, Y+34	; 0x22
    4414:	00 97       	sbiw	r24, 0x00	; 0
    4416:	69 f7       	brne	.-38     	; 0x43f2 <BOOKS_show+0xda>
    4418:	14 c0       	rjmp	.+40     	; 0x4442 <BOOKS_show+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441a:	6b a1       	ldd	r22, Y+35	; 0x23
    441c:	7c a1       	ldd	r23, Y+36	; 0x24
    441e:	8d a1       	ldd	r24, Y+37	; 0x25
    4420:	9e a1       	ldd	r25, Y+38	; 0x26
    4422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	9a a3       	std	Y+34, r25	; 0x22
    442c:	89 a3       	std	Y+33, r24	; 0x21
    442e:	89 a1       	ldd	r24, Y+33	; 0x21
    4430:	9a a1       	ldd	r25, Y+34	; 0x22
    4432:	9e 8f       	std	Y+30, r25	; 0x1e
    4434:	8d 8f       	std	Y+29, r24	; 0x1d
    4436:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4438:	9e 8d       	ldd	r25, Y+30	; 0x1e
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	f1 f7       	brne	.-4      	; 0x443a <BOOKS_show+0x122>
    443e:	9e 8f       	std	Y+30, r25	; 0x1e
    4440:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		ptr_book = root_book;
    4442:	80 91 c2 04 	lds	r24, 0x04C2
    4446:	90 91 c3 04 	lds	r25, 0x04C3
    444a:	90 93 c5 04 	sts	0x04C5, r25
    444e:	80 93 c4 04 	sts	0x04C4, r24
		return false;
    4452:	1b a6       	std	Y+43, r1	; 0x2b
    4454:	34 c1       	rjmp	.+616    	; 0x46be <BOOKS_show+0x3a6>
	}

	do
	{
		LCD_vidGoTo(1, 2);
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	62 e0       	ldi	r22, 0x02	; 2
    445a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		LCD_String(ptr_book -> SERIAL_NUMBER);
    445e:	e0 91 c4 04 	lds	r30, 0x04C4
    4462:	f0 91 c5 04 	lds	r31, 0x04C5
    4466:	83 81       	ldd	r24, Z+3	; 0x03
    4468:	94 81       	ldd	r25, Z+4	; 0x04
    446a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		LCD_vidGoTo(1, 1);
    446e:	81 e0       	ldi	r24, 0x01	; 1
    4470:	61 e0       	ldi	r22, 0x01	; 1
    4472:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		LCD_String("-");
    4476:	86 e0       	ldi	r24, 0x06	; 6
    4478:	91 e0       	ldi	r25, 0x01	; 1
    447a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		LCD_String(ptr_book -> NAME_BOOK);
    447e:	e0 91 c4 04 	lds	r30, 0x04C4
    4482:	f0 91 c5 04 	lds	r31, 0x04C5
    4486:	80 81       	ld	r24, Z
    4488:	91 81       	ldd	r25, Z+1	; 0x01
    448a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	aa e7       	ldi	r26, 0x7A	; 122
    4494:	b4 e4       	ldi	r27, 0x44	; 68
    4496:	89 8f       	std	Y+25, r24	; 0x19
    4498:	9a 8f       	std	Y+26, r25	; 0x1a
    449a:	ab 8f       	std	Y+27, r26	; 0x1b
    449c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    449e:	69 8d       	ldd	r22, Y+25	; 0x19
    44a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	4a ef       	ldi	r20, 0xFA	; 250
    44ac:	54 e4       	ldi	r21, 0x44	; 68
    44ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	8d 8b       	std	Y+21, r24	; 0x15
    44b8:	9e 8b       	std	Y+22, r25	; 0x16
    44ba:	af 8b       	std	Y+23, r26	; 0x17
    44bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44be:	6d 89       	ldd	r22, Y+21	; 0x15
    44c0:	7e 89       	ldd	r23, Y+22	; 0x16
    44c2:	8f 89       	ldd	r24, Y+23	; 0x17
    44c4:	98 8d       	ldd	r25, Y+24	; 0x18
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	5f e3       	ldi	r21, 0x3F	; 63
    44ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44d2:	88 23       	and	r24, r24
    44d4:	2c f4       	brge	.+10     	; 0x44e0 <BOOKS_show+0x1c8>
		__ticks = 1;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	9c 8b       	std	Y+20, r25	; 0x14
    44dc:	8b 8b       	std	Y+19, r24	; 0x13
    44de:	3f c0       	rjmp	.+126    	; 0x455e <BOOKS_show+0x246>
	else if (__tmp > 65535)
    44e0:	6d 89       	ldd	r22, Y+21	; 0x15
    44e2:	7e 89       	ldd	r23, Y+22	; 0x16
    44e4:	8f 89       	ldd	r24, Y+23	; 0x17
    44e6:	98 8d       	ldd	r25, Y+24	; 0x18
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	3f ef       	ldi	r19, 0xFF	; 255
    44ec:	4f e7       	ldi	r20, 0x7F	; 127
    44ee:	57 e4       	ldi	r21, 0x47	; 71
    44f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44f4:	18 16       	cp	r1, r24
    44f6:	4c f5       	brge	.+82     	; 0x454a <BOOKS_show+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f8:	69 8d       	ldd	r22, Y+25	; 0x19
    44fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e2       	ldi	r20, 0x20	; 32
    4506:	51 e4       	ldi	r21, 0x41	; 65
    4508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	bc 01       	movw	r22, r24
    4512:	cd 01       	movw	r24, r26
    4514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	9c 8b       	std	Y+20, r25	; 0x14
    451e:	8b 8b       	std	Y+19, r24	; 0x13
    4520:	0f c0       	rjmp	.+30     	; 0x4540 <BOOKS_show+0x228>
    4522:	88 ec       	ldi	r24, 0xC8	; 200
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	9a 8b       	std	Y+18, r25	; 0x12
    4528:	89 8b       	std	Y+17, r24	; 0x11
    452a:	89 89       	ldd	r24, Y+17	; 0x11
    452c:	9a 89       	ldd	r25, Y+18	; 0x12
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <BOOKS_show+0x216>
    4532:	9a 8b       	std	Y+18, r25	; 0x12
    4534:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4536:	8b 89       	ldd	r24, Y+19	; 0x13
    4538:	9c 89       	ldd	r25, Y+20	; 0x14
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	9c 8b       	std	Y+20, r25	; 0x14
    453e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4540:	8b 89       	ldd	r24, Y+19	; 0x13
    4542:	9c 89       	ldd	r25, Y+20	; 0x14
    4544:	00 97       	sbiw	r24, 0x00	; 0
    4546:	69 f7       	brne	.-38     	; 0x4522 <BOOKS_show+0x20a>
    4548:	14 c0       	rjmp	.+40     	; 0x4572 <BOOKS_show+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454a:	6d 89       	ldd	r22, Y+21	; 0x15
    454c:	7e 89       	ldd	r23, Y+22	; 0x16
    454e:	8f 89       	ldd	r24, Y+23	; 0x17
    4550:	98 8d       	ldd	r25, Y+24	; 0x18
    4552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	9c 8b       	std	Y+20, r25	; 0x14
    455c:	8b 8b       	std	Y+19, r24	; 0x13
    455e:	8b 89       	ldd	r24, Y+19	; 0x13
    4560:	9c 89       	ldd	r25, Y+20	; 0x14
    4562:	98 8b       	std	Y+16, r25	; 0x10
    4564:	8f 87       	std	Y+15, r24	; 0x0f
    4566:	8f 85       	ldd	r24, Y+15	; 0x0f
    4568:	98 89       	ldd	r25, Y+16	; 0x10
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	f1 f7       	brne	.-4      	; 0x456a <BOOKS_show+0x252>
    456e:	98 8b       	std	Y+16, r25	; 0x10
    4570:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_vidClearOnDemand(17, 32);
    4572:	81 e1       	ldi	r24, 0x11	; 17
    4574:	60 e2       	ldi	r22, 0x20	; 32
    4576:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		LCD_vidGoTo(1, 2);
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	62 e0       	ldi	r22, 0x02	; 2
    457e:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		LCD_String("Copies: ");
    4582:	88 e0       	ldi	r24, 0x08	; 8
    4584:	91 e0       	ldi	r25, 0x01	; 1
    4586:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		LinkedList_vidCompanion(ptr_book -> COPIES);
    458a:	e0 91 c4 04 	lds	r30, 0x04C4
    458e:	f0 91 c5 04 	lds	r31, 0x04C5
    4592:	85 81       	ldd	r24, Z+5	; 0x05
    4594:	88 2f       	mov	r24, r24
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <LinkedList_vidCompanion>
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	aa e7       	ldi	r26, 0x7A	; 122
    45a2:	b4 e4       	ldi	r27, 0x44	; 68
    45a4:	8b 87       	std	Y+11, r24	; 0x0b
    45a6:	9c 87       	std	Y+12, r25	; 0x0c
    45a8:	ad 87       	std	Y+13, r26	; 0x0d
    45aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    45b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    45b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	4a ef       	ldi	r20, 0xFA	; 250
    45ba:	54 e4       	ldi	r21, 0x44	; 68
    45bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	8f 83       	std	Y+7, r24	; 0x07
    45c6:	98 87       	std	Y+8, r25	; 0x08
    45c8:	a9 87       	std	Y+9, r26	; 0x09
    45ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45cc:	6f 81       	ldd	r22, Y+7	; 0x07
    45ce:	78 85       	ldd	r23, Y+8	; 0x08
    45d0:	89 85       	ldd	r24, Y+9	; 0x09
    45d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	40 e8       	ldi	r20, 0x80	; 128
    45da:	5f e3       	ldi	r21, 0x3F	; 63
    45dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e0:	88 23       	and	r24, r24
    45e2:	2c f4       	brge	.+10     	; 0x45ee <BOOKS_show+0x2d6>
		__ticks = 1;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9e 83       	std	Y+6, r25	; 0x06
    45ea:	8d 83       	std	Y+5, r24	; 0x05
    45ec:	3f c0       	rjmp	.+126    	; 0x466c <BOOKS_show+0x354>
	else if (__tmp > 65535)
    45ee:	6f 81       	ldd	r22, Y+7	; 0x07
    45f0:	78 85       	ldd	r23, Y+8	; 0x08
    45f2:	89 85       	ldd	r24, Y+9	; 0x09
    45f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	3f ef       	ldi	r19, 0xFF	; 255
    45fa:	4f e7       	ldi	r20, 0x7F	; 127
    45fc:	57 e4       	ldi	r21, 0x47	; 71
    45fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4602:	18 16       	cp	r1, r24
    4604:	4c f5       	brge	.+82     	; 0x4658 <BOOKS_show+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4606:	6b 85       	ldd	r22, Y+11	; 0x0b
    4608:	7c 85       	ldd	r23, Y+12	; 0x0c
    460a:	8d 85       	ldd	r24, Y+13	; 0x0d
    460c:	9e 85       	ldd	r25, Y+14	; 0x0e
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	40 e2       	ldi	r20, 0x20	; 32
    4614:	51 e4       	ldi	r21, 0x41	; 65
    4616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	bc 01       	movw	r22, r24
    4620:	cd 01       	movw	r24, r26
    4622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	9e 83       	std	Y+6, r25	; 0x06
    462c:	8d 83       	std	Y+5, r24	; 0x05
    462e:	0f c0       	rjmp	.+30     	; 0x464e <BOOKS_show+0x336>
    4630:	88 ec       	ldi	r24, 0xC8	; 200
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	9c 83       	std	Y+4, r25	; 0x04
    4636:	8b 83       	std	Y+3, r24	; 0x03
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	9c 81       	ldd	r25, Y+4	; 0x04
    463c:	01 97       	sbiw	r24, 0x01	; 1
    463e:	f1 f7       	brne	.-4      	; 0x463c <BOOKS_show+0x324>
    4640:	9c 83       	std	Y+4, r25	; 0x04
    4642:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4644:	8d 81       	ldd	r24, Y+5	; 0x05
    4646:	9e 81       	ldd	r25, Y+6	; 0x06
    4648:	01 97       	sbiw	r24, 0x01	; 1
    464a:	9e 83       	std	Y+6, r25	; 0x06
    464c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464e:	8d 81       	ldd	r24, Y+5	; 0x05
    4650:	9e 81       	ldd	r25, Y+6	; 0x06
    4652:	00 97       	sbiw	r24, 0x00	; 0
    4654:	69 f7       	brne	.-38     	; 0x4630 <BOOKS_show+0x318>
    4656:	14 c0       	rjmp	.+40     	; 0x4680 <BOOKS_show+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4658:	6f 81       	ldd	r22, Y+7	; 0x07
    465a:	78 85       	ldd	r23, Y+8	; 0x08
    465c:	89 85       	ldd	r24, Y+9	; 0x09
    465e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	9e 83       	std	Y+6, r25	; 0x06
    466a:	8d 83       	std	Y+5, r24	; 0x05
    466c:	8d 81       	ldd	r24, Y+5	; 0x05
    466e:	9e 81       	ldd	r25, Y+6	; 0x06
    4670:	9a 83       	std	Y+2, r25	; 0x02
    4672:	89 83       	std	Y+1, r24	; 0x01
    4674:	89 81       	ldd	r24, Y+1	; 0x01
    4676:	9a 81       	ldd	r25, Y+2	; 0x02
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	f1 f7       	brne	.-4      	; 0x4678 <BOOKS_show+0x360>
    467c:	9a 83       	std	Y+2, r25	; 0x02
    467e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_vidClearOnDemand(1, 32);
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	60 e2       	ldi	r22, 0x20	; 32
    4684:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		
		ptr_book = ptr_book -> NEXT_BOOK;
    4688:	e0 91 c4 04 	lds	r30, 0x04C4
    468c:	f0 91 c5 04 	lds	r31, 0x04C5
    4690:	86 81       	ldd	r24, Z+6	; 0x06
    4692:	97 81       	ldd	r25, Z+7	; 0x07
    4694:	90 93 c5 04 	sts	0x04C5, r25
    4698:	80 93 c4 04 	sts	0x04C4, r24
	}
	while(ptr_book != NULL);
    469c:	80 91 c4 04 	lds	r24, 0x04C4
    46a0:	90 91 c5 04 	lds	r25, 0x04C5
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	09 f0       	breq	.+2      	; 0x46aa <BOOKS_show+0x392>
    46a8:	d6 ce       	rjmp	.-596    	; 0x4456 <BOOKS_show+0x13e>
	
	
	ptr_book = root_book;
    46aa:	80 91 c2 04 	lds	r24, 0x04C2
    46ae:	90 91 c3 04 	lds	r25, 0x04C3
    46b2:	90 93 c5 04 	sts	0x04C5, r25
    46b6:	80 93 c4 04 	sts	0x04C4, r24

	return true;
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	8b a7       	std	Y+43, r24	; 0x2b
    46be:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    46c0:	ab 96       	adiw	r28, 0x2b	; 43
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	cd bf       	out	0x3d, r28	; 61
    46cc:	cf 91       	pop	r28
    46ce:	df 91       	pop	r29
    46d0:	08 95       	ret

000046d2 <BOOKS_COPIES_DECAY>:


// Incase of borrow state
bool BOOKS_COPIES_DECAY(void)
{
    46d2:	df 93       	push	r29
    46d4:	cf 93       	push	r28
    46d6:	0f 92       	push	r0
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
	if(book_to_decay -> COPIES > 0)
    46dc:	e0 91 c6 04 	lds	r30, 0x04C6
    46e0:	f0 91 c7 04 	lds	r31, 0x04C7
    46e4:	85 81       	ldd	r24, Z+5	; 0x05
    46e6:	88 23       	and	r24, r24
    46e8:	81 f0       	breq	.+32     	; 0x470a <BOOKS_COPIES_DECAY+0x38>
	{
		// Indication for success
		book_to_decay -> COPIES = book_to_decay -> COPIES - 1;
    46ea:	a0 91 c6 04 	lds	r26, 0x04C6
    46ee:	b0 91 c7 04 	lds	r27, 0x04C7
    46f2:	e0 91 c6 04 	lds	r30, 0x04C6
    46f6:	f0 91 c7 04 	lds	r31, 0x04C7
    46fa:	85 81       	ldd	r24, Z+5	; 0x05
    46fc:	81 50       	subi	r24, 0x01	; 1
    46fe:	15 96       	adiw	r26, 0x05	; 5
    4700:	8c 93       	st	X, r24
    4702:	15 97       	sbiw	r26, 0x05	; 5
		return 1;
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	89 83       	std	Y+1, r24	; 0x01
    4708:	01 c0       	rjmp	.+2      	; 0x470c <BOOKS_COPIES_DECAY+0x3a>
	}
	
	else
	{
		// INvalid number of copies
		return 0;
    470a:	19 82       	std	Y+1, r1	; 0x01
    470c:	89 81       	ldd	r24, Y+1	; 0x01
	}

	return 0;

}
    470e:	0f 90       	pop	r0
    4710:	cf 91       	pop	r28
    4712:	df 91       	pop	r29
    4714:	08 95       	ret

00004716 <BOOKS_COPIES_INCREASE>:

// Incase of return state
bool BOOKS_COPIES_INCREASE(void)
{
    4716:	df 93       	push	r29
    4718:	cf 93       	push	r28
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
	book_to_decay -> COPIES = book_to_decay -> COPIES + 1;
    471e:	a0 91 c6 04 	lds	r26, 0x04C6
    4722:	b0 91 c7 04 	lds	r27, 0x04C7
    4726:	e0 91 c6 04 	lds	r30, 0x04C6
    472a:	f0 91 c7 04 	lds	r31, 0x04C7
    472e:	85 81       	ldd	r24, Z+5	; 0x05
    4730:	8f 5f       	subi	r24, 0xFF	; 255
    4732:	15 96       	adiw	r26, 0x05	; 5
    4734:	8c 93       	st	X, r24
    4736:	15 97       	sbiw	r26, 0x05	; 5
	return 1;
    4738:	81 e0       	ldi	r24, 0x01	; 1
}
    473a:	cf 91       	pop	r28
    473c:	df 91       	pop	r29
    473e:	08 95       	ret

00004740 <CompareString>:


bool CompareString(char *str1, char* str2)
{
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	27 97       	sbiw	r28, 0x07	; 7
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
    4754:	9c 83       	std	Y+4, r25	; 0x04
    4756:	8b 83       	std	Y+3, r24	; 0x03
    4758:	7e 83       	std	Y+6, r23	; 0x06
    475a:	6d 83       	std	Y+5, r22	; 0x05
	u8 equal = 0;
    475c:	1a 82       	std	Y+2, r1	; 0x02
	equal = LengthString(str1, str2);
    475e:	8b 81       	ldd	r24, Y+3	; 0x03
    4760:	9c 81       	ldd	r25, Y+4	; 0x04
    4762:	2d 81       	ldd	r18, Y+5	; 0x05
    4764:	3e 81       	ldd	r19, Y+6	; 0x06
    4766:	b9 01       	movw	r22, r18
    4768:	0e 94 ee 23 	call	0x47dc	; 0x47dc <LengthString>
    476c:	8a 83       	std	Y+2, r24	; 0x02
	if(equal)
    476e:	8a 81       	ldd	r24, Y+2	; 0x02
    4770:	88 23       	and	r24, r24
    4772:	49 f1       	breq	.+82     	; 0x47c6 <CompareString+0x86>
	{
		for(u8 i = 0; str1[i] != '\0'; i++)
    4774:	19 82       	std	Y+1, r1	; 0x01
    4776:	19 c0       	rjmp	.+50     	; 0x47aa <CompareString+0x6a>
		{
			if(str1[i] != str2[i])
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	28 2f       	mov	r18, r24
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	8b 81       	ldd	r24, Y+3	; 0x03
    4780:	9c 81       	ldd	r25, Y+4	; 0x04
    4782:	fc 01       	movw	r30, r24
    4784:	e2 0f       	add	r30, r18
    4786:	f3 1f       	adc	r31, r19
    4788:	40 81       	ld	r20, Z
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	28 2f       	mov	r18, r24
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	8d 81       	ldd	r24, Y+5	; 0x05
    4792:	9e 81       	ldd	r25, Y+6	; 0x06
    4794:	fc 01       	movw	r30, r24
    4796:	e2 0f       	add	r30, r18
    4798:	f3 1f       	adc	r31, r19
    479a:	80 81       	ld	r24, Z
    479c:	48 17       	cp	r20, r24
    479e:	11 f0       	breq	.+4      	; 0x47a4 <CompareString+0x64>
				return false;
    47a0:	1f 82       	std	Y+7, r1	; 0x07
    47a2:	12 c0       	rjmp	.+36     	; 0x47c8 <CompareString+0x88>
{
	u8 equal = 0;
	equal = LengthString(str1, str2);
	if(equal)
	{
		for(u8 i = 0; str1[i] != '\0'; i++)
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	8f 5f       	subi	r24, 0xFF	; 255
    47a8:	89 83       	std	Y+1, r24	; 0x01
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	28 2f       	mov	r18, r24
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	8b 81       	ldd	r24, Y+3	; 0x03
    47b2:	9c 81       	ldd	r25, Y+4	; 0x04
    47b4:	fc 01       	movw	r30, r24
    47b6:	e2 0f       	add	r30, r18
    47b8:	f3 1f       	adc	r31, r19
    47ba:	80 81       	ld	r24, Z
    47bc:	88 23       	and	r24, r24
    47be:	e1 f6       	brne	.-72     	; 0x4778 <CompareString+0x38>
		{
			if(str1[i] != str2[i])
				return false;
		}
		return true;
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	8f 83       	std	Y+7, r24	; 0x07
    47c4:	01 c0       	rjmp	.+2      	; 0x47c8 <CompareString+0x88>
	}
	return false;
    47c6:	1f 82       	std	Y+7, r1	; 0x07
    47c8:	8f 81       	ldd	r24, Y+7	; 0x07

}
    47ca:	27 96       	adiw	r28, 0x07	; 7
    47cc:	0f b6       	in	r0, 0x3f	; 63
    47ce:	f8 94       	cli
    47d0:	de bf       	out	0x3e, r29	; 62
    47d2:	0f be       	out	0x3f, r0	; 63
    47d4:	cd bf       	out	0x3d, r28	; 61
    47d6:	cf 91       	pop	r28
    47d8:	df 91       	pop	r29
    47da:	08 95       	ret

000047dc <LengthString>:


u8 LengthString(char *str1, char *str2)
{
    47dc:	df 93       	push	r29
    47de:	cf 93       	push	r28
    47e0:	cd b7       	in	r28, 0x3d	; 61
    47e2:	de b7       	in	r29, 0x3e	; 62
    47e4:	27 97       	sbiw	r28, 0x07	; 7
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	f8 94       	cli
    47ea:	de bf       	out	0x3e, r29	; 62
    47ec:	0f be       	out	0x3f, r0	; 63
    47ee:	cd bf       	out	0x3d, r28	; 61
    47f0:	9c 83       	std	Y+4, r25	; 0x04
    47f2:	8b 83       	std	Y+3, r24	; 0x03
    47f4:	7e 83       	std	Y+6, r23	; 0x06
    47f6:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, k = 0;
    47f8:	1a 82       	std	Y+2, r1	; 0x02
    47fa:	19 82       	std	Y+1, r1	; 0x01
    47fc:	03 c0       	rjmp	.+6      	; 0x4804 <LengthString+0x28>
	while(str1[i] != '\0')
	{
		i++;
    47fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4800:	8f 5f       	subi	r24, 0xFF	; 255
    4802:	8a 83       	std	Y+2, r24	; 0x02


u8 LengthString(char *str1, char *str2)
{
	u8 i = 0, k = 0;
	while(str1[i] != '\0')
    4804:	8a 81       	ldd	r24, Y+2	; 0x02
    4806:	28 2f       	mov	r18, r24
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	8b 81       	ldd	r24, Y+3	; 0x03
    480c:	9c 81       	ldd	r25, Y+4	; 0x04
    480e:	fc 01       	movw	r30, r24
    4810:	e2 0f       	add	r30, r18
    4812:	f3 1f       	adc	r31, r19
    4814:	80 81       	ld	r24, Z
    4816:	88 23       	and	r24, r24
    4818:	91 f7       	brne	.-28     	; 0x47fe <LengthString+0x22>
    481a:	03 c0       	rjmp	.+6      	; 0x4822 <LengthString+0x46>
	{
		i++;
	}
	while(str2[k] != '\0')
	{
		k++;
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	8f 5f       	subi	r24, 0xFF	; 255
    4820:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0, k = 0;
	while(str1[i] != '\0')
	{
		i++;
	}
	while(str2[k] != '\0')
    4822:	89 81       	ldd	r24, Y+1	; 0x01
    4824:	28 2f       	mov	r18, r24
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	8d 81       	ldd	r24, Y+5	; 0x05
    482a:	9e 81       	ldd	r25, Y+6	; 0x06
    482c:	fc 01       	movw	r30, r24
    482e:	e2 0f       	add	r30, r18
    4830:	f3 1f       	adc	r31, r19
    4832:	80 81       	ld	r24, Z
    4834:	88 23       	and	r24, r24
    4836:	91 f7       	brne	.-28     	; 0x481c <LengthString+0x40>
	{
		k++;
	}

	if(k == i)
    4838:	99 81       	ldd	r25, Y+1	; 0x01
    483a:	8a 81       	ldd	r24, Y+2	; 0x02
    483c:	98 17       	cp	r25, r24
    483e:	19 f4       	brne	.+6      	; 0x4846 <LengthString+0x6a>
	{
		return true;
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	8f 83       	std	Y+7, r24	; 0x07
    4844:	01 c0       	rjmp	.+2      	; 0x4848 <LengthString+0x6c>
	}
	return false;
    4846:	1f 82       	std	Y+7, r1	; 0x07
    4848:	8f 81       	ldd	r24, Y+7	; 0x07

}
    484a:	27 96       	adiw	r28, 0x07	; 7
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	de bf       	out	0x3e, r29	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	cf 91       	pop	r28
    4858:	df 91       	pop	r29
    485a:	08 95       	ret

0000485c <LinkedList_vidInitialize>:


/********************************* READY *********************************/
// Initialize members list
void LinkedList_vidInitialize(void)
{
    485c:	df 93       	push	r29
    485e:	cf 93       	push	r28
    4860:	00 d0       	rcall	.+0      	; 0x4862 <LinkedList_vidInitialize+0x6>
    4862:	cd b7       	in	r28, 0x3d	; 61
    4864:	de b7       	in	r29, 0x3e	; 62
	// Initializing list
	root_member = malloc(sizeof(members));
    4866:	8c e0       	ldi	r24, 0x0C	; 12
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    486e:	90 93 cb 04 	sts	0x04CB, r25
    4872:	80 93 ca 04 	sts	0x04CA, r24
	root_member -> NAME_STRUCT = NULL;
    4876:	e0 91 ca 04 	lds	r30, 0x04CA
    487a:	f0 91 cb 04 	lds	r31, 0x04CB
    487e:	11 82       	std	Z+1, r1	; 0x01
    4880:	10 82       	st	Z, r1
	root_member -> NEXT_STRUCT	= NULL;
    4882:	e0 91 ca 04 	lds	r30, 0x04CA
    4886:	f0 91 cb 04 	lds	r31, 0x04CB
    488a:	13 86       	std	Z+11, r1	; 0x0b
    488c:	12 86       	std	Z+10, r1	; 0x0a
	root_member -> ID_STRUCT = NULL;
    488e:	e0 91 ca 04 	lds	r30, 0x04CA
    4892:	f0 91 cb 04 	lds	r31, 0x04CB
    4896:	14 82       	std	Z+4, r1	; 0x04
    4898:	13 82       	std	Z+3, r1	; 0x03
	root_member -> INDEX_STRUCT = 0;
    489a:	e0 91 ca 04 	lds	r30, 0x04CA
    489e:	f0 91 cb 04 	lds	r31, 0x04CB
    48a2:	12 82       	std	Z+2, r1	; 0x02
	for(int i = 0; i < AVAILABLE_SHARES; i++)
    48a4:	1a 82       	std	Y+2, r1	; 0x02
    48a6:	19 82       	std	Y+1, r1	; 0x01
    48a8:	10 c0       	rjmp	.+32     	; 0x48ca <LinkedList_vidInitialize+0x6e>
	{
		root_member -> MEMBER_CARD_BOOKS[i] = 0;
    48aa:	20 91 ca 04 	lds	r18, 0x04CA
    48ae:	30 91 cb 04 	lds	r19, 0x04CB
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	9a 81       	ldd	r25, Y+2	; 0x02
    48b6:	82 0f       	add	r24, r18
    48b8:	93 1f       	adc	r25, r19
    48ba:	fc 01       	movw	r30, r24
    48bc:	35 96       	adiw	r30, 0x05	; 5
    48be:	10 82       	st	Z, r1
	root_member = malloc(sizeof(members));
	root_member -> NAME_STRUCT = NULL;
	root_member -> NEXT_STRUCT	= NULL;
	root_member -> ID_STRUCT = NULL;
	root_member -> INDEX_STRUCT = 0;
	for(int i = 0; i < AVAILABLE_SHARES; i++)
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	9a 81       	ldd	r25, Y+2	; 0x02
    48c4:	01 96       	adiw	r24, 0x01	; 1
    48c6:	9a 83       	std	Y+2, r25	; 0x02
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	9a 81       	ldd	r25, Y+2	; 0x02
    48ce:	85 30       	cpi	r24, 0x05	; 5
    48d0:	91 05       	cpc	r25, r1
    48d2:	5c f3       	brlt	.-42     	; 0x48aa <LinkedList_vidInitialize+0x4e>
	{
		root_member -> MEMBER_CARD_BOOKS[i] = 0;
	}
	
	ptr_member = root_member;
    48d4:	80 91 ca 04 	lds	r24, 0x04CA
    48d8:	90 91 cb 04 	lds	r25, 0x04CB
    48dc:	90 93 c9 04 	sts	0x04C9, r25
    48e0:	80 93 c8 04 	sts	0x04C8, r24
}
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	cf 91       	pop	r28
    48ea:	df 91       	pop	r29
    48ec:	08 95       	ret

000048ee <LinkedList_vidInsertion>:


/********************************* READY *********************************/
// Insertion for values from user
bool LinkedList_vidInsertion(char *id, char *name)			// if still, you can change to u8
{
    48ee:	df 93       	push	r29
    48f0:	cf 93       	push	r28
    48f2:	cd b7       	in	r28, 0x3d	; 61
    48f4:	de b7       	in	r29, 0x3e	; 62
    48f6:	6d 97       	sbiw	r28, 0x1d	; 29
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	f8 94       	cli
    48fc:	de bf       	out	0x3e, r29	; 62
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	9a 8f       	std	Y+26, r25	; 0x1a
    4904:	89 8f       	std	Y+25, r24	; 0x19
    4906:	7c 8f       	std	Y+28, r23	; 0x1c
    4908:	6b 8f       	std	Y+27, r22	; 0x1b
	int k = 0, i = 0, j = 0;
    490a:	18 8e       	std	Y+24, r1	; 0x18
    490c:	1f 8a       	std	Y+23, r1	; 0x17
    490e:	1e 8a       	std	Y+22, r1	; 0x16
    4910:	1d 8a       	std	Y+21, r1	; 0x15
    4912:	1c 8a       	std	Y+20, r1	; 0x14
    4914:	1b 8a       	std	Y+19, r1	; 0x13
	
	// Pointer to check for repeated IDs
	members *tmp_detect = NULL;
    4916:	1a 8a       	std	Y+18, r1	; 0x12
    4918:	19 8a       	std	Y+17, r1	; 0x11
	tmp_detect = search(id, 0);
    491a:	89 8d       	ldd	r24, Y+25	; 0x19
    491c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    491e:	60 e0       	ldi	r22, 0x00	; 0
    4920:	0e 94 56 26 	call	0x4cac	; 0x4cac <search>
    4924:	9a 8b       	std	Y+18, r25	; 0x12
    4926:	89 8b       	std	Y+17, r24	; 0x11
	
	// Invalid ID
	if(tmp_detect)
    4928:	89 89       	ldd	r24, Y+17	; 0x11
    492a:	9a 89       	ldd	r25, Y+18	; 0x12
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	31 f0       	breq	.+12     	; 0x493c <LinkedList_vidInsertion+0x4e>
	{
		LCD_String("ERROR_INSERTION!");
    4930:	81 e1       	ldi	r24, 0x11	; 17
    4932:	91 e0       	ldi	r25, 0x01	; 1
    4934:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		return false;
    4938:	1d 8e       	std	Y+29, r1	; 0x1d
    493a:	49 c1       	rjmp	.+658    	; 0x4bce <LinkedList_vidInsertion+0x2e0>
	}
	
	
	// Inserting sequence initialized
	ptr_member = root_member;
    493c:	80 91 ca 04 	lds	r24, 0x04CA
    4940:	90 91 cb 04 	lds	r25, 0x04CB
    4944:	90 93 c9 04 	sts	0x04C9, r25
    4948:	80 93 c8 04 	sts	0x04C8, r24
	members *tmp = malloc(sizeof(members));
    494c:	8c e0       	ldi	r24, 0x0C	; 12
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    4954:	98 8b       	std	Y+16, r25	; 0x10
    4956:	8f 87       	std	Y+15, r24	; 0x0f
	
	// For future reference
	NoOfMembers++;
    4958:	80 91 bb 04 	lds	r24, 0x04BB
    495c:	8f 5f       	subi	r24, 0xFF	; 255
    495e:	80 93 bb 04 	sts	0x04BB, r24
	INDEX_MEMBERS_GLOBAL++;
    4962:	80 91 bd 04 	lds	r24, 0x04BD
    4966:	8f 5f       	subi	r24, 0xFF	; 255
    4968:	80 93 bd 04 	sts	0x04BD, r24
    496c:	05 c0       	rjmp	.+10     	; 0x4978 <LinkedList_vidInsertion+0x8a>
	

	// Get member's name length
	while(name[k] != '\0')
	{
		k++;
    496e:	8f 89       	ldd	r24, Y+23	; 0x17
    4970:	98 8d       	ldd	r25, Y+24	; 0x18
    4972:	01 96       	adiw	r24, 0x01	; 1
    4974:	98 8f       	std	Y+24, r25	; 0x18
    4976:	8f 8b       	std	Y+23, r24	; 0x17
	INDEX_MEMBERS_GLOBAL++;

	

	// Get member's name length
	while(name[k] != '\0')
    4978:	2f 89       	ldd	r18, Y+23	; 0x17
    497a:	38 8d       	ldd	r19, Y+24	; 0x18
    497c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    497e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4980:	fc 01       	movw	r30, r24
    4982:	e2 0f       	add	r30, r18
    4984:	f3 1f       	adc	r31, r19
    4986:	80 81       	ld	r24, Z
    4988:	88 23       	and	r24, r24
    498a:	89 f7       	brne	.-30     	; 0x496e <LinkedList_vidInsertion+0x80>
	{
		k++;
	}
	
	tmp -> NAME_STRUCT = malloc(k+1 *sizeof(char));
    498c:	8f 89       	ldd	r24, Y+23	; 0x17
    498e:	98 8d       	ldd	r25, Y+24	; 0x18
    4990:	01 96       	adiw	r24, 0x01	; 1
    4992:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    4996:	ef 85       	ldd	r30, Y+15	; 0x0f
    4998:	f8 89       	ldd	r31, Y+16	; 0x10
    499a:	91 83       	std	Z+1, r25	; 0x01
    499c:	80 83       	st	Z, r24
    499e:	05 c0       	rjmp	.+10     	; 0x49aa <LinkedList_vidInsertion+0xbc>


	// Get member's id length
	while(id[j] != '\0')
	{
		j++;
    49a0:	8b 89       	ldd	r24, Y+19	; 0x13
    49a2:	9c 89       	ldd	r25, Y+20	; 0x14
    49a4:	01 96       	adiw	r24, 0x01	; 1
    49a6:	9c 8b       	std	Y+20, r25	; 0x14
    49a8:	8b 8b       	std	Y+19, r24	; 0x13
	
	tmp -> NAME_STRUCT = malloc(k+1 *sizeof(char));


	// Get member's id length
	while(id[j] != '\0')
    49aa:	2b 89       	ldd	r18, Y+19	; 0x13
    49ac:	3c 89       	ldd	r19, Y+20	; 0x14
    49ae:	89 8d       	ldd	r24, Y+25	; 0x19
    49b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    49b2:	fc 01       	movw	r30, r24
    49b4:	e2 0f       	add	r30, r18
    49b6:	f3 1f       	adc	r31, r19
    49b8:	80 81       	ld	r24, Z
    49ba:	88 23       	and	r24, r24
    49bc:	89 f7       	brne	.-30     	; 0x49a0 <LinkedList_vidInsertion+0xb2>
	{
		j++;
	}

	tmp -> ID_STRUCT = malloc(j+1 *sizeof(char));
    49be:	8b 89       	ldd	r24, Y+19	; 0x13
    49c0:	9c 89       	ldd	r25, Y+20	; 0x14
    49c2:	01 96       	adiw	r24, 0x01	; 1
    49c4:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    49c8:	ef 85       	ldd	r30, Y+15	; 0x0f
    49ca:	f8 89       	ldd	r31, Y+16	; 0x10
    49cc:	94 83       	std	Z+4, r25	; 0x04
    49ce:	83 83       	std	Z+3, r24	; 0x03


	// Insert patient details
	tmp -> NEXT_STRUCT = ptr_member -> NEXT_STRUCT;
    49d0:	e0 91 c8 04 	lds	r30, 0x04C8
    49d4:	f0 91 c9 04 	lds	r31, 0x04C9
    49d8:	82 85       	ldd	r24, Z+10	; 0x0a
    49da:	93 85       	ldd	r25, Z+11	; 0x0b
    49dc:	ef 85       	ldd	r30, Y+15	; 0x0f
    49de:	f8 89       	ldd	r31, Y+16	; 0x10
    49e0:	93 87       	std	Z+11, r25	; 0x0b
    49e2:	82 87       	std	Z+10, r24	; 0x0a

	tmp -> INDEX_STRUCT = INDEX_MEMBERS_GLOBAL;
    49e4:	80 91 bd 04 	lds	r24, 0x04BD
    49e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    49ea:	f8 89       	ldd	r31, Y+16	; 0x10
    49ec:	82 83       	std	Z+2, r24	; 0x02
	


	for(i = 0; i < k ; i++)
    49ee:	1e 8a       	std	Y+22, r1	; 0x16
    49f0:	1d 8a       	std	Y+21, r1	; 0x15
    49f2:	17 c0       	rjmp	.+46     	; 0x4a22 <LinkedList_vidInsertion+0x134>
	{
		tmp ->  NAME_STRUCT[i] = name[i];
    49f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    49f6:	f8 89       	ldd	r31, Y+16	; 0x10
    49f8:	20 81       	ld	r18, Z
    49fa:	31 81       	ldd	r19, Z+1	; 0x01
    49fc:	8d 89       	ldd	r24, Y+21	; 0x15
    49fe:	9e 89       	ldd	r25, Y+22	; 0x16
    4a00:	d9 01       	movw	r26, r18
    4a02:	a8 0f       	add	r26, r24
    4a04:	b9 1f       	adc	r27, r25
    4a06:	2d 89       	ldd	r18, Y+21	; 0x15
    4a08:	3e 89       	ldd	r19, Y+22	; 0x16
    4a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a0e:	fc 01       	movw	r30, r24
    4a10:	e2 0f       	add	r30, r18
    4a12:	f3 1f       	adc	r31, r19
    4a14:	80 81       	ld	r24, Z
    4a16:	8c 93       	st	X, r24

	tmp -> INDEX_STRUCT = INDEX_MEMBERS_GLOBAL;
	


	for(i = 0; i < k ; i++)
    4a18:	8d 89       	ldd	r24, Y+21	; 0x15
    4a1a:	9e 89       	ldd	r25, Y+22	; 0x16
    4a1c:	01 96       	adiw	r24, 0x01	; 1
    4a1e:	9e 8b       	std	Y+22, r25	; 0x16
    4a20:	8d 8b       	std	Y+21, r24	; 0x15
    4a22:	2d 89       	ldd	r18, Y+21	; 0x15
    4a24:	3e 89       	ldd	r19, Y+22	; 0x16
    4a26:	8f 89       	ldd	r24, Y+23	; 0x17
    4a28:	98 8d       	ldd	r25, Y+24	; 0x18
    4a2a:	28 17       	cp	r18, r24
    4a2c:	39 07       	cpc	r19, r25
    4a2e:	14 f3       	brlt	.-60     	; 0x49f4 <LinkedList_vidInsertion+0x106>
	{
		tmp ->  NAME_STRUCT[i] = name[i];
	}
	tmp ->  NAME_STRUCT[i] = '\0';
    4a30:	ef 85       	ldd	r30, Y+15	; 0x0f
    4a32:	f8 89       	ldd	r31, Y+16	; 0x10
    4a34:	20 81       	ld	r18, Z
    4a36:	31 81       	ldd	r19, Z+1	; 0x01
    4a38:	8d 89       	ldd	r24, Y+21	; 0x15
    4a3a:	9e 89       	ldd	r25, Y+22	; 0x16
    4a3c:	f9 01       	movw	r30, r18
    4a3e:	e8 0f       	add	r30, r24
    4a40:	f9 1f       	adc	r31, r25
    4a42:	10 82       	st	Z, r1
	

	for(i = 0; i < j ; i++)
    4a44:	1e 8a       	std	Y+22, r1	; 0x16
    4a46:	1d 8a       	std	Y+21, r1	; 0x15
    4a48:	17 c0       	rjmp	.+46     	; 0x4a78 <LinkedList_vidInsertion+0x18a>
	{
		tmp ->  ID_STRUCT[i] = id[i];
    4a4a:	ef 85       	ldd	r30, Y+15	; 0x0f
    4a4c:	f8 89       	ldd	r31, Y+16	; 0x10
    4a4e:	23 81       	ldd	r18, Z+3	; 0x03
    4a50:	34 81       	ldd	r19, Z+4	; 0x04
    4a52:	8d 89       	ldd	r24, Y+21	; 0x15
    4a54:	9e 89       	ldd	r25, Y+22	; 0x16
    4a56:	d9 01       	movw	r26, r18
    4a58:	a8 0f       	add	r26, r24
    4a5a:	b9 1f       	adc	r27, r25
    4a5c:	2d 89       	ldd	r18, Y+21	; 0x15
    4a5e:	3e 89       	ldd	r19, Y+22	; 0x16
    4a60:	89 8d       	ldd	r24, Y+25	; 0x19
    4a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a64:	fc 01       	movw	r30, r24
    4a66:	e2 0f       	add	r30, r18
    4a68:	f3 1f       	adc	r31, r19
    4a6a:	80 81       	ld	r24, Z
    4a6c:	8c 93       	st	X, r24
		tmp ->  NAME_STRUCT[i] = name[i];
	}
	tmp ->  NAME_STRUCT[i] = '\0';
	

	for(i = 0; i < j ; i++)
    4a6e:	8d 89       	ldd	r24, Y+21	; 0x15
    4a70:	9e 89       	ldd	r25, Y+22	; 0x16
    4a72:	01 96       	adiw	r24, 0x01	; 1
    4a74:	9e 8b       	std	Y+22, r25	; 0x16
    4a76:	8d 8b       	std	Y+21, r24	; 0x15
    4a78:	2d 89       	ldd	r18, Y+21	; 0x15
    4a7a:	3e 89       	ldd	r19, Y+22	; 0x16
    4a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a80:	28 17       	cp	r18, r24
    4a82:	39 07       	cpc	r19, r25
    4a84:	14 f3       	brlt	.-60     	; 0x4a4a <LinkedList_vidInsertion+0x15c>
	{
		tmp ->  ID_STRUCT[i] = id[i];
	}
	tmp ->  ID_STRUCT[i] = '\0';
    4a86:	ef 85       	ldd	r30, Y+15	; 0x0f
    4a88:	f8 89       	ldd	r31, Y+16	; 0x10
    4a8a:	23 81       	ldd	r18, Z+3	; 0x03
    4a8c:	34 81       	ldd	r19, Z+4	; 0x04
    4a8e:	8d 89       	ldd	r24, Y+21	; 0x15
    4a90:	9e 89       	ldd	r25, Y+22	; 0x16
    4a92:	f9 01       	movw	r30, r18
    4a94:	e8 0f       	add	r30, r24
    4a96:	f9 1f       	adc	r31, r25
    4a98:	10 82       	st	Z, r1


	for(i = 0; i < AVAILABLE_SHARES; i++)
    4a9a:	1e 8a       	std	Y+22, r1	; 0x16
    4a9c:	1d 8a       	std	Y+21, r1	; 0x15
    4a9e:	0e c0       	rjmp	.+28     	; 0x4abc <LinkedList_vidInsertion+0x1ce>
	{
		tmp -> MEMBER_CARD_BOOKS[i] = 0;
    4aa0:	2d 89       	ldd	r18, Y+21	; 0x15
    4aa2:	3e 89       	ldd	r19, Y+22	; 0x16
    4aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4aa6:	98 89       	ldd	r25, Y+16	; 0x10
    4aa8:	82 0f       	add	r24, r18
    4aaa:	93 1f       	adc	r25, r19
    4aac:	fc 01       	movw	r30, r24
    4aae:	35 96       	adiw	r30, 0x05	; 5
    4ab0:	10 82       	st	Z, r1
		tmp ->  ID_STRUCT[i] = id[i];
	}
	tmp ->  ID_STRUCT[i] = '\0';


	for(i = 0; i < AVAILABLE_SHARES; i++)
    4ab2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ab4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ab6:	01 96       	adiw	r24, 0x01	; 1
    4ab8:	9e 8b       	std	Y+22, r25	; 0x16
    4aba:	8d 8b       	std	Y+21, r24	; 0x15
    4abc:	8d 89       	ldd	r24, Y+21	; 0x15
    4abe:	9e 89       	ldd	r25, Y+22	; 0x16
    4ac0:	85 30       	cpi	r24, 0x05	; 5
    4ac2:	91 05       	cpc	r25, r1
    4ac4:	6c f3       	brlt	.-38     	; 0x4aa0 <LinkedList_vidInsertion+0x1b2>
		tmp -> MEMBER_CARD_BOOKS[i] = 0;
	}
	

	// Update list
	ptr_member -> NEXT_STRUCT = tmp;
    4ac6:	e0 91 c8 04 	lds	r30, 0x04C8
    4aca:	f0 91 c9 04 	lds	r31, 0x04C9
    4ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ad0:	98 89       	ldd	r25, Y+16	; 0x10
    4ad2:	93 87       	std	Z+11, r25	; 0x0b
    4ad4:	82 87       	std	Z+10, r24	; 0x0a

	// Indicate success
	LCD_String("MEMBER INSERTED");
    4ad6:	82 e2       	ldi	r24, 0x22	; 34
    4ad8:	91 e0       	ldi	r25, 0x01	; 1
    4ada:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	aa ef       	ldi	r26, 0xFA	; 250
    4ae4:	b3 e4       	ldi	r27, 0x43	; 67
    4ae6:	8b 87       	std	Y+11, r24	; 0x0b
    4ae8:	9c 87       	std	Y+12, r25	; 0x0c
    4aea:	ad 87       	std	Y+13, r26	; 0x0d
    4aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    4af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	4a ef       	ldi	r20, 0xFA	; 250
    4afc:	54 e4       	ldi	r21, 0x44	; 68
    4afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	8f 83       	std	Y+7, r24	; 0x07
    4b08:	98 87       	std	Y+8, r25	; 0x08
    4b0a:	a9 87       	std	Y+9, r26	; 0x09
    4b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b10:	78 85       	ldd	r23, Y+8	; 0x08
    4b12:	89 85       	ldd	r24, Y+9	; 0x09
    4b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	40 e8       	ldi	r20, 0x80	; 128
    4b1c:	5f e3       	ldi	r21, 0x3F	; 63
    4b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b22:	88 23       	and	r24, r24
    4b24:	2c f4       	brge	.+10     	; 0x4b30 <LinkedList_vidInsertion+0x242>
		__ticks = 1;
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	9e 83       	std	Y+6, r25	; 0x06
    4b2c:	8d 83       	std	Y+5, r24	; 0x05
    4b2e:	3f c0       	rjmp	.+126    	; 0x4bae <LinkedList_vidInsertion+0x2c0>
	else if (__tmp > 65535)
    4b30:	6f 81       	ldd	r22, Y+7	; 0x07
    4b32:	78 85       	ldd	r23, Y+8	; 0x08
    4b34:	89 85       	ldd	r24, Y+9	; 0x09
    4b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	3f ef       	ldi	r19, 0xFF	; 255
    4b3c:	4f e7       	ldi	r20, 0x7F	; 127
    4b3e:	57 e4       	ldi	r21, 0x47	; 71
    4b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b44:	18 16       	cp	r1, r24
    4b46:	4c f5       	brge	.+82     	; 0x4b9a <LinkedList_vidInsertion+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	40 e2       	ldi	r20, 0x20	; 32
    4b56:	51 e4       	ldi	r21, 0x41	; 65
    4b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	bc 01       	movw	r22, r24
    4b62:	cd 01       	movw	r24, r26
    4b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	9e 83       	std	Y+6, r25	; 0x06
    4b6e:	8d 83       	std	Y+5, r24	; 0x05
    4b70:	0f c0       	rjmp	.+30     	; 0x4b90 <LinkedList_vidInsertion+0x2a2>
    4b72:	88 ec       	ldi	r24, 0xC8	; 200
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	9c 83       	std	Y+4, r25	; 0x04
    4b78:	8b 83       	std	Y+3, r24	; 0x03
    4b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b7e:	01 97       	sbiw	r24, 0x01	; 1
    4b80:	f1 f7       	brne	.-4      	; 0x4b7e <LinkedList_vidInsertion+0x290>
    4b82:	9c 83       	std	Y+4, r25	; 0x04
    4b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b86:	8d 81       	ldd	r24, Y+5	; 0x05
    4b88:	9e 81       	ldd	r25, Y+6	; 0x06
    4b8a:	01 97       	sbiw	r24, 0x01	; 1
    4b8c:	9e 83       	std	Y+6, r25	; 0x06
    4b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b90:	8d 81       	ldd	r24, Y+5	; 0x05
    4b92:	9e 81       	ldd	r25, Y+6	; 0x06
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	69 f7       	brne	.-38     	; 0x4b72 <LinkedList_vidInsertion+0x284>
    4b98:	14 c0       	rjmp	.+40     	; 0x4bc2 <LinkedList_vidInsertion+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b9c:	78 85       	ldd	r23, Y+8	; 0x08
    4b9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	9e 83       	std	Y+6, r25	; 0x06
    4bac:	8d 83       	std	Y+5, r24	; 0x05
    4bae:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb2:	9a 83       	std	Y+2, r25	; 0x02
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	89 81       	ldd	r24, Y+1	; 0x01
    4bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	f1 f7       	brne	.-4      	; 0x4bba <LinkedList_vidInsertion+0x2cc>
    4bbe:	9a 83       	std	Y+2, r25	; 0x02
    4bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearOnDemand(1, 32);
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	60 e2       	ldi	r22, 0x20	; 32
    4bc6:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
	return true;
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    4bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4bd0:	6d 96       	adiw	r28, 0x1d	; 29
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	f8 94       	cli
    4bd6:	de bf       	out	0x3e, r29	; 62
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	cd bf       	out	0x3d, r28	; 61
    4bdc:	cf 91       	pop	r28
    4bde:	df 91       	pop	r29
    4be0:	08 95       	ret

00004be2 <LinkedList_u8DeleteEntire>:



/********************************* READY *********************************/
char LinkedList_u8DeleteEntire(void)
{
    4be2:	df 93       	push	r29
    4be4:	cf 93       	push	r28
    4be6:	00 d0       	rcall	.+0      	; 0x4be8 <LinkedList_u8DeleteEntire+0x6>
    4be8:	cd b7       	in	r28, 0x3d	; 61
    4bea:	de b7       	in	r29, 0x3e	; 62
	// Buffer to save the previous condition of ptr
	members *last_before_stack = NULL;
    4bec:	1a 82       	std	Y+2, r1	; 0x02
    4bee:	19 82       	std	Y+1, r1	; 0x01

	// Checking on the next field
	if(ptr_member -> NEXT_STRUCT != NULL)
    4bf0:	e0 91 c8 04 	lds	r30, 0x04C8
    4bf4:	f0 91 c9 04 	lds	r31, 0x04C9
    4bf8:	82 85       	ldd	r24, Z+10	; 0x0a
    4bfa:	93 85       	ldd	r25, Z+11	; 0x0b
    4bfc:	00 97       	sbiw	r24, 0x00	; 0
    4bfe:	c1 f0       	breq	.+48     	; 0x4c30 <LinkedList_u8DeleteEntire+0x4e>
	{
		last_before_stack = ptr_member;
    4c00:	80 91 c8 04 	lds	r24, 0x04C8
    4c04:	90 91 c9 04 	lds	r25, 0x04C9
    4c08:	9a 83       	std	Y+2, r25	; 0x02
    4c0a:	89 83       	std	Y+1, r24	; 0x01
		ptr_member = ptr_member -> NEXT_STRUCT;
    4c0c:	e0 91 c8 04 	lds	r30, 0x04C8
    4c10:	f0 91 c9 04 	lds	r31, 0x04C9
    4c14:	82 85       	ldd	r24, Z+10	; 0x0a
    4c16:	93 85       	ldd	r25, Z+11	; 0x0b
    4c18:	90 93 c9 04 	sts	0x04C9, r25
    4c1c:	80 93 c8 04 	sts	0x04C8, r24
		LinkedList_u8DeleteEntire();
    4c20:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <LinkedList_u8DeleteEntire>
		ptr_member = last_before_stack;
    4c24:	89 81       	ldd	r24, Y+1	; 0x01
    4c26:	9a 81       	ldd	r25, Y+2	; 0x02
    4c28:	90 93 c9 04 	sts	0x04C9, r25
    4c2c:	80 93 c8 04 	sts	0x04C8, r24
	}

	// free current node and return
	free(ptr_member);
    4c30:	80 91 c8 04 	lds	r24, 0x04C8
    4c34:	90 91 c9 04 	lds	r25, 0x04C9
    4c38:	0e 94 e6 33 	call	0x67cc	; 0x67cc <free>
	NoOfMembers = 0;
    4c3c:	10 92 bb 04 	sts	0x04BB, r1
	return 0;
    4c40:	80 e0       	ldi	r24, 0x00	; 0
}
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	cf 91       	pop	r28
    4c48:	df 91       	pop	r29
    4c4a:	08 95       	ret

00004c4c <LinkedList_vidRestart>:



void LinkedList_vidRestart (void)
{
    4c4c:	df 93       	push	r29
    4c4e:	cf 93       	push	r28
    4c50:	cd b7       	in	r28, 0x3d	; 61
    4c52:	de b7       	in	r29, 0x3e	; 62
	restart_vip();
    4c54:	0e 94 33 26 	call	0x4c66	; 0x4c66 <restart_vip>
	LinkedList_u8DeleteEntire();
    4c58:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <LinkedList_u8DeleteEntire>
	LinkedList_vidInitialize();
    4c5c:	0e 94 2e 24 	call	0x485c	; 0x485c <LinkedList_vidInitialize>
}
    4c60:	cf 91       	pop	r28
    4c62:	df 91       	pop	r29
    4c64:	08 95       	ret

00004c66 <restart_vip>:


void restart_vip(void)
{
    4c66:	df 93       	push	r29
    4c68:	cf 93       	push	r28
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
	ptr_member = root_member;
    4c6e:	80 91 ca 04 	lds	r24, 0x04CA
    4c72:	90 91 cb 04 	lds	r25, 0x04CB
    4c76:	90 93 c9 04 	sts	0x04C9, r25
    4c7a:	80 93 c8 04 	sts	0x04C8, r24
}
    4c7e:	cf 91       	pop	r28
    4c80:	df 91       	pop	r29
    4c82:	08 95       	ret

00004c84 <LinkedList_vidSearch>:

void LinkedList_vidSearch(char *ptr, char show)
{
    4c84:	df 93       	push	r29
    4c86:	cf 93       	push	r28
    4c88:	00 d0       	rcall	.+0      	; 0x4c8a <LinkedList_vidSearch+0x6>
    4c8a:	0f 92       	push	r0
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
    4c90:	9a 83       	std	Y+2, r25	; 0x02
    4c92:	89 83       	std	Y+1, r24	; 0x01
    4c94:	6b 83       	std	Y+3, r22	; 0x03
	search(ptr, show);
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	6b 81       	ldd	r22, Y+3	; 0x03
    4c9c:	0e 94 56 26 	call	0x4cac	; 0x4cac <search>
}
    4ca0:	0f 90       	pop	r0
    4ca2:	0f 90       	pop	r0
    4ca4:	0f 90       	pop	r0
    4ca6:	cf 91       	pop	r28
    4ca8:	df 91       	pop	r29
    4caa:	08 95       	ret

00004cac <search>:

// To search for a member
members *search (char *id, char OLD_BOOKS)
{
    4cac:	df 93       	push	r29
    4cae:	cf 93       	push	r28
    4cb0:	cd b7       	in	r28, 0x3d	; 61
    4cb2:	de b7       	in	r29, 0x3e	; 62
    4cb4:	69 97       	sbiw	r28, 0x19	; 25
    4cb6:	0f b6       	in	r0, 0x3f	; 63
    4cb8:	f8 94       	cli
    4cba:	de bf       	out	0x3e, r29	; 62
    4cbc:	0f be       	out	0x3f, r0	; 63
    4cbe:	cd bf       	out	0x3d, r28	; 61
    4cc0:	9e 8b       	std	Y+22, r25	; 0x16
    4cc2:	8d 8b       	std	Y+21, r24	; 0x15
    4cc4:	6f 8b       	std	Y+23, r22	; 0x17
	// Start after the root
	ptr_member = root_member -> NEXT_STRUCT;
    4cc6:	e0 91 ca 04 	lds	r30, 0x04CA
    4cca:	f0 91 cb 04 	lds	r31, 0x04CB
    4cce:	82 85       	ldd	r24, Z+10	; 0x0a
    4cd0:	93 85       	ldd	r25, Z+11	; 0x0b
    4cd2:	90 93 c9 04 	sts	0x04C9, r25
    4cd6:	80 93 c8 04 	sts	0x04C8, r24

	bool found = false;
    4cda:	1c 8a       	std	Y+20, r1	; 0x14
	
	members *tmp = NULL;
    4cdc:	1b 8a       	std	Y+19, r1	; 0x13
    4cde:	1a 8a       	std	Y+18, r1	; 0x12
	

	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfMembers; i++)
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	99 8b       	std	Y+17, r25	; 0x11
    4ce6:	88 8b       	std	Y+16, r24	; 0x10
    4ce8:	f7 c0       	rjmp	.+494    	; 0x4ed8 <search+0x22c>
	{
		if(CompareString(id, ptr_member -> ID_STRUCT))
    4cea:	e0 91 c8 04 	lds	r30, 0x04C8
    4cee:	f0 91 c9 04 	lds	r31, 0x04C9
    4cf2:	23 81       	ldd	r18, Z+3	; 0x03
    4cf4:	34 81       	ldd	r19, Z+4	; 0x04
    4cf6:	8d 89       	ldd	r24, Y+21	; 0x15
    4cf8:	9e 89       	ldd	r25, Y+22	; 0x16
    4cfa:	b9 01       	movw	r22, r18
    4cfc:	0e 94 a0 23 	call	0x4740	; 0x4740 <CompareString>
    4d00:	88 23       	and	r24, r24
    4d02:	09 f4       	brne	.+2      	; 0x4d06 <search+0x5a>
    4d04:	da c0       	rjmp	.+436    	; 0x4eba <search+0x20e>
		{
			// Write Member Name on LCD
			LCD_vidClearOnDemand(1, 32);
    4d06:	81 e0       	ldi	r24, 0x01	; 1
    4d08:	60 e2       	ldi	r22, 0x20	; 32
    4d0a:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
			LCD_String("NAME: ");
    4d0e:	82 e3       	ldi	r24, 0x32	; 50
    4d10:	91 e0       	ldi	r25, 0x01	; 1
    4d12:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_String(ptr_member -> NAME_STRUCT);
    4d16:	e0 91 c8 04 	lds	r30, 0x04C8
    4d1a:	f0 91 c9 04 	lds	r31, 0x04C9
    4d1e:	80 81       	ld	r24, Z
    4d20:	91 81       	ldd	r25, Z+1	; 0x01
    4d22:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			// Write Member ID on LCD
			LCD_vidGoTo(1, 2);
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	62 e0       	ldi	r22, 0x02	; 2
    4d2a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			LCD_String("ID: ");
    4d2e:	89 e3       	ldi	r24, 0x39	; 57
    4d30:	91 e0       	ldi	r25, 0x01	; 1
    4d32:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_String(ptr_member -> ID_STRUCT);
    4d36:	e0 91 c8 04 	lds	r30, 0x04C8
    4d3a:	f0 91 c9 04 	lds	r31, 0x04C9
    4d3e:	83 81       	ldd	r24, Z+3	; 0x03
    4d40:	94 81       	ldd	r25, Z+4	; 0x04
    4d42:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	aa ef       	ldi	r26, 0xFA	; 250
    4d4c:	b4 e4       	ldi	r27, 0x44	; 68
    4d4e:	8b 87       	std	Y+11, r24	; 0x0b
    4d50:	9c 87       	std	Y+12, r25	; 0x0c
    4d52:	ad 87       	std	Y+13, r26	; 0x0d
    4d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	4a ef       	ldi	r20, 0xFA	; 250
    4d64:	54 e4       	ldi	r21, 0x44	; 68
    4d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	8f 83       	std	Y+7, r24	; 0x07
    4d70:	98 87       	std	Y+8, r25	; 0x08
    4d72:	a9 87       	std	Y+9, r26	; 0x09
    4d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d76:	6f 81       	ldd	r22, Y+7	; 0x07
    4d78:	78 85       	ldd	r23, Y+8	; 0x08
    4d7a:	89 85       	ldd	r24, Y+9	; 0x09
    4d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7e:	20 e0       	ldi	r18, 0x00	; 0
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	40 e8       	ldi	r20, 0x80	; 128
    4d84:	5f e3       	ldi	r21, 0x3F	; 63
    4d86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d8a:	88 23       	and	r24, r24
    4d8c:	2c f4       	brge	.+10     	; 0x4d98 <search+0xec>
		__ticks = 1;
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	9e 83       	std	Y+6, r25	; 0x06
    4d94:	8d 83       	std	Y+5, r24	; 0x05
    4d96:	3f c0       	rjmp	.+126    	; 0x4e16 <search+0x16a>
	else if (__tmp > 65535)
    4d98:	6f 81       	ldd	r22, Y+7	; 0x07
    4d9a:	78 85       	ldd	r23, Y+8	; 0x08
    4d9c:	89 85       	ldd	r24, Y+9	; 0x09
    4d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	3f ef       	ldi	r19, 0xFF	; 255
    4da4:	4f e7       	ldi	r20, 0x7F	; 127
    4da6:	57 e4       	ldi	r21, 0x47	; 71
    4da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dac:	18 16       	cp	r1, r24
    4dae:	4c f5       	brge	.+82     	; 0x4e02 <search+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	40 e2       	ldi	r20, 0x20	; 32
    4dbe:	51 e4       	ldi	r21, 0x41	; 65
    4dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	bc 01       	movw	r22, r24
    4dca:	cd 01       	movw	r24, r26
    4dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	cb 01       	movw	r24, r22
    4dd4:	9e 83       	std	Y+6, r25	; 0x06
    4dd6:	8d 83       	std	Y+5, r24	; 0x05
    4dd8:	0f c0       	rjmp	.+30     	; 0x4df8 <search+0x14c>
    4dda:	88 ec       	ldi	r24, 0xC8	; 200
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	9c 83       	std	Y+4, r25	; 0x04
    4de0:	8b 83       	std	Y+3, r24	; 0x03
    4de2:	8b 81       	ldd	r24, Y+3	; 0x03
    4de4:	9c 81       	ldd	r25, Y+4	; 0x04
    4de6:	01 97       	sbiw	r24, 0x01	; 1
    4de8:	f1 f7       	brne	.-4      	; 0x4de6 <search+0x13a>
    4dea:	9c 83       	std	Y+4, r25	; 0x04
    4dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dee:	8d 81       	ldd	r24, Y+5	; 0x05
    4df0:	9e 81       	ldd	r25, Y+6	; 0x06
    4df2:	01 97       	sbiw	r24, 0x01	; 1
    4df4:	9e 83       	std	Y+6, r25	; 0x06
    4df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4df8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4dfc:	00 97       	sbiw	r24, 0x00	; 0
    4dfe:	69 f7       	brne	.-38     	; 0x4dda <search+0x12e>
    4e00:	14 c0       	rjmp	.+40     	; 0x4e2a <search+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e02:	6f 81       	ldd	r22, Y+7	; 0x07
    4e04:	78 85       	ldd	r23, Y+8	; 0x08
    4e06:	89 85       	ldd	r24, Y+9	; 0x09
    4e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	9e 83       	std	Y+6, r25	; 0x06
    4e14:	8d 83       	std	Y+5, r24	; 0x05
    4e16:	8d 81       	ldd	r24, Y+5	; 0x05
    4e18:	9e 81       	ldd	r25, Y+6	; 0x06
    4e1a:	9a 83       	std	Y+2, r25	; 0x02
    4e1c:	89 83       	std	Y+1, r24	; 0x01
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	9a 81       	ldd	r25, Y+2	; 0x02
    4e22:	01 97       	sbiw	r24, 0x01	; 1
    4e24:	f1 f7       	brne	.-4      	; 0x4e22 <search+0x176>
    4e26:	9a 83       	std	Y+2, r25	; 0x02
    4e28:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);

			// Write Member BOOK's on LCD
			LCD_vidClearOnDemand(1, 32);
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	60 e2       	ldi	r22, 0x20	; 32
    4e2e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

			// Don't show the books
			if(!OLD_BOOKS);
    4e32:	8f 89       	ldd	r24, Y+23	; 0x17
    4e34:	88 23       	and	r24, r24
    4e36:	a1 f1       	breq	.+104    	; 0x4ea0 <search+0x1f4>
			else
			{
				LCD_vidGoTo(1, 1);
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	61 e0       	ldi	r22, 0x01	; 1
    4e3c:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
				LCD_String("Borrowed BOOKS:");
    4e40:	8e e3       	ldi	r24, 0x3E	; 62
    4e42:	91 e0       	ldi	r25, 0x01	; 1
    4e44:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
				for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4e48:	1f 86       	std	Y+15, r1	; 0x0f
    4e4a:	27 c0       	rjmp	.+78     	; 0x4e9a <search+0x1ee>
				{
					LCD_vidGoTo(i + 1, 2);
    4e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e4e:	8f 5f       	subi	r24, 0xFF	; 255
    4e50:	62 e0       	ldi	r22, 0x02	; 2
    4e52:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>

					if(!ptr_member -> MEMBER_CARD_BOOKS[i]);
    4e56:	20 91 c8 04 	lds	r18, 0x04C8
    4e5a:	30 91 c9 04 	lds	r19, 0x04C9
    4e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e60:	88 2f       	mov	r24, r24
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	82 0f       	add	r24, r18
    4e66:	93 1f       	adc	r25, r19
    4e68:	fc 01       	movw	r30, r24
    4e6a:	35 96       	adiw	r30, 0x05	; 5
    4e6c:	80 81       	ld	r24, Z
    4e6e:	88 23       	and	r24, r24
    4e70:	89 f0       	breq	.+34     	; 0x4e94 <search+0x1e8>
					else
					{
						BOOKS_search(0, ptr_member -> MEMBER_CARD_BOOKS[i]);
    4e72:	20 91 c8 04 	lds	r18, 0x04C8
    4e76:	30 91 c9 04 	lds	r19, 0x04C9
    4e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e7c:	88 2f       	mov	r24, r24
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	82 0f       	add	r24, r18
    4e82:	93 1f       	adc	r25, r19
    4e84:	fc 01       	movw	r30, r24
    4e86:	35 96       	adiw	r30, 0x05	; 5
    4e88:	20 81       	ld	r18, Z
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	62 2f       	mov	r22, r18
    4e90:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <BOOKS_search>
			if(!OLD_BOOKS);
			else
			{
				LCD_vidGoTo(1, 1);
				LCD_String("Borrowed BOOKS:");
				for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e96:	8f 5f       	subi	r24, 0xFF	; 255
    4e98:	8f 87       	std	Y+15, r24	; 0x0f
    4e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e9c:	85 30       	cpi	r24, 0x05	; 5
    4e9e:	b0 f2       	brcs	.-84     	; 0x4e4c <search+0x1a0>
						BOOKS_search(0, ptr_member -> MEMBER_CARD_BOOKS[i]);
					}
				}
			}

			LCD_vidClearOnDemand(1, 32);
    4ea0:	81 e0       	ldi	r24, 0x01	; 1
    4ea2:	60 e2       	ldi	r22, 0x20	; 32
    4ea4:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
			found = true;
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	8c 8b       	std	Y+20, r24	; 0x14
			return  ptr_member;
    4eac:	80 91 c8 04 	lds	r24, 0x04C8
    4eb0:	90 91 c9 04 	lds	r25, 0x04C9
    4eb4:	99 8f       	std	Y+25, r25	; 0x19
    4eb6:	88 8f       	std	Y+24, r24	; 0x18
    4eb8:	37 c0       	rjmp	.+110    	; 0x4f28 <search+0x27c>

		}
		ptr_member = ptr_member -> NEXT_STRUCT;
    4eba:	e0 91 c8 04 	lds	r30, 0x04C8
    4ebe:	f0 91 c9 04 	lds	r31, 0x04C9
    4ec2:	82 85       	ldd	r24, Z+10	; 0x0a
    4ec4:	93 85       	ldd	r25, Z+11	; 0x0b
    4ec6:	90 93 c9 04 	sts	0x04C9, r25
    4eca:	80 93 c8 04 	sts	0x04C8, r24
	
	members *tmp = NULL;
	

	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfMembers; i++)
    4ece:	88 89       	ldd	r24, Y+16	; 0x10
    4ed0:	99 89       	ldd	r25, Y+17	; 0x11
    4ed2:	01 96       	adiw	r24, 0x01	; 1
    4ed4:	99 8b       	std	Y+17, r25	; 0x11
    4ed6:	88 8b       	std	Y+16, r24	; 0x10
    4ed8:	80 91 bb 04 	lds	r24, 0x04BB
    4edc:	28 2f       	mov	r18, r24
    4ede:	33 27       	eor	r19, r19
    4ee0:	27 fd       	sbrc	r18, 7
    4ee2:	30 95       	com	r19
    4ee4:	88 89       	ldd	r24, Y+16	; 0x10
    4ee6:	99 89       	ldd	r25, Y+17	; 0x11
    4ee8:	28 17       	cp	r18, r24
    4eea:	39 07       	cpc	r19, r25
    4eec:	0c f0       	brlt	.+2      	; 0x4ef0 <search+0x244>
    4eee:	fd ce       	rjmp	.-518    	; 0x4cea <search+0x3e>

		}
		ptr_member = ptr_member -> NEXT_STRUCT;
	}

	if(!found)
    4ef0:	8c 89       	ldd	r24, Y+20	; 0x14
    4ef2:	91 e0       	ldi	r25, 0x01	; 1
    4ef4:	89 27       	eor	r24, r25
    4ef6:	88 23       	and	r24, r24
    4ef8:	59 f0       	breq	.+22     	; 0x4f10 <search+0x264>
	{
		ptr_member = root_member;
    4efa:	80 91 ca 04 	lds	r24, 0x04CA
    4efe:	90 91 cb 04 	lds	r25, 0x04CB
    4f02:	90 93 c9 04 	sts	0x04C9, r25
    4f06:	80 93 c8 04 	sts	0x04C8, r24
		return NULL;
    4f0a:	19 8e       	std	Y+25, r1	; 0x19
    4f0c:	18 8e       	std	Y+24, r1	; 0x18
    4f0e:	0c c0       	rjmp	.+24     	; 0x4f28 <search+0x27c>
	}

	ptr_member = root_member;
    4f10:	80 91 ca 04 	lds	r24, 0x04CA
    4f14:	90 91 cb 04 	lds	r25, 0x04CB
    4f18:	90 93 c9 04 	sts	0x04C9, r25
    4f1c:	80 93 c8 04 	sts	0x04C8, r24
	return tmp;
    4f20:	8a 89       	ldd	r24, Y+18	; 0x12
    4f22:	9b 89       	ldd	r25, Y+19	; 0x13
    4f24:	99 8f       	std	Y+25, r25	; 0x19
    4f26:	88 8f       	std	Y+24, r24	; 0x18
    4f28:	88 8d       	ldd	r24, Y+24	; 0x18
    4f2a:	99 8d       	ldd	r25, Y+25	; 0x19
}
    4f2c:	69 96       	adiw	r28, 0x19	; 25
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	f8 94       	cli
    4f32:	de bf       	out	0x3e, r29	; 62
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	cd bf       	out	0x3d, r28	; 61
    4f38:	cf 91       	pop	r28
    4f3a:	df 91       	pop	r29
    4f3c:	08 95       	ret

00004f3e <Borrow_vid>:


// Borrow from books
void Borrow_vid(char *id, char *serial)
{
    4f3e:	df 93       	push	r29
    4f40:	cf 93       	push	r28
    4f42:	cd b7       	in	r28, 0x3d	; 61
    4f44:	de b7       	in	r29, 0x3e	; 62
    4f46:	c2 54       	subi	r28, 0x42	; 66
    4f48:	d0 40       	sbci	r29, 0x00	; 0
    4f4a:	0f b6       	in	r0, 0x3f	; 63
    4f4c:	f8 94       	cli
    4f4e:	de bf       	out	0x3e, r29	; 62
    4f50:	0f be       	out	0x3f, r0	; 63
    4f52:	cd bf       	out	0x3d, r28	; 61
    4f54:	fe 01       	movw	r30, r28
    4f56:	ff 96       	adiw	r30, 0x3f	; 63
    4f58:	91 83       	std	Z+1, r25	; 0x01
    4f5a:	80 83       	st	Z, r24
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	ef 5b       	subi	r30, 0xBF	; 191
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	71 83       	std	Z+1, r23	; 0x01
    4f64:	60 83       	st	Z, r22
	u8 B_flag = 0;
    4f66:	1e ae       	std	Y+62, r1	; 0x3e
	u8 index = 0;
    4f68:	1d ae       	std	Y+61, r1	; 0x3d
	bool valid_copies = false;
    4f6a:	1c ae       	std	Y+60, r1	; 0x3c
	
	// Search for member and don't show the old books
	members *tmp = search(id, 0);
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	ff 96       	adiw	r30, 0x3f	; 63
    4f70:	80 81       	ld	r24, Z
    4f72:	91 81       	ldd	r25, Z+1	; 0x01
    4f74:	60 e0       	ldi	r22, 0x00	; 0
    4f76:	0e 94 56 26 	call	0x4cac	; 0x4cac <search>
    4f7a:	9b af       	std	Y+59, r25	; 0x3b
    4f7c:	8a af       	std	Y+58, r24	; 0x3a
	
	// Search for the book via serial
	index = BOOKS_search(serial, 0);
    4f7e:	fe 01       	movw	r30, r28
    4f80:	ef 5b       	subi	r30, 0xBF	; 191
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	80 81       	ld	r24, Z
    4f86:	91 81       	ldd	r25, Z+1	; 0x01
    4f88:	60 e0       	ldi	r22, 0x00	; 0
    4f8a:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <BOOKS_search>
    4f8e:	8d af       	std	Y+61, r24	; 0x3d
	
	if(!tmp)
    4f90:	8a ad       	ldd	r24, Y+58	; 0x3a
    4f92:	9b ad       	ldd	r25, Y+59	; 0x3b
    4f94:	00 97       	sbiw	r24, 0x00	; 0
    4f96:	29 f4       	brne	.+10     	; 0x4fa2 <Borrow_vid+0x64>
	{
		// Invalid ID
		LCD_String("ERROR_ID!");
    4f98:	8e e4       	ldi	r24, 0x4E	; 78
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    4fa0:	28 c2       	rjmp	.+1104   	; 0x53f2 <Borrow_vid+0x4b4>
	}
	else
	{
		// Valid Serial 
		if( index != DoesNot_exist)
    4fa2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fa4:	88 23       	and	r24, r24
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <Borrow_vid+0x6c>
    4fa8:	2a c1       	rjmp	.+596    	; 0x51fe <Borrow_vid+0x2c0>
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    4faa:	19 ae       	std	Y+57, r1	; 0x39
    4fac:	23 c1       	rjmp	.+582    	; 0x51f4 <Borrow_vid+0x2b6>
			{
				if(tmp -> MEMBER_CARD_BOOKS[j] == 0)
    4fae:	89 ad       	ldd	r24, Y+57	; 0x39
    4fb0:	28 2f       	mov	r18, r24
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	8a ad       	ldd	r24, Y+58	; 0x3a
    4fb6:	9b ad       	ldd	r25, Y+59	; 0x3b
    4fb8:	82 0f       	add	r24, r18
    4fba:	93 1f       	adc	r25, r19
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	35 96       	adiw	r30, 0x05	; 5
    4fc0:	80 81       	ld	r24, Z
    4fc2:	88 23       	and	r24, r24
    4fc4:	09 f0       	breq	.+2      	; 0x4fc8 <Borrow_vid+0x8a>
    4fc6:	13 c1       	rjmp	.+550    	; 0x51ee <Borrow_vid+0x2b0>
				{		
					valid_copies = BOOKS_COPIES_DECAY();
    4fc8:	0e 94 69 23 	call	0x46d2	; 0x46d2 <BOOKS_COPIES_DECAY>
    4fcc:	8c af       	std	Y+60, r24	; 0x3c
					if(valid_copies)
    4fce:	8c ad       	ldd	r24, Y+60	; 0x3c
    4fd0:	88 23       	and	r24, r24
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <Borrow_vid+0x98>
    4fd4:	92 c0       	rjmp	.+292    	; 0x50fa <Borrow_vid+0x1bc>
					{
						// Borrow and submit in MEMBER_CARD_BOOKS[] with Book index in BOOKS list
						tmp -> MEMBER_CARD_BOOKS[j] = index;
    4fd6:	89 ad       	ldd	r24, Y+57	; 0x39
    4fd8:	28 2f       	mov	r18, r24
    4fda:	30 e0       	ldi	r19, 0x00	; 0
    4fdc:	8a ad       	ldd	r24, Y+58	; 0x3a
    4fde:	9b ad       	ldd	r25, Y+59	; 0x3b
    4fe0:	82 0f       	add	r24, r18
    4fe2:	93 1f       	adc	r25, r19
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	35 96       	adiw	r30, 0x05	; 5
    4fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fea:	80 83       	st	Z, r24

						LCD_String("BORROW -> SUCCESS:");
    4fec:	88 e5       	ldi	r24, 0x58	; 88
    4fee:	91 e0       	ldi	r25, 0x01	; 1
    4ff0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
						LCD_vidGoTo(1, 2);
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	62 e0       	ldi	r22, 0x02	; 2
    4ff8:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
						LCD_String("Copies - 1.");
    4ffc:	8b e6       	ldi	r24, 0x6B	; 107
    4ffe:	91 e0       	ldi	r25, 0x01	; 1
    5000:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	aa ef       	ldi	r26, 0xFA	; 250
    500a:	b4 e4       	ldi	r27, 0x44	; 68
    500c:	8d ab       	std	Y+53, r24	; 0x35
    500e:	9e ab       	std	Y+54, r25	; 0x36
    5010:	af ab       	std	Y+55, r26	; 0x37
    5012:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5014:	6d a9       	ldd	r22, Y+53	; 0x35
    5016:	7e a9       	ldd	r23, Y+54	; 0x36
    5018:	8f a9       	ldd	r24, Y+55	; 0x37
    501a:	98 ad       	ldd	r25, Y+56	; 0x38
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	4a ef       	ldi	r20, 0xFA	; 250
    5022:	54 e4       	ldi	r21, 0x44	; 68
    5024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	89 ab       	std	Y+49, r24	; 0x31
    502e:	9a ab       	std	Y+50, r25	; 0x32
    5030:	ab ab       	std	Y+51, r26	; 0x33
    5032:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5034:	69 a9       	ldd	r22, Y+49	; 0x31
    5036:	7a a9       	ldd	r23, Y+50	; 0x32
    5038:	8b a9       	ldd	r24, Y+51	; 0x33
    503a:	9c a9       	ldd	r25, Y+52	; 0x34
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	40 e8       	ldi	r20, 0x80	; 128
    5042:	5f e3       	ldi	r21, 0x3F	; 63
    5044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5048:	88 23       	and	r24, r24
    504a:	2c f4       	brge	.+10     	; 0x5056 <Borrow_vid+0x118>
		__ticks = 1;
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	98 ab       	std	Y+48, r25	; 0x30
    5052:	8f a7       	std	Y+47, r24	; 0x2f
    5054:	3f c0       	rjmp	.+126    	; 0x50d4 <Borrow_vid+0x196>
	else if (__tmp > 65535)
    5056:	69 a9       	ldd	r22, Y+49	; 0x31
    5058:	7a a9       	ldd	r23, Y+50	; 0x32
    505a:	8b a9       	ldd	r24, Y+51	; 0x33
    505c:	9c a9       	ldd	r25, Y+52	; 0x34
    505e:	20 e0       	ldi	r18, 0x00	; 0
    5060:	3f ef       	ldi	r19, 0xFF	; 255
    5062:	4f e7       	ldi	r20, 0x7F	; 127
    5064:	57 e4       	ldi	r21, 0x47	; 71
    5066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    506a:	18 16       	cp	r1, r24
    506c:	4c f5       	brge	.+82     	; 0x50c0 <Borrow_vid+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    506e:	6d a9       	ldd	r22, Y+53	; 0x35
    5070:	7e a9       	ldd	r23, Y+54	; 0x36
    5072:	8f a9       	ldd	r24, Y+55	; 0x37
    5074:	98 ad       	ldd	r25, Y+56	; 0x38
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	40 e2       	ldi	r20, 0x20	; 32
    507c:	51 e4       	ldi	r21, 0x41	; 65
    507e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	bc 01       	movw	r22, r24
    5088:	cd 01       	movw	r24, r26
    508a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	98 ab       	std	Y+48, r25	; 0x30
    5094:	8f a7       	std	Y+47, r24	; 0x2f
    5096:	0f c0       	rjmp	.+30     	; 0x50b6 <Borrow_vid+0x178>
    5098:	88 ec       	ldi	r24, 0xC8	; 200
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	9e a7       	std	Y+46, r25	; 0x2e
    509e:	8d a7       	std	Y+45, r24	; 0x2d
    50a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    50a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <Borrow_vid+0x166>
    50a8:	9e a7       	std	Y+46, r25	; 0x2e
    50aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    50ae:	98 a9       	ldd	r25, Y+48	; 0x30
    50b0:	01 97       	sbiw	r24, 0x01	; 1
    50b2:	98 ab       	std	Y+48, r25	; 0x30
    50b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    50b8:	98 a9       	ldd	r25, Y+48	; 0x30
    50ba:	00 97       	sbiw	r24, 0x00	; 0
    50bc:	69 f7       	brne	.-38     	; 0x5098 <Borrow_vid+0x15a>
    50be:	14 c0       	rjmp	.+40     	; 0x50e8 <Borrow_vid+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c0:	69 a9       	ldd	r22, Y+49	; 0x31
    50c2:	7a a9       	ldd	r23, Y+50	; 0x32
    50c4:	8b a9       	ldd	r24, Y+51	; 0x33
    50c6:	9c a9       	ldd	r25, Y+52	; 0x34
    50c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50cc:	dc 01       	movw	r26, r24
    50ce:	cb 01       	movw	r24, r22
    50d0:	98 ab       	std	Y+48, r25	; 0x30
    50d2:	8f a7       	std	Y+47, r24	; 0x2f
    50d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    50d6:	98 a9       	ldd	r25, Y+48	; 0x30
    50d8:	9c a7       	std	Y+44, r25	; 0x2c
    50da:	8b a7       	std	Y+43, r24	; 0x2b
    50dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    50de:	9c a5       	ldd	r25, Y+44	; 0x2c
    50e0:	01 97       	sbiw	r24, 0x01	; 1
    50e2:	f1 f7       	brne	.-4      	; 0x50e0 <Borrow_vid+0x1a2>
    50e4:	9c a7       	std	Y+44, r25	; 0x2c
    50e6:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);
						LCD_vidClearOnDemand(1, 32);
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	60 e2       	ldi	r22, 0x20	; 32
    50ec:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

						B_flag = 1;
    50f0:	81 e0       	ldi	r24, 0x01	; 1
    50f2:	8e af       	std	Y+62, r24	; 0x3e
						j = AVAILABLE_SHARES;					
    50f4:	85 e0       	ldi	r24, 0x05	; 5
    50f6:	89 af       	std	Y+57, r24	; 0x39
    50f8:	7a c0       	rjmp	.+244    	; 0x51ee <Borrow_vid+0x2b0>
					}
					else
					{
						LCD_String("Out of copies!");
    50fa:	87 e7       	ldi	r24, 0x77	; 119
    50fc:	91 e0       	ldi	r25, 0x01	; 1
    50fe:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5102:	80 e0       	ldi	r24, 0x00	; 0
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	aa ef       	ldi	r26, 0xFA	; 250
    5108:	b4 e4       	ldi	r27, 0x44	; 68
    510a:	8f a3       	std	Y+39, r24	; 0x27
    510c:	98 a7       	std	Y+40, r25	; 0x28
    510e:	a9 a7       	std	Y+41, r26	; 0x29
    5110:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5112:	6f a1       	ldd	r22, Y+39	; 0x27
    5114:	78 a5       	ldd	r23, Y+40	; 0x28
    5116:	89 a5       	ldd	r24, Y+41	; 0x29
    5118:	9a a5       	ldd	r25, Y+42	; 0x2a
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	4a ef       	ldi	r20, 0xFA	; 250
    5120:	54 e4       	ldi	r21, 0x44	; 68
    5122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	8b a3       	std	Y+35, r24	; 0x23
    512c:	9c a3       	std	Y+36, r25	; 0x24
    512e:	ad a3       	std	Y+37, r26	; 0x25
    5130:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5132:	6b a1       	ldd	r22, Y+35	; 0x23
    5134:	7c a1       	ldd	r23, Y+36	; 0x24
    5136:	8d a1       	ldd	r24, Y+37	; 0x25
    5138:	9e a1       	ldd	r25, Y+38	; 0x26
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	40 e8       	ldi	r20, 0x80	; 128
    5140:	5f e3       	ldi	r21, 0x3F	; 63
    5142:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5146:	88 23       	and	r24, r24
    5148:	2c f4       	brge	.+10     	; 0x5154 <Borrow_vid+0x216>
		__ticks = 1;
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	9a a3       	std	Y+34, r25	; 0x22
    5150:	89 a3       	std	Y+33, r24	; 0x21
    5152:	3f c0       	rjmp	.+126    	; 0x51d2 <Borrow_vid+0x294>
	else if (__tmp > 65535)
    5154:	6b a1       	ldd	r22, Y+35	; 0x23
    5156:	7c a1       	ldd	r23, Y+36	; 0x24
    5158:	8d a1       	ldd	r24, Y+37	; 0x25
    515a:	9e a1       	ldd	r25, Y+38	; 0x26
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	3f ef       	ldi	r19, 0xFF	; 255
    5160:	4f e7       	ldi	r20, 0x7F	; 127
    5162:	57 e4       	ldi	r21, 0x47	; 71
    5164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5168:	18 16       	cp	r1, r24
    516a:	4c f5       	brge	.+82     	; 0x51be <Borrow_vid+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    516c:	6f a1       	ldd	r22, Y+39	; 0x27
    516e:	78 a5       	ldd	r23, Y+40	; 0x28
    5170:	89 a5       	ldd	r24, Y+41	; 0x29
    5172:	9a a5       	ldd	r25, Y+42	; 0x2a
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	40 e2       	ldi	r20, 0x20	; 32
    517a:	51 e4       	ldi	r21, 0x41	; 65
    517c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	bc 01       	movw	r22, r24
    5186:	cd 01       	movw	r24, r26
    5188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    518c:	dc 01       	movw	r26, r24
    518e:	cb 01       	movw	r24, r22
    5190:	9a a3       	std	Y+34, r25	; 0x22
    5192:	89 a3       	std	Y+33, r24	; 0x21
    5194:	0f c0       	rjmp	.+30     	; 0x51b4 <Borrow_vid+0x276>
    5196:	88 ec       	ldi	r24, 0xC8	; 200
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	98 a3       	std	Y+32, r25	; 0x20
    519c:	8f 8f       	std	Y+31, r24	; 0x1f
    519e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51a0:	98 a1       	ldd	r25, Y+32	; 0x20
    51a2:	01 97       	sbiw	r24, 0x01	; 1
    51a4:	f1 f7       	brne	.-4      	; 0x51a2 <Borrow_vid+0x264>
    51a6:	98 a3       	std	Y+32, r25	; 0x20
    51a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51aa:	89 a1       	ldd	r24, Y+33	; 0x21
    51ac:	9a a1       	ldd	r25, Y+34	; 0x22
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	9a a3       	std	Y+34, r25	; 0x22
    51b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b4:	89 a1       	ldd	r24, Y+33	; 0x21
    51b6:	9a a1       	ldd	r25, Y+34	; 0x22
    51b8:	00 97       	sbiw	r24, 0x00	; 0
    51ba:	69 f7       	brne	.-38     	; 0x5196 <Borrow_vid+0x258>
    51bc:	14 c0       	rjmp	.+40     	; 0x51e6 <Borrow_vid+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51be:	6b a1       	ldd	r22, Y+35	; 0x23
    51c0:	7c a1       	ldd	r23, Y+36	; 0x24
    51c2:	8d a1       	ldd	r24, Y+37	; 0x25
    51c4:	9e a1       	ldd	r25, Y+38	; 0x26
    51c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ca:	dc 01       	movw	r26, r24
    51cc:	cb 01       	movw	r24, r22
    51ce:	9a a3       	std	Y+34, r25	; 0x22
    51d0:	89 a3       	std	Y+33, r24	; 0x21
    51d2:	89 a1       	ldd	r24, Y+33	; 0x21
    51d4:	9a a1       	ldd	r25, Y+34	; 0x22
    51d6:	9e 8f       	std	Y+30, r25	; 0x1e
    51d8:	8d 8f       	std	Y+29, r24	; 0x1d
    51da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51de:	01 97       	sbiw	r24, 0x01	; 1
    51e0:	f1 f7       	brne	.-4      	; 0x51de <Borrow_vid+0x2a0>
    51e2:	9e 8f       	std	Y+30, r25	; 0x1e
    51e4:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						LCD_vidClearOnDemand(1, 32);
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	60 e2       	ldi	r22, 0x20	; 32
    51ea:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
	{
		// Valid Serial 
		if( index != DoesNot_exist)
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    51ee:	89 ad       	ldd	r24, Y+57	; 0x39
    51f0:	8f 5f       	subi	r24, 0xFF	; 255
    51f2:	89 af       	std	Y+57, r24	; 0x39
    51f4:	89 ad       	ldd	r24, Y+57	; 0x39
    51f6:	85 30       	cpi	r24, 0x05	; 5
    51f8:	08 f4       	brcc	.+2      	; 0x51fc <Borrow_vid+0x2be>
    51fa:	d9 ce       	rjmp	.-590    	; 0x4fae <Borrow_vid+0x70>
    51fc:	7c c0       	rjmp	.+248    	; 0x52f6 <Borrow_vid+0x3b8>
				else;
			}
		}
		else
		{
			LCD_String("Invalid ISBN");
    51fe:	86 e8       	ldi	r24, 0x86	; 134
    5200:	91 e0       	ldi	r25, 0x01	; 1
    5202:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	aa ef       	ldi	r26, 0xFA	; 250
    520c:	b4 e4       	ldi	r27, 0x44	; 68
    520e:	89 8f       	std	Y+25, r24	; 0x19
    5210:	9a 8f       	std	Y+26, r25	; 0x1a
    5212:	ab 8f       	std	Y+27, r26	; 0x1b
    5214:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5216:	69 8d       	ldd	r22, Y+25	; 0x19
    5218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    521a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    521c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    521e:	20 e0       	ldi	r18, 0x00	; 0
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	4a ef       	ldi	r20, 0xFA	; 250
    5224:	54 e4       	ldi	r21, 0x44	; 68
    5226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	8d 8b       	std	Y+21, r24	; 0x15
    5230:	9e 8b       	std	Y+22, r25	; 0x16
    5232:	af 8b       	std	Y+23, r26	; 0x17
    5234:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5236:	6d 89       	ldd	r22, Y+21	; 0x15
    5238:	7e 89       	ldd	r23, Y+22	; 0x16
    523a:	8f 89       	ldd	r24, Y+23	; 0x17
    523c:	98 8d       	ldd	r25, Y+24	; 0x18
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	40 e8       	ldi	r20, 0x80	; 128
    5244:	5f e3       	ldi	r21, 0x3F	; 63
    5246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    524a:	88 23       	and	r24, r24
    524c:	2c f4       	brge	.+10     	; 0x5258 <Borrow_vid+0x31a>
		__ticks = 1;
    524e:	81 e0       	ldi	r24, 0x01	; 1
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	9c 8b       	std	Y+20, r25	; 0x14
    5254:	8b 8b       	std	Y+19, r24	; 0x13
    5256:	3f c0       	rjmp	.+126    	; 0x52d6 <Borrow_vid+0x398>
	else if (__tmp > 65535)
    5258:	6d 89       	ldd	r22, Y+21	; 0x15
    525a:	7e 89       	ldd	r23, Y+22	; 0x16
    525c:	8f 89       	ldd	r24, Y+23	; 0x17
    525e:	98 8d       	ldd	r25, Y+24	; 0x18
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	3f ef       	ldi	r19, 0xFF	; 255
    5264:	4f e7       	ldi	r20, 0x7F	; 127
    5266:	57 e4       	ldi	r21, 0x47	; 71
    5268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    526c:	18 16       	cp	r1, r24
    526e:	4c f5       	brge	.+82     	; 0x52c2 <Borrow_vid+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5270:	69 8d       	ldd	r22, Y+25	; 0x19
    5272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	40 e2       	ldi	r20, 0x20	; 32
    527e:	51 e4       	ldi	r21, 0x41	; 65
    5280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5284:	dc 01       	movw	r26, r24
    5286:	cb 01       	movw	r24, r22
    5288:	bc 01       	movw	r22, r24
    528a:	cd 01       	movw	r24, r26
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	9c 8b       	std	Y+20, r25	; 0x14
    5296:	8b 8b       	std	Y+19, r24	; 0x13
    5298:	0f c0       	rjmp	.+30     	; 0x52b8 <Borrow_vid+0x37a>
    529a:	88 ec       	ldi	r24, 0xC8	; 200
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	9a 8b       	std	Y+18, r25	; 0x12
    52a0:	89 8b       	std	Y+17, r24	; 0x11
    52a2:	89 89       	ldd	r24, Y+17	; 0x11
    52a4:	9a 89       	ldd	r25, Y+18	; 0x12
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <Borrow_vid+0x368>
    52aa:	9a 8b       	std	Y+18, r25	; 0x12
    52ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ae:	8b 89       	ldd	r24, Y+19	; 0x13
    52b0:	9c 89       	ldd	r25, Y+20	; 0x14
    52b2:	01 97       	sbiw	r24, 0x01	; 1
    52b4:	9c 8b       	std	Y+20, r25	; 0x14
    52b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52b8:	8b 89       	ldd	r24, Y+19	; 0x13
    52ba:	9c 89       	ldd	r25, Y+20	; 0x14
    52bc:	00 97       	sbiw	r24, 0x00	; 0
    52be:	69 f7       	brne	.-38     	; 0x529a <Borrow_vid+0x35c>
    52c0:	14 c0       	rjmp	.+40     	; 0x52ea <Borrow_vid+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52c2:	6d 89       	ldd	r22, Y+21	; 0x15
    52c4:	7e 89       	ldd	r23, Y+22	; 0x16
    52c6:	8f 89       	ldd	r24, Y+23	; 0x17
    52c8:	98 8d       	ldd	r25, Y+24	; 0x18
    52ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ce:	dc 01       	movw	r26, r24
    52d0:	cb 01       	movw	r24, r22
    52d2:	9c 8b       	std	Y+20, r25	; 0x14
    52d4:	8b 8b       	std	Y+19, r24	; 0x13
    52d6:	8b 89       	ldd	r24, Y+19	; 0x13
    52d8:	9c 89       	ldd	r25, Y+20	; 0x14
    52da:	98 8b       	std	Y+16, r25	; 0x10
    52dc:	8f 87       	std	Y+15, r24	; 0x0f
    52de:	8f 85       	ldd	r24, Y+15	; 0x0f
    52e0:	98 89       	ldd	r25, Y+16	; 0x10
    52e2:	01 97       	sbiw	r24, 0x01	; 1
    52e4:	f1 f7       	brne	.-4      	; 0x52e2 <Borrow_vid+0x3a4>
    52e6:	98 8b       	std	Y+16, r25	; 0x10
    52e8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    52ea:	81 e0       	ldi	r24, 0x01	; 1
    52ec:	60 e2       	ldi	r22, 0x20	; 32
    52ee:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
			B_flag = 1;
    52f2:	81 e0       	ldi	r24, 0x01	; 1
    52f4:	8e af       	std	Y+62, r24	; 0x3e
		}
		
		if(!B_flag)
    52f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    52f8:	88 23       	and	r24, r24
    52fa:	09 f0       	breq	.+2      	; 0x52fe <Borrow_vid+0x3c0>
    52fc:	7a c0       	rjmp	.+244    	; 0x53f2 <Borrow_vid+0x4b4>
		{
			LCD_String("Card_full");
    52fe:	83 e9       	ldi	r24, 0x93	; 147
    5300:	91 e0       	ldi	r25, 0x01	; 1
    5302:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5306:	80 e0       	ldi	r24, 0x00	; 0
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	aa ef       	ldi	r26, 0xFA	; 250
    530c:	b4 e4       	ldi	r27, 0x44	; 68
    530e:	8b 87       	std	Y+11, r24	; 0x0b
    5310:	9c 87       	std	Y+12, r25	; 0x0c
    5312:	ad 87       	std	Y+13, r26	; 0x0d
    5314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5316:	6b 85       	ldd	r22, Y+11	; 0x0b
    5318:	7c 85       	ldd	r23, Y+12	; 0x0c
    531a:	8d 85       	ldd	r24, Y+13	; 0x0d
    531c:	9e 85       	ldd	r25, Y+14	; 0x0e
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	4a ef       	ldi	r20, 0xFA	; 250
    5324:	54 e4       	ldi	r21, 0x44	; 68
    5326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    532a:	dc 01       	movw	r26, r24
    532c:	cb 01       	movw	r24, r22
    532e:	8f 83       	std	Y+7, r24	; 0x07
    5330:	98 87       	std	Y+8, r25	; 0x08
    5332:	a9 87       	std	Y+9, r26	; 0x09
    5334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5336:	6f 81       	ldd	r22, Y+7	; 0x07
    5338:	78 85       	ldd	r23, Y+8	; 0x08
    533a:	89 85       	ldd	r24, Y+9	; 0x09
    533c:	9a 85       	ldd	r25, Y+10	; 0x0a
    533e:	20 e0       	ldi	r18, 0x00	; 0
    5340:	30 e0       	ldi	r19, 0x00	; 0
    5342:	40 e8       	ldi	r20, 0x80	; 128
    5344:	5f e3       	ldi	r21, 0x3F	; 63
    5346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    534a:	88 23       	and	r24, r24
    534c:	2c f4       	brge	.+10     	; 0x5358 <Borrow_vid+0x41a>
		__ticks = 1;
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	9e 83       	std	Y+6, r25	; 0x06
    5354:	8d 83       	std	Y+5, r24	; 0x05
    5356:	3f c0       	rjmp	.+126    	; 0x53d6 <Borrow_vid+0x498>
	else if (__tmp > 65535)
    5358:	6f 81       	ldd	r22, Y+7	; 0x07
    535a:	78 85       	ldd	r23, Y+8	; 0x08
    535c:	89 85       	ldd	r24, Y+9	; 0x09
    535e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	3f ef       	ldi	r19, 0xFF	; 255
    5364:	4f e7       	ldi	r20, 0x7F	; 127
    5366:	57 e4       	ldi	r21, 0x47	; 71
    5368:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    536c:	18 16       	cp	r1, r24
    536e:	4c f5       	brge	.+82     	; 0x53c2 <Borrow_vid+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5370:	6b 85       	ldd	r22, Y+11	; 0x0b
    5372:	7c 85       	ldd	r23, Y+12	; 0x0c
    5374:	8d 85       	ldd	r24, Y+13	; 0x0d
    5376:	9e 85       	ldd	r25, Y+14	; 0x0e
    5378:	20 e0       	ldi	r18, 0x00	; 0
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	40 e2       	ldi	r20, 0x20	; 32
    537e:	51 e4       	ldi	r21, 0x41	; 65
    5380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5384:	dc 01       	movw	r26, r24
    5386:	cb 01       	movw	r24, r22
    5388:	bc 01       	movw	r22, r24
    538a:	cd 01       	movw	r24, r26
    538c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	9e 83       	std	Y+6, r25	; 0x06
    5396:	8d 83       	std	Y+5, r24	; 0x05
    5398:	0f c0       	rjmp	.+30     	; 0x53b8 <Borrow_vid+0x47a>
    539a:	88 ec       	ldi	r24, 0xC8	; 200
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	9c 83       	std	Y+4, r25	; 0x04
    53a0:	8b 83       	std	Y+3, r24	; 0x03
    53a2:	8b 81       	ldd	r24, Y+3	; 0x03
    53a4:	9c 81       	ldd	r25, Y+4	; 0x04
    53a6:	01 97       	sbiw	r24, 0x01	; 1
    53a8:	f1 f7       	brne	.-4      	; 0x53a6 <Borrow_vid+0x468>
    53aa:	9c 83       	std	Y+4, r25	; 0x04
    53ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53ae:	8d 81       	ldd	r24, Y+5	; 0x05
    53b0:	9e 81       	ldd	r25, Y+6	; 0x06
    53b2:	01 97       	sbiw	r24, 0x01	; 1
    53b4:	9e 83       	std	Y+6, r25	; 0x06
    53b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53b8:	8d 81       	ldd	r24, Y+5	; 0x05
    53ba:	9e 81       	ldd	r25, Y+6	; 0x06
    53bc:	00 97       	sbiw	r24, 0x00	; 0
    53be:	69 f7       	brne	.-38     	; 0x539a <Borrow_vid+0x45c>
    53c0:	14 c0       	rjmp	.+40     	; 0x53ea <Borrow_vid+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53c2:	6f 81       	ldd	r22, Y+7	; 0x07
    53c4:	78 85       	ldd	r23, Y+8	; 0x08
    53c6:	89 85       	ldd	r24, Y+9	; 0x09
    53c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	9e 83       	std	Y+6, r25	; 0x06
    53d4:	8d 83       	std	Y+5, r24	; 0x05
    53d6:	8d 81       	ldd	r24, Y+5	; 0x05
    53d8:	9e 81       	ldd	r25, Y+6	; 0x06
    53da:	9a 83       	std	Y+2, r25	; 0x02
    53dc:	89 83       	std	Y+1, r24	; 0x01
    53de:	89 81       	ldd	r24, Y+1	; 0x01
    53e0:	9a 81       	ldd	r25, Y+2	; 0x02
    53e2:	01 97       	sbiw	r24, 0x01	; 1
    53e4:	f1 f7       	brne	.-4      	; 0x53e2 <Borrow_vid+0x4a4>
    53e6:	9a 83       	std	Y+2, r25	; 0x02
    53e8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	60 e2       	ldi	r22, 0x20	; 32
    53ee:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		}
	}
}
    53f2:	ce 5b       	subi	r28, 0xBE	; 190
    53f4:	df 4f       	sbci	r29, 0xFF	; 255
    53f6:	0f b6       	in	r0, 0x3f	; 63
    53f8:	f8 94       	cli
    53fa:	de bf       	out	0x3e, r29	; 62
    53fc:	0f be       	out	0x3f, r0	; 63
    53fe:	cd bf       	out	0x3d, r28	; 61
    5400:	cf 91       	pop	r28
    5402:	df 91       	pop	r29
    5404:	08 95       	ret

00005406 <LinkedList_show>:


// Show all members
bool LinkedList_show(void)
{
    5406:	df 93       	push	r29
    5408:	cf 93       	push	r28
    540a:	cd b7       	in	r28, 0x3d	; 61
    540c:	de b7       	in	r29, 0x3e	; 62
    540e:	ea 97       	sbiw	r28, 0x3a	; 58
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
	ptr_member = root_member -> NEXT_STRUCT;
    541a:	e0 91 ca 04 	lds	r30, 0x04CA
    541e:	f0 91 cb 04 	lds	r31, 0x04CB
    5422:	82 85       	ldd	r24, Z+10	; 0x0a
    5424:	93 85       	ldd	r25, Z+11	; 0x0b
    5426:	90 93 c9 04 	sts	0x04C9, r25
    542a:	80 93 c8 04 	sts	0x04C8, r24

	LCD_vidGoTo(1, 1);
    542e:	81 e0       	ldi	r24, 0x01	; 1
    5430:	61 e0       	ldi	r22, 0x01	; 1
    5432:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
	LCD_String("NoOfMembers are:");
    5436:	8d e9       	ldi	r24, 0x9D	; 157
    5438:	91 e0       	ldi	r25, 0x01	; 1
    543a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
	LCD_vidGoTo(1, 2);
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	62 e0       	ldi	r22, 0x02	; 2
    5442:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
	LinkedList_vidCompanion(NoOfMembers);
    5446:	80 91 bb 04 	lds	r24, 0x04BB
    544a:	99 27       	eor	r25, r25
    544c:	87 fd       	sbrc	r24, 7
    544e:	90 95       	com	r25
    5450:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <LinkedList_vidCompanion>
    5454:	80 e0       	ldi	r24, 0x00	; 0
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	aa e7       	ldi	r26, 0x7A	; 122
    545a:	b4 e4       	ldi	r27, 0x44	; 68
    545c:	8d ab       	std	Y+53, r24	; 0x35
    545e:	9e ab       	std	Y+54, r25	; 0x36
    5460:	af ab       	std	Y+55, r26	; 0x37
    5462:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5464:	6d a9       	ldd	r22, Y+53	; 0x35
    5466:	7e a9       	ldd	r23, Y+54	; 0x36
    5468:	8f a9       	ldd	r24, Y+55	; 0x37
    546a:	98 ad       	ldd	r25, Y+56	; 0x38
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	4a ef       	ldi	r20, 0xFA	; 250
    5472:	54 e4       	ldi	r21, 0x44	; 68
    5474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	89 ab       	std	Y+49, r24	; 0x31
    547e:	9a ab       	std	Y+50, r25	; 0x32
    5480:	ab ab       	std	Y+51, r26	; 0x33
    5482:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5484:	69 a9       	ldd	r22, Y+49	; 0x31
    5486:	7a a9       	ldd	r23, Y+50	; 0x32
    5488:	8b a9       	ldd	r24, Y+51	; 0x33
    548a:	9c a9       	ldd	r25, Y+52	; 0x34
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	40 e8       	ldi	r20, 0x80	; 128
    5492:	5f e3       	ldi	r21, 0x3F	; 63
    5494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5498:	88 23       	and	r24, r24
    549a:	2c f4       	brge	.+10     	; 0x54a6 <LinkedList_show+0xa0>
		__ticks = 1;
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	98 ab       	std	Y+48, r25	; 0x30
    54a2:	8f a7       	std	Y+47, r24	; 0x2f
    54a4:	3f c0       	rjmp	.+126    	; 0x5524 <LinkedList_show+0x11e>
	else if (__tmp > 65535)
    54a6:	69 a9       	ldd	r22, Y+49	; 0x31
    54a8:	7a a9       	ldd	r23, Y+50	; 0x32
    54aa:	8b a9       	ldd	r24, Y+51	; 0x33
    54ac:	9c a9       	ldd	r25, Y+52	; 0x34
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	3f ef       	ldi	r19, 0xFF	; 255
    54b2:	4f e7       	ldi	r20, 0x7F	; 127
    54b4:	57 e4       	ldi	r21, 0x47	; 71
    54b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54ba:	18 16       	cp	r1, r24
    54bc:	4c f5       	brge	.+82     	; 0x5510 <LinkedList_show+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54be:	6d a9       	ldd	r22, Y+53	; 0x35
    54c0:	7e a9       	ldd	r23, Y+54	; 0x36
    54c2:	8f a9       	ldd	r24, Y+55	; 0x37
    54c4:	98 ad       	ldd	r25, Y+56	; 0x38
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	40 e2       	ldi	r20, 0x20	; 32
    54cc:	51 e4       	ldi	r21, 0x41	; 65
    54ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d2:	dc 01       	movw	r26, r24
    54d4:	cb 01       	movw	r24, r22
    54d6:	bc 01       	movw	r22, r24
    54d8:	cd 01       	movw	r24, r26
    54da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	98 ab       	std	Y+48, r25	; 0x30
    54e4:	8f a7       	std	Y+47, r24	; 0x2f
    54e6:	0f c0       	rjmp	.+30     	; 0x5506 <LinkedList_show+0x100>
    54e8:	88 ec       	ldi	r24, 0xC8	; 200
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	9e a7       	std	Y+46, r25	; 0x2e
    54ee:	8d a7       	std	Y+45, r24	; 0x2d
    54f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    54f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    54f4:	01 97       	sbiw	r24, 0x01	; 1
    54f6:	f1 f7       	brne	.-4      	; 0x54f4 <LinkedList_show+0xee>
    54f8:	9e a7       	std	Y+46, r25	; 0x2e
    54fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    54fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5500:	01 97       	sbiw	r24, 0x01	; 1
    5502:	98 ab       	std	Y+48, r25	; 0x30
    5504:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5506:	8f a5       	ldd	r24, Y+47	; 0x2f
    5508:	98 a9       	ldd	r25, Y+48	; 0x30
    550a:	00 97       	sbiw	r24, 0x00	; 0
    550c:	69 f7       	brne	.-38     	; 0x54e8 <LinkedList_show+0xe2>
    550e:	14 c0       	rjmp	.+40     	; 0x5538 <LinkedList_show+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5510:	69 a9       	ldd	r22, Y+49	; 0x31
    5512:	7a a9       	ldd	r23, Y+50	; 0x32
    5514:	8b a9       	ldd	r24, Y+51	; 0x33
    5516:	9c a9       	ldd	r25, Y+52	; 0x34
    5518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	98 ab       	std	Y+48, r25	; 0x30
    5522:	8f a7       	std	Y+47, r24	; 0x2f
    5524:	8f a5       	ldd	r24, Y+47	; 0x2f
    5526:	98 a9       	ldd	r25, Y+48	; 0x30
    5528:	9c a7       	std	Y+44, r25	; 0x2c
    552a:	8b a7       	std	Y+43, r24	; 0x2b
    552c:	8b a5       	ldd	r24, Y+43	; 0x2b
    552e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5530:	01 97       	sbiw	r24, 0x01	; 1
    5532:	f1 f7       	brne	.-4      	; 0x5530 <LinkedList_show+0x12a>
    5534:	9c a7       	std	Y+44, r25	; 0x2c
    5536:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_vidClearOnDemand(1, 32);
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	60 e2       	ldi	r22, 0x20	; 32
    553c:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>


	// Only root is no valid list
	if(!ptr_member)
    5540:	80 91 c8 04 	lds	r24, 0x04C8
    5544:	90 91 c9 04 	lds	r25, 0x04C9
    5548:	00 97       	sbiw	r24, 0x00	; 0
    554a:	09 f0       	breq	.+2      	; 0x554e <LinkedList_show+0x148>
    554c:	84 c0       	rjmp	.+264    	; 0x5656 <LinkedList_show+0x250>
	{
		LCD_String("NO Members");
    554e:	8e ea       	ldi	r24, 0xAE	; 174
    5550:	91 e0       	ldi	r25, 0x01	; 1
    5552:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5556:	80 e0       	ldi	r24, 0x00	; 0
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	aa ef       	ldi	r26, 0xFA	; 250
    555c:	b4 e4       	ldi	r27, 0x44	; 68
    555e:	8f a3       	std	Y+39, r24	; 0x27
    5560:	98 a7       	std	Y+40, r25	; 0x28
    5562:	a9 a7       	std	Y+41, r26	; 0x29
    5564:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5566:	6f a1       	ldd	r22, Y+39	; 0x27
    5568:	78 a5       	ldd	r23, Y+40	; 0x28
    556a:	89 a5       	ldd	r24, Y+41	; 0x29
    556c:	9a a5       	ldd	r25, Y+42	; 0x2a
    556e:	20 e0       	ldi	r18, 0x00	; 0
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	4a ef       	ldi	r20, 0xFA	; 250
    5574:	54 e4       	ldi	r21, 0x44	; 68
    5576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    557a:	dc 01       	movw	r26, r24
    557c:	cb 01       	movw	r24, r22
    557e:	8b a3       	std	Y+35, r24	; 0x23
    5580:	9c a3       	std	Y+36, r25	; 0x24
    5582:	ad a3       	std	Y+37, r26	; 0x25
    5584:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5586:	6b a1       	ldd	r22, Y+35	; 0x23
    5588:	7c a1       	ldd	r23, Y+36	; 0x24
    558a:	8d a1       	ldd	r24, Y+37	; 0x25
    558c:	9e a1       	ldd	r25, Y+38	; 0x26
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e8       	ldi	r20, 0x80	; 128
    5594:	5f e3       	ldi	r21, 0x3F	; 63
    5596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    559a:	88 23       	and	r24, r24
    559c:	2c f4       	brge	.+10     	; 0x55a8 <LinkedList_show+0x1a2>
		__ticks = 1;
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	9a a3       	std	Y+34, r25	; 0x22
    55a4:	89 a3       	std	Y+33, r24	; 0x21
    55a6:	3f c0       	rjmp	.+126    	; 0x5626 <LinkedList_show+0x220>
	else if (__tmp > 65535)
    55a8:	6b a1       	ldd	r22, Y+35	; 0x23
    55aa:	7c a1       	ldd	r23, Y+36	; 0x24
    55ac:	8d a1       	ldd	r24, Y+37	; 0x25
    55ae:	9e a1       	ldd	r25, Y+38	; 0x26
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	3f ef       	ldi	r19, 0xFF	; 255
    55b4:	4f e7       	ldi	r20, 0x7F	; 127
    55b6:	57 e4       	ldi	r21, 0x47	; 71
    55b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55bc:	18 16       	cp	r1, r24
    55be:	4c f5       	brge	.+82     	; 0x5612 <LinkedList_show+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c0:	6f a1       	ldd	r22, Y+39	; 0x27
    55c2:	78 a5       	ldd	r23, Y+40	; 0x28
    55c4:	89 a5       	ldd	r24, Y+41	; 0x29
    55c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	40 e2       	ldi	r20, 0x20	; 32
    55ce:	51 e4       	ldi	r21, 0x41	; 65
    55d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	bc 01       	movw	r22, r24
    55da:	cd 01       	movw	r24, r26
    55dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	9a a3       	std	Y+34, r25	; 0x22
    55e6:	89 a3       	std	Y+33, r24	; 0x21
    55e8:	0f c0       	rjmp	.+30     	; 0x5608 <LinkedList_show+0x202>
    55ea:	88 ec       	ldi	r24, 0xC8	; 200
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	98 a3       	std	Y+32, r25	; 0x20
    55f0:	8f 8f       	std	Y+31, r24	; 0x1f
    55f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55f4:	98 a1       	ldd	r25, Y+32	; 0x20
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	f1 f7       	brne	.-4      	; 0x55f6 <LinkedList_show+0x1f0>
    55fa:	98 a3       	std	Y+32, r25	; 0x20
    55fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55fe:	89 a1       	ldd	r24, Y+33	; 0x21
    5600:	9a a1       	ldd	r25, Y+34	; 0x22
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	9a a3       	std	Y+34, r25	; 0x22
    5606:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5608:	89 a1       	ldd	r24, Y+33	; 0x21
    560a:	9a a1       	ldd	r25, Y+34	; 0x22
    560c:	00 97       	sbiw	r24, 0x00	; 0
    560e:	69 f7       	brne	.-38     	; 0x55ea <LinkedList_show+0x1e4>
    5610:	14 c0       	rjmp	.+40     	; 0x563a <LinkedList_show+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5612:	6b a1       	ldd	r22, Y+35	; 0x23
    5614:	7c a1       	ldd	r23, Y+36	; 0x24
    5616:	8d a1       	ldd	r24, Y+37	; 0x25
    5618:	9e a1       	ldd	r25, Y+38	; 0x26
    561a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    561e:	dc 01       	movw	r26, r24
    5620:	cb 01       	movw	r24, r22
    5622:	9a a3       	std	Y+34, r25	; 0x22
    5624:	89 a3       	std	Y+33, r24	; 0x21
    5626:	89 a1       	ldd	r24, Y+33	; 0x21
    5628:	9a a1       	ldd	r25, Y+34	; 0x22
    562a:	9e 8f       	std	Y+30, r25	; 0x1e
    562c:	8d 8f       	std	Y+29, r24	; 0x1d
    562e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5632:	01 97       	sbiw	r24, 0x01	; 1
    5634:	f1 f7       	brne	.-4      	; 0x5632 <LinkedList_show+0x22c>
    5636:	9e 8f       	std	Y+30, r25	; 0x1e
    5638:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    563a:	81 e0       	ldi	r24, 0x01	; 1
    563c:	60 e2       	ldi	r22, 0x20	; 32
    563e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		ptr_member = root_member;
    5642:	80 91 ca 04 	lds	r24, 0x04CA
    5646:	90 91 cb 04 	lds	r25, 0x04CB
    564a:	90 93 c9 04 	sts	0x04C9, r25
    564e:	80 93 c8 04 	sts	0x04C8, r24
		return false;
    5652:	1a ae       	std	Y+58, r1	; 0x3a
    5654:	48 c1       	rjmp	.+656    	; 0x58e6 <LinkedList_show+0x4e0>
	}


	do
	{
		LCD_vidGoTo(1, 2);
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	62 e0       	ldi	r22, 0x02	; 2
    565a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		LCD_String("MEMB_ID:");
    565e:	89 eb       	ldi	r24, 0xB9	; 185
    5660:	91 e0       	ldi	r25, 0x01	; 1
    5662:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		LCD_String(ptr_member -> ID_STRUCT);
    5666:	e0 91 c8 04 	lds	r30, 0x04C8
    566a:	f0 91 c9 04 	lds	r31, 0x04C9
    566e:	83 81       	ldd	r24, Z+3	; 0x03
    5670:	94 81       	ldd	r25, Z+4	; 0x04
    5672:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

		LCD_vidGoTo(1, 1);
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	61 e0       	ldi	r22, 0x01	; 1
    567a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		LCD_String("MEMB_NAME:");
    567e:	82 ec       	ldi	r24, 0xC2	; 194
    5680:	91 e0       	ldi	r25, 0x01	; 1
    5682:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		LCD_String(ptr_member -> NAME_STRUCT);
    5686:	e0 91 c8 04 	lds	r30, 0x04C8
    568a:	f0 91 c9 04 	lds	r31, 0x04C9
    568e:	80 81       	ld	r24, Z
    5690:	91 81       	ldd	r25, Z+1	; 0x01
    5692:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	aa ef       	ldi	r26, 0xFA	; 250
    569c:	b4 e4       	ldi	r27, 0x44	; 68
    569e:	89 8f       	std	Y+25, r24	; 0x19
    56a0:	9a 8f       	std	Y+26, r25	; 0x1a
    56a2:	ab 8f       	std	Y+27, r26	; 0x1b
    56a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a6:	69 8d       	ldd	r22, Y+25	; 0x19
    56a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56ae:	20 e0       	ldi	r18, 0x00	; 0
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	4a ef       	ldi	r20, 0xFA	; 250
    56b4:	54 e4       	ldi	r21, 0x44	; 68
    56b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	8d 8b       	std	Y+21, r24	; 0x15
    56c0:	9e 8b       	std	Y+22, r25	; 0x16
    56c2:	af 8b       	std	Y+23, r26	; 0x17
    56c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56c6:	6d 89       	ldd	r22, Y+21	; 0x15
    56c8:	7e 89       	ldd	r23, Y+22	; 0x16
    56ca:	8f 89       	ldd	r24, Y+23	; 0x17
    56cc:	98 8d       	ldd	r25, Y+24	; 0x18
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	40 e8       	ldi	r20, 0x80	; 128
    56d4:	5f e3       	ldi	r21, 0x3F	; 63
    56d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56da:	88 23       	and	r24, r24
    56dc:	2c f4       	brge	.+10     	; 0x56e8 <LinkedList_show+0x2e2>
		__ticks = 1;
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	9c 8b       	std	Y+20, r25	; 0x14
    56e4:	8b 8b       	std	Y+19, r24	; 0x13
    56e6:	3f c0       	rjmp	.+126    	; 0x5766 <LinkedList_show+0x360>
	else if (__tmp > 65535)
    56e8:	6d 89       	ldd	r22, Y+21	; 0x15
    56ea:	7e 89       	ldd	r23, Y+22	; 0x16
    56ec:	8f 89       	ldd	r24, Y+23	; 0x17
    56ee:	98 8d       	ldd	r25, Y+24	; 0x18
    56f0:	20 e0       	ldi	r18, 0x00	; 0
    56f2:	3f ef       	ldi	r19, 0xFF	; 255
    56f4:	4f e7       	ldi	r20, 0x7F	; 127
    56f6:	57 e4       	ldi	r21, 0x47	; 71
    56f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56fc:	18 16       	cp	r1, r24
    56fe:	4c f5       	brge	.+82     	; 0x5752 <LinkedList_show+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5700:	69 8d       	ldd	r22, Y+25	; 0x19
    5702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	40 e2       	ldi	r20, 0x20	; 32
    570e:	51 e4       	ldi	r21, 0x41	; 65
    5710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5714:	dc 01       	movw	r26, r24
    5716:	cb 01       	movw	r24, r22
    5718:	bc 01       	movw	r22, r24
    571a:	cd 01       	movw	r24, r26
    571c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5720:	dc 01       	movw	r26, r24
    5722:	cb 01       	movw	r24, r22
    5724:	9c 8b       	std	Y+20, r25	; 0x14
    5726:	8b 8b       	std	Y+19, r24	; 0x13
    5728:	0f c0       	rjmp	.+30     	; 0x5748 <LinkedList_show+0x342>
    572a:	88 ec       	ldi	r24, 0xC8	; 200
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	9a 8b       	std	Y+18, r25	; 0x12
    5730:	89 8b       	std	Y+17, r24	; 0x11
    5732:	89 89       	ldd	r24, Y+17	; 0x11
    5734:	9a 89       	ldd	r25, Y+18	; 0x12
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	f1 f7       	brne	.-4      	; 0x5736 <LinkedList_show+0x330>
    573a:	9a 8b       	std	Y+18, r25	; 0x12
    573c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    573e:	8b 89       	ldd	r24, Y+19	; 0x13
    5740:	9c 89       	ldd	r25, Y+20	; 0x14
    5742:	01 97       	sbiw	r24, 0x01	; 1
    5744:	9c 8b       	std	Y+20, r25	; 0x14
    5746:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5748:	8b 89       	ldd	r24, Y+19	; 0x13
    574a:	9c 89       	ldd	r25, Y+20	; 0x14
    574c:	00 97       	sbiw	r24, 0x00	; 0
    574e:	69 f7       	brne	.-38     	; 0x572a <LinkedList_show+0x324>
    5750:	14 c0       	rjmp	.+40     	; 0x577a <LinkedList_show+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5752:	6d 89       	ldd	r22, Y+21	; 0x15
    5754:	7e 89       	ldd	r23, Y+22	; 0x16
    5756:	8f 89       	ldd	r24, Y+23	; 0x17
    5758:	98 8d       	ldd	r25, Y+24	; 0x18
    575a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    575e:	dc 01       	movw	r26, r24
    5760:	cb 01       	movw	r24, r22
    5762:	9c 8b       	std	Y+20, r25	; 0x14
    5764:	8b 8b       	std	Y+19, r24	; 0x13
    5766:	8b 89       	ldd	r24, Y+19	; 0x13
    5768:	9c 89       	ldd	r25, Y+20	; 0x14
    576a:	98 8b       	std	Y+16, r25	; 0x10
    576c:	8f 87       	std	Y+15, r24	; 0x0f
    576e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5770:	98 89       	ldd	r25, Y+16	; 0x10
    5772:	01 97       	sbiw	r24, 0x01	; 1
    5774:	f1 f7       	brne	.-4      	; 0x5772 <LinkedList_show+0x36c>
    5776:	98 8b       	std	Y+16, r25	; 0x10
    5778:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    577a:	81 e0       	ldi	r24, 0x01	; 1
    577c:	60 e2       	ldi	r22, 0x20	; 32
    577e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

		LCD_String("ID_BOOKS:");
    5782:	8d ec       	ldi	r24, 0xCD	; 205
    5784:	91 e0       	ldi	r25, 0x01	; 1
    5786:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    578a:	19 ae       	std	Y+57, r1	; 0x39
    578c:	18 c0       	rjmp	.+48     	; 0x57be <LinkedList_show+0x3b8>
		{
			LCD_vidGoTo(i + 1, 2);
    578e:	89 ad       	ldd	r24, Y+57	; 0x39
    5790:	8f 5f       	subi	r24, 0xFF	; 255
    5792:	62 e0       	ldi	r22, 0x02	; 2
    5794:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			LinkedList_vidCompanion(ptr_member -> MEMBER_CARD_BOOKS[i]);
    5798:	20 91 c8 04 	lds	r18, 0x04C8
    579c:	30 91 c9 04 	lds	r19, 0x04C9
    57a0:	89 ad       	ldd	r24, Y+57	; 0x39
    57a2:	88 2f       	mov	r24, r24
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	82 0f       	add	r24, r18
    57a8:	93 1f       	adc	r25, r19
    57aa:	fc 01       	movw	r30, r24
    57ac:	35 96       	adiw	r30, 0x05	; 5
    57ae:	80 81       	ld	r24, Z
    57b0:	88 2f       	mov	r24, r24
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <LinkedList_vidCompanion>

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);

		LCD_String("ID_BOOKS:");
		for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    57b8:	89 ad       	ldd	r24, Y+57	; 0x39
    57ba:	8f 5f       	subi	r24, 0xFF	; 255
    57bc:	89 af       	std	Y+57, r24	; 0x39
    57be:	89 ad       	ldd	r24, Y+57	; 0x39
    57c0:	85 30       	cpi	r24, 0x05	; 5
    57c2:	28 f3       	brcs	.-54     	; 0x578e <LinkedList_show+0x388>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	aa ef       	ldi	r26, 0xFA	; 250
    57ca:	b4 e4       	ldi	r27, 0x44	; 68
    57cc:	8b 87       	std	Y+11, r24	; 0x0b
    57ce:	9c 87       	std	Y+12, r25	; 0x0c
    57d0:	ad 87       	std	Y+13, r26	; 0x0d
    57d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    57d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    57d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    57da:	9e 85       	ldd	r25, Y+14	; 0x0e
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	4a ef       	ldi	r20, 0xFA	; 250
    57e2:	54 e4       	ldi	r21, 0x44	; 68
    57e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	8f 83       	std	Y+7, r24	; 0x07
    57ee:	98 87       	std	Y+8, r25	; 0x08
    57f0:	a9 87       	std	Y+9, r26	; 0x09
    57f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57f4:	6f 81       	ldd	r22, Y+7	; 0x07
    57f6:	78 85       	ldd	r23, Y+8	; 0x08
    57f8:	89 85       	ldd	r24, Y+9	; 0x09
    57fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	40 e8       	ldi	r20, 0x80	; 128
    5802:	5f e3       	ldi	r21, 0x3F	; 63
    5804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5808:	88 23       	and	r24, r24
    580a:	2c f4       	brge	.+10     	; 0x5816 <LinkedList_show+0x410>
		__ticks = 1;
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	9e 83       	std	Y+6, r25	; 0x06
    5812:	8d 83       	std	Y+5, r24	; 0x05
    5814:	3f c0       	rjmp	.+126    	; 0x5894 <LinkedList_show+0x48e>
	else if (__tmp > 65535)
    5816:	6f 81       	ldd	r22, Y+7	; 0x07
    5818:	78 85       	ldd	r23, Y+8	; 0x08
    581a:	89 85       	ldd	r24, Y+9	; 0x09
    581c:	9a 85       	ldd	r25, Y+10	; 0x0a
    581e:	20 e0       	ldi	r18, 0x00	; 0
    5820:	3f ef       	ldi	r19, 0xFF	; 255
    5822:	4f e7       	ldi	r20, 0x7F	; 127
    5824:	57 e4       	ldi	r21, 0x47	; 71
    5826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    582a:	18 16       	cp	r1, r24
    582c:	4c f5       	brge	.+82     	; 0x5880 <LinkedList_show+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    582e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5830:	7c 85       	ldd	r23, Y+12	; 0x0c
    5832:	8d 85       	ldd	r24, Y+13	; 0x0d
    5834:	9e 85       	ldd	r25, Y+14	; 0x0e
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e2       	ldi	r20, 0x20	; 32
    583c:	51 e4       	ldi	r21, 0x41	; 65
    583e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	9e 83       	std	Y+6, r25	; 0x06
    5854:	8d 83       	std	Y+5, r24	; 0x05
    5856:	0f c0       	rjmp	.+30     	; 0x5876 <LinkedList_show+0x470>
    5858:	88 ec       	ldi	r24, 0xC8	; 200
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	9c 83       	std	Y+4, r25	; 0x04
    585e:	8b 83       	std	Y+3, r24	; 0x03
    5860:	8b 81       	ldd	r24, Y+3	; 0x03
    5862:	9c 81       	ldd	r25, Y+4	; 0x04
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <LinkedList_show+0x45e>
    5868:	9c 83       	std	Y+4, r25	; 0x04
    586a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    586c:	8d 81       	ldd	r24, Y+5	; 0x05
    586e:	9e 81       	ldd	r25, Y+6	; 0x06
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	9e 83       	std	Y+6, r25	; 0x06
    5874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5876:	8d 81       	ldd	r24, Y+5	; 0x05
    5878:	9e 81       	ldd	r25, Y+6	; 0x06
    587a:	00 97       	sbiw	r24, 0x00	; 0
    587c:	69 f7       	brne	.-38     	; 0x5858 <LinkedList_show+0x452>
    587e:	14 c0       	rjmp	.+40     	; 0x58a8 <LinkedList_show+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5880:	6f 81       	ldd	r22, Y+7	; 0x07
    5882:	78 85       	ldd	r23, Y+8	; 0x08
    5884:	89 85       	ldd	r24, Y+9	; 0x09
    5886:	9a 85       	ldd	r25, Y+10	; 0x0a
    5888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	9e 83       	std	Y+6, r25	; 0x06
    5892:	8d 83       	std	Y+5, r24	; 0x05
    5894:	8d 81       	ldd	r24, Y+5	; 0x05
    5896:	9e 81       	ldd	r25, Y+6	; 0x06
    5898:	9a 83       	std	Y+2, r25	; 0x02
    589a:	89 83       	std	Y+1, r24	; 0x01
    589c:	89 81       	ldd	r24, Y+1	; 0x01
    589e:	9a 81       	ldd	r25, Y+2	; 0x02
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	f1 f7       	brne	.-4      	; 0x58a0 <LinkedList_show+0x49a>
    58a4:	9a 83       	std	Y+2, r25	; 0x02
    58a6:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidGoTo(i + 1, 2);
			LinkedList_vidCompanion(ptr_member -> MEMBER_CARD_BOOKS[i]);
		}

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	60 e2       	ldi	r22, 0x20	; 32
    58ac:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		ptr_member = ptr_member -> NEXT_STRUCT;
    58b0:	e0 91 c8 04 	lds	r30, 0x04C8
    58b4:	f0 91 c9 04 	lds	r31, 0x04C9
    58b8:	82 85       	ldd	r24, Z+10	; 0x0a
    58ba:	93 85       	ldd	r25, Z+11	; 0x0b
    58bc:	90 93 c9 04 	sts	0x04C9, r25
    58c0:	80 93 c8 04 	sts	0x04C8, r24
	}
	while(ptr_member != NULL);
    58c4:	80 91 c8 04 	lds	r24, 0x04C8
    58c8:	90 91 c9 04 	lds	r25, 0x04C9
    58cc:	00 97       	sbiw	r24, 0x00	; 0
    58ce:	09 f0       	breq	.+2      	; 0x58d2 <LinkedList_show+0x4cc>
    58d0:	c2 ce       	rjmp	.-636    	; 0x5656 <LinkedList_show+0x250>
	
	ptr_member = root_member;
    58d2:	80 91 ca 04 	lds	r24, 0x04CA
    58d6:	90 91 cb 04 	lds	r25, 0x04CB
    58da:	90 93 c9 04 	sts	0x04C9, r25
    58de:	80 93 c8 04 	sts	0x04C8, r24

	return true;
    58e2:	81 e0       	ldi	r24, 0x01	; 1
    58e4:	8a af       	std	Y+58, r24	; 0x3a
    58e6:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    58e8:	ea 96       	adiw	r28, 0x3a	; 58
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	f8 94       	cli
    58ee:	de bf       	out	0x3e, r29	; 62
    58f0:	0f be       	out	0x3f, r0	; 63
    58f2:	cd bf       	out	0x3d, r28	; 61
    58f4:	cf 91       	pop	r28
    58f6:	df 91       	pop	r29
    58f8:	08 95       	ret

000058fa <RETURN_vid>:



// RETURN from books
void RETURN_vid(char *id, char *serial)
{
    58fa:	df 93       	push	r29
    58fc:	cf 93       	push	r28
    58fe:	cd b7       	in	r28, 0x3d	; 61
    5900:	de b7       	in	r29, 0x3e	; 62
    5902:	c1 54       	subi	r28, 0x41	; 65
    5904:	d0 40       	sbci	r29, 0x00	; 0
    5906:	0f b6       	in	r0, 0x3f	; 63
    5908:	f8 94       	cli
    590a:	de bf       	out	0x3e, r29	; 62
    590c:	0f be       	out	0x3f, r0	; 63
    590e:	cd bf       	out	0x3d, r28	; 61
    5910:	9f af       	std	Y+63, r25	; 0x3f
    5912:	8e af       	std	Y+62, r24	; 0x3e
    5914:	fe 01       	movw	r30, r28
    5916:	e0 5c       	subi	r30, 0xC0	; 192
    5918:	ff 4f       	sbci	r31, 0xFF	; 255
    591a:	71 83       	std	Z+1, r23	; 0x01
    591c:	60 83       	st	Z, r22
	char R_flag = 0;
    591e:	1d ae       	std	Y+61, r1	; 0x3d
	u8 index = 0;
    5920:	1c ae       	std	Y+60, r1	; 0x3c
	

	// Search for member and don't show old books
	members *tmp = search(id, 0);
    5922:	8e ad       	ldd	r24, Y+62	; 0x3e
    5924:	9f ad       	ldd	r25, Y+63	; 0x3f
    5926:	60 e0       	ldi	r22, 0x00	; 0
    5928:	0e 94 56 26 	call	0x4cac	; 0x4cac <search>
    592c:	9b af       	std	Y+59, r25	; 0x3b
    592e:	8a af       	std	Y+58, r24	; 0x3a
	
	// Search for the book via ISBN
	index = BOOKS_search(serial, 0);
    5930:	fe 01       	movw	r30, r28
    5932:	e0 5c       	subi	r30, 0xC0	; 192
    5934:	ff 4f       	sbci	r31, 0xFF	; 255
    5936:	80 81       	ld	r24, Z
    5938:	91 81       	ldd	r25, Z+1	; 0x01
    593a:	60 e0       	ldi	r22, 0x00	; 0
    593c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <BOOKS_search>
    5940:	8c af       	std	Y+60, r24	; 0x3c
	
	if(!tmp)
    5942:	8a ad       	ldd	r24, Y+58	; 0x3a
    5944:	9b ad       	ldd	r25, Y+59	; 0x3b
    5946:	00 97       	sbiw	r24, 0x00	; 0
    5948:	09 f0       	breq	.+2      	; 0x594c <RETURN_vid+0x52>
    594a:	7b c0       	rjmp	.+246    	; 0x5a42 <RETURN_vid+0x148>
	{
		// Invalid ID
		LCD_String("ERROR:Inv_ID");
    594c:	87 ed       	ldi	r24, 0xD7	; 215
    594e:	91 e0       	ldi	r25, 0x01	; 1
    5950:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5954:	80 e0       	ldi	r24, 0x00	; 0
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	aa ef       	ldi	r26, 0xFA	; 250
    595a:	b4 e4       	ldi	r27, 0x44	; 68
    595c:	8d ab       	std	Y+53, r24	; 0x35
    595e:	9e ab       	std	Y+54, r25	; 0x36
    5960:	af ab       	std	Y+55, r26	; 0x37
    5962:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5964:	6d a9       	ldd	r22, Y+53	; 0x35
    5966:	7e a9       	ldd	r23, Y+54	; 0x36
    5968:	8f a9       	ldd	r24, Y+55	; 0x37
    596a:	98 ad       	ldd	r25, Y+56	; 0x38
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	4a ef       	ldi	r20, 0xFA	; 250
    5972:	54 e4       	ldi	r21, 0x44	; 68
    5974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5978:	dc 01       	movw	r26, r24
    597a:	cb 01       	movw	r24, r22
    597c:	89 ab       	std	Y+49, r24	; 0x31
    597e:	9a ab       	std	Y+50, r25	; 0x32
    5980:	ab ab       	std	Y+51, r26	; 0x33
    5982:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5984:	69 a9       	ldd	r22, Y+49	; 0x31
    5986:	7a a9       	ldd	r23, Y+50	; 0x32
    5988:	8b a9       	ldd	r24, Y+51	; 0x33
    598a:	9c a9       	ldd	r25, Y+52	; 0x34
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	40 e8       	ldi	r20, 0x80	; 128
    5992:	5f e3       	ldi	r21, 0x3F	; 63
    5994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5998:	88 23       	and	r24, r24
    599a:	2c f4       	brge	.+10     	; 0x59a6 <RETURN_vid+0xac>
		__ticks = 1;
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	98 ab       	std	Y+48, r25	; 0x30
    59a2:	8f a7       	std	Y+47, r24	; 0x2f
    59a4:	3f c0       	rjmp	.+126    	; 0x5a24 <RETURN_vid+0x12a>
	else if (__tmp > 65535)
    59a6:	69 a9       	ldd	r22, Y+49	; 0x31
    59a8:	7a a9       	ldd	r23, Y+50	; 0x32
    59aa:	8b a9       	ldd	r24, Y+51	; 0x33
    59ac:	9c a9       	ldd	r25, Y+52	; 0x34
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	3f ef       	ldi	r19, 0xFF	; 255
    59b2:	4f e7       	ldi	r20, 0x7F	; 127
    59b4:	57 e4       	ldi	r21, 0x47	; 71
    59b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59ba:	18 16       	cp	r1, r24
    59bc:	4c f5       	brge	.+82     	; 0x5a10 <RETURN_vid+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59be:	6d a9       	ldd	r22, Y+53	; 0x35
    59c0:	7e a9       	ldd	r23, Y+54	; 0x36
    59c2:	8f a9       	ldd	r24, Y+55	; 0x37
    59c4:	98 ad       	ldd	r25, Y+56	; 0x38
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	40 e2       	ldi	r20, 0x20	; 32
    59cc:	51 e4       	ldi	r21, 0x41	; 65
    59ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d2:	dc 01       	movw	r26, r24
    59d4:	cb 01       	movw	r24, r22
    59d6:	bc 01       	movw	r22, r24
    59d8:	cd 01       	movw	r24, r26
    59da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	98 ab       	std	Y+48, r25	; 0x30
    59e4:	8f a7       	std	Y+47, r24	; 0x2f
    59e6:	0f c0       	rjmp	.+30     	; 0x5a06 <RETURN_vid+0x10c>
    59e8:	88 ec       	ldi	r24, 0xC8	; 200
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	9e a7       	std	Y+46, r25	; 0x2e
    59ee:	8d a7       	std	Y+45, r24	; 0x2d
    59f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    59f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    59f4:	01 97       	sbiw	r24, 0x01	; 1
    59f6:	f1 f7       	brne	.-4      	; 0x59f4 <RETURN_vid+0xfa>
    59f8:	9e a7       	std	Y+46, r25	; 0x2e
    59fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    59fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5a00:	01 97       	sbiw	r24, 0x01	; 1
    5a02:	98 ab       	std	Y+48, r25	; 0x30
    5a04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a08:	98 a9       	ldd	r25, Y+48	; 0x30
    5a0a:	00 97       	sbiw	r24, 0x00	; 0
    5a0c:	69 f7       	brne	.-38     	; 0x59e8 <RETURN_vid+0xee>
    5a0e:	14 c0       	rjmp	.+40     	; 0x5a38 <RETURN_vid+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a10:	69 a9       	ldd	r22, Y+49	; 0x31
    5a12:	7a a9       	ldd	r23, Y+50	; 0x32
    5a14:	8b a9       	ldd	r24, Y+51	; 0x33
    5a16:	9c a9       	ldd	r25, Y+52	; 0x34
    5a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	98 ab       	std	Y+48, r25	; 0x30
    5a22:	8f a7       	std	Y+47, r24	; 0x2f
    5a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a26:	98 a9       	ldd	r25, Y+48	; 0x30
    5a28:	9c a7       	std	Y+44, r25	; 0x2c
    5a2a:	8b a7       	std	Y+43, r24	; 0x2b
    5a2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a30:	01 97       	sbiw	r24, 0x01	; 1
    5a32:	f1 f7       	brne	.-4      	; 0x5a30 <RETURN_vid+0x136>
    5a34:	9c a7       	std	Y+44, r25	; 0x2c
    5a36:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    5a38:	81 e0       	ldi	r24, 0x01	; 1
    5a3a:	60 e2       	ldi	r22, 0x20	; 32
    5a3c:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
    5a40:	a8 c1       	rjmp	.+848    	; 0x5d92 <RETURN_vid+0x498>
	}
	else
	{
		// Valid Serial 
		if( index != DoesNot_exist)
    5a42:	8c ad       	ldd	r24, Y+60	; 0x3c
    5a44:	88 23       	and	r24, r24
    5a46:	09 f4       	brne	.+2      	; 0x5a4a <RETURN_vid+0x150>
    5a48:	a2 c0       	rjmp	.+324    	; 0x5b8e <RETURN_vid+0x294>
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    5a4a:	19 ae       	std	Y+57, r1	; 0x39
    5a4c:	9b c0       	rjmp	.+310    	; 0x5b84 <RETURN_vid+0x28a>
			{
				if(tmp -> MEMBER_CARD_BOOKS[j] == index)
    5a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    5a50:	28 2f       	mov	r18, r24
    5a52:	30 e0       	ldi	r19, 0x00	; 0
    5a54:	8a ad       	ldd	r24, Y+58	; 0x3a
    5a56:	9b ad       	ldd	r25, Y+59	; 0x3b
    5a58:	82 0f       	add	r24, r18
    5a5a:	93 1f       	adc	r25, r19
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	35 96       	adiw	r30, 0x05	; 5
    5a60:	90 81       	ld	r25, Z
    5a62:	8c ad       	ldd	r24, Y+60	; 0x3c
    5a64:	98 17       	cp	r25, r24
    5a66:	09 f0       	breq	.+2      	; 0x5a6a <RETURN_vid+0x170>
    5a68:	8a c0       	rjmp	.+276    	; 0x5b7e <RETURN_vid+0x284>
				{		
					BOOKS_COPIES_INCREASE();
    5a6a:	0e 94 8b 23 	call	0x4716	; 0x4716 <BOOKS_COPIES_INCREASE>
					
					// Return and remove from MEMBER_CARD_BOOKS[]
					tmp -> MEMBER_CARD_BOOKS[j] = 0;
    5a6e:	89 ad       	ldd	r24, Y+57	; 0x39
    5a70:	28 2f       	mov	r18, r24
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	8a ad       	ldd	r24, Y+58	; 0x3a
    5a76:	9b ad       	ldd	r25, Y+59	; 0x3b
    5a78:	82 0f       	add	r24, r18
    5a7a:	93 1f       	adc	r25, r19
    5a7c:	fc 01       	movw	r30, r24
    5a7e:	35 96       	adiw	r30, 0x05	; 5
    5a80:	10 82       	st	Z, r1

					LCD_String("RETURN -> SUCCESS:");
    5a82:	84 ee       	ldi	r24, 0xE4	; 228
    5a84:	91 e0       	ldi	r25, 0x01	; 1
    5a86:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    5a8e:	aa ef       	ldi	r26, 0xFA	; 250
    5a90:	b4 e4       	ldi	r27, 0x44	; 68
    5a92:	8f a3       	std	Y+39, r24	; 0x27
    5a94:	98 a7       	std	Y+40, r25	; 0x28
    5a96:	a9 a7       	std	Y+41, r26	; 0x29
    5a98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a9a:	6f a1       	ldd	r22, Y+39	; 0x27
    5a9c:	78 a5       	ldd	r23, Y+40	; 0x28
    5a9e:	89 a5       	ldd	r24, Y+41	; 0x29
    5aa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	4a ef       	ldi	r20, 0xFA	; 250
    5aa8:	54 e4       	ldi	r21, 0x44	; 68
    5aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aae:	dc 01       	movw	r26, r24
    5ab0:	cb 01       	movw	r24, r22
    5ab2:	8b a3       	std	Y+35, r24	; 0x23
    5ab4:	9c a3       	std	Y+36, r25	; 0x24
    5ab6:	ad a3       	std	Y+37, r26	; 0x25
    5ab8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5aba:	6b a1       	ldd	r22, Y+35	; 0x23
    5abc:	7c a1       	ldd	r23, Y+36	; 0x24
    5abe:	8d a1       	ldd	r24, Y+37	; 0x25
    5ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	40 e8       	ldi	r20, 0x80	; 128
    5ac8:	5f e3       	ldi	r21, 0x3F	; 63
    5aca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ace:	88 23       	and	r24, r24
    5ad0:	2c f4       	brge	.+10     	; 0x5adc <RETURN_vid+0x1e2>
		__ticks = 1;
    5ad2:	81 e0       	ldi	r24, 0x01	; 1
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	9a a3       	std	Y+34, r25	; 0x22
    5ad8:	89 a3       	std	Y+33, r24	; 0x21
    5ada:	3f c0       	rjmp	.+126    	; 0x5b5a <RETURN_vid+0x260>
	else if (__tmp > 65535)
    5adc:	6b a1       	ldd	r22, Y+35	; 0x23
    5ade:	7c a1       	ldd	r23, Y+36	; 0x24
    5ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    5ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	3f ef       	ldi	r19, 0xFF	; 255
    5ae8:	4f e7       	ldi	r20, 0x7F	; 127
    5aea:	57 e4       	ldi	r21, 0x47	; 71
    5aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5af0:	18 16       	cp	r1, r24
    5af2:	4c f5       	brge	.+82     	; 0x5b46 <RETURN_vid+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af4:	6f a1       	ldd	r22, Y+39	; 0x27
    5af6:	78 a5       	ldd	r23, Y+40	; 0x28
    5af8:	89 a5       	ldd	r24, Y+41	; 0x29
    5afa:	9a a5       	ldd	r25, Y+42	; 0x2a
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	40 e2       	ldi	r20, 0x20	; 32
    5b02:	51 e4       	ldi	r21, 0x41	; 65
    5b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b08:	dc 01       	movw	r26, r24
    5b0a:	cb 01       	movw	r24, r22
    5b0c:	bc 01       	movw	r22, r24
    5b0e:	cd 01       	movw	r24, r26
    5b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	9a a3       	std	Y+34, r25	; 0x22
    5b1a:	89 a3       	std	Y+33, r24	; 0x21
    5b1c:	0f c0       	rjmp	.+30     	; 0x5b3c <RETURN_vid+0x242>
    5b1e:	88 ec       	ldi	r24, 0xC8	; 200
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	98 a3       	std	Y+32, r25	; 0x20
    5b24:	8f 8f       	std	Y+31, r24	; 0x1f
    5b26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b28:	98 a1       	ldd	r25, Y+32	; 0x20
    5b2a:	01 97       	sbiw	r24, 0x01	; 1
    5b2c:	f1 f7       	brne	.-4      	; 0x5b2a <RETURN_vid+0x230>
    5b2e:	98 a3       	std	Y+32, r25	; 0x20
    5b30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b32:	89 a1       	ldd	r24, Y+33	; 0x21
    5b34:	9a a1       	ldd	r25, Y+34	; 0x22
    5b36:	01 97       	sbiw	r24, 0x01	; 1
    5b38:	9a a3       	std	Y+34, r25	; 0x22
    5b3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    5b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    5b40:	00 97       	sbiw	r24, 0x00	; 0
    5b42:	69 f7       	brne	.-38     	; 0x5b1e <RETURN_vid+0x224>
    5b44:	14 c0       	rjmp	.+40     	; 0x5b6e <RETURN_vid+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b46:	6b a1       	ldd	r22, Y+35	; 0x23
    5b48:	7c a1       	ldd	r23, Y+36	; 0x24
    5b4a:	8d a1       	ldd	r24, Y+37	; 0x25
    5b4c:	9e a1       	ldd	r25, Y+38	; 0x26
    5b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	9a a3       	std	Y+34, r25	; 0x22
    5b58:	89 a3       	std	Y+33, r24	; 0x21
    5b5a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b5c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b60:	8d 8f       	std	Y+29, r24	; 0x1d
    5b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b66:	01 97       	sbiw	r24, 0x01	; 1
    5b68:	f1 f7       	brne	.-4      	; 0x5b66 <RETURN_vid+0x26c>
    5b6a:	9e 8f       	std	Y+30, r25	; 0x1e
    5b6c:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
					LCD_vidClearOnDemand(1, 32);
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	60 e2       	ldi	r22, 0x20	; 32
    5b72:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
					R_flag = 1;
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	8d af       	std	Y+61, r24	; 0x3d
					j = AVAILABLE_SHARES;					
    5b7a:	85 e0       	ldi	r24, 0x05	; 5
    5b7c:	89 af       	std	Y+57, r24	; 0x39
	{
		// Valid Serial 
		if( index != DoesNot_exist)
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    5b7e:	89 ad       	ldd	r24, Y+57	; 0x39
    5b80:	8f 5f       	subi	r24, 0xFF	; 255
    5b82:	89 af       	std	Y+57, r24	; 0x39
    5b84:	89 ad       	ldd	r24, Y+57	; 0x39
    5b86:	85 30       	cpi	r24, 0x05	; 5
    5b88:	08 f4       	brcc	.+2      	; 0x5b8c <RETURN_vid+0x292>
    5b8a:	61 cf       	rjmp	.-318    	; 0x5a4e <RETURN_vid+0x154>
    5b8c:	7c c0       	rjmp	.+248    	; 0x5c86 <RETURN_vid+0x38c>
				else;
			}
		}
		else
		{
			R_flag = 1;
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	8d af       	std	Y+61, r24	; 0x3d
			LCD_String("Invalid ISBN");
    5b92:	86 e8       	ldi	r24, 0x86	; 134
    5b94:	91 e0       	ldi	r25, 0x01	; 1
    5b96:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	aa ef       	ldi	r26, 0xFA	; 250
    5ba0:	b4 e4       	ldi	r27, 0x44	; 68
    5ba2:	89 8f       	std	Y+25, r24	; 0x19
    5ba4:	9a 8f       	std	Y+26, r25	; 0x1a
    5ba6:	ab 8f       	std	Y+27, r26	; 0x1b
    5ba8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5baa:	69 8d       	ldd	r22, Y+25	; 0x19
    5bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	4a ef       	ldi	r20, 0xFA	; 250
    5bb8:	54 e4       	ldi	r21, 0x44	; 68
    5bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	8d 8b       	std	Y+21, r24	; 0x15
    5bc4:	9e 8b       	std	Y+22, r25	; 0x16
    5bc6:	af 8b       	std	Y+23, r26	; 0x17
    5bc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5bca:	6d 89       	ldd	r22, Y+21	; 0x15
    5bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    5bce:	8f 89       	ldd	r24, Y+23	; 0x17
    5bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    5bd2:	20 e0       	ldi	r18, 0x00	; 0
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	40 e8       	ldi	r20, 0x80	; 128
    5bd8:	5f e3       	ldi	r21, 0x3F	; 63
    5bda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bde:	88 23       	and	r24, r24
    5be0:	2c f4       	brge	.+10     	; 0x5bec <RETURN_vid+0x2f2>
		__ticks = 1;
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	9c 8b       	std	Y+20, r25	; 0x14
    5be8:	8b 8b       	std	Y+19, r24	; 0x13
    5bea:	3f c0       	rjmp	.+126    	; 0x5c6a <RETURN_vid+0x370>
	else if (__tmp > 65535)
    5bec:	6d 89       	ldd	r22, Y+21	; 0x15
    5bee:	7e 89       	ldd	r23, Y+22	; 0x16
    5bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    5bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    5bf4:	20 e0       	ldi	r18, 0x00	; 0
    5bf6:	3f ef       	ldi	r19, 0xFF	; 255
    5bf8:	4f e7       	ldi	r20, 0x7F	; 127
    5bfa:	57 e4       	ldi	r21, 0x47	; 71
    5bfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c00:	18 16       	cp	r1, r24
    5c02:	4c f5       	brge	.+82     	; 0x5c56 <RETURN_vid+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c04:	69 8d       	ldd	r22, Y+25	; 0x19
    5c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e2       	ldi	r20, 0x20	; 32
    5c12:	51 e4       	ldi	r21, 0x41	; 65
    5c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	bc 01       	movw	r22, r24
    5c1e:	cd 01       	movw	r24, r26
    5c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c24:	dc 01       	movw	r26, r24
    5c26:	cb 01       	movw	r24, r22
    5c28:	9c 8b       	std	Y+20, r25	; 0x14
    5c2a:	8b 8b       	std	Y+19, r24	; 0x13
    5c2c:	0f c0       	rjmp	.+30     	; 0x5c4c <RETURN_vid+0x352>
    5c2e:	88 ec       	ldi	r24, 0xC8	; 200
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	9a 8b       	std	Y+18, r25	; 0x12
    5c34:	89 8b       	std	Y+17, r24	; 0x11
    5c36:	89 89       	ldd	r24, Y+17	; 0x11
    5c38:	9a 89       	ldd	r25, Y+18	; 0x12
    5c3a:	01 97       	sbiw	r24, 0x01	; 1
    5c3c:	f1 f7       	brne	.-4      	; 0x5c3a <RETURN_vid+0x340>
    5c3e:	9a 8b       	std	Y+18, r25	; 0x12
    5c40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c42:	8b 89       	ldd	r24, Y+19	; 0x13
    5c44:	9c 89       	ldd	r25, Y+20	; 0x14
    5c46:	01 97       	sbiw	r24, 0x01	; 1
    5c48:	9c 8b       	std	Y+20, r25	; 0x14
    5c4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    5c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    5c50:	00 97       	sbiw	r24, 0x00	; 0
    5c52:	69 f7       	brne	.-38     	; 0x5c2e <RETURN_vid+0x334>
    5c54:	14 c0       	rjmp	.+40     	; 0x5c7e <RETURN_vid+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c56:	6d 89       	ldd	r22, Y+21	; 0x15
    5c58:	7e 89       	ldd	r23, Y+22	; 0x16
    5c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c62:	dc 01       	movw	r26, r24
    5c64:	cb 01       	movw	r24, r22
    5c66:	9c 8b       	std	Y+20, r25	; 0x14
    5c68:	8b 8b       	std	Y+19, r24	; 0x13
    5c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c6e:	98 8b       	std	Y+16, r25	; 0x10
    5c70:	8f 87       	std	Y+15, r24	; 0x0f
    5c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c74:	98 89       	ldd	r25, Y+16	; 0x10
    5c76:	01 97       	sbiw	r24, 0x01	; 1
    5c78:	f1 f7       	brne	.-4      	; 0x5c76 <RETURN_vid+0x37c>
    5c7a:	98 8b       	std	Y+16, r25	; 0x10
    5c7c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    5c7e:	81 e0       	ldi	r24, 0x01	; 1
    5c80:	60 e2       	ldi	r22, 0x20	; 32
    5c82:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		}
		
		if(!R_flag)
    5c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    5c88:	88 23       	and	r24, r24
    5c8a:	09 f0       	breq	.+2      	; 0x5c8e <RETURN_vid+0x394>
    5c8c:	82 c0       	rjmp	.+260    	; 0x5d92 <RETURN_vid+0x498>
		{
			LCD_String("Book not");
    5c8e:	87 ef       	ldi	r24, 0xF7	; 247
    5c90:	91 e0       	ldi	r25, 0x01	; 1
    5c92:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
			LCD_vidGoTo(1, 2);
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	62 e0       	ldi	r22, 0x02	; 2
    5c9a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
			LCD_String("borrowed!");
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	92 e0       	ldi	r25, 0x02	; 2
    5ca2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    5ca6:	80 e0       	ldi	r24, 0x00	; 0
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	aa ef       	ldi	r26, 0xFA	; 250
    5cac:	b4 e4       	ldi	r27, 0x44	; 68
    5cae:	8b 87       	std	Y+11, r24	; 0x0b
    5cb0:	9c 87       	std	Y+12, r25	; 0x0c
    5cb2:	ad 87       	std	Y+13, r26	; 0x0d
    5cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cbe:	20 e0       	ldi	r18, 0x00	; 0
    5cc0:	30 e0       	ldi	r19, 0x00	; 0
    5cc2:	4a ef       	ldi	r20, 0xFA	; 250
    5cc4:	54 e4       	ldi	r21, 0x44	; 68
    5cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	cb 01       	movw	r24, r22
    5cce:	8f 83       	std	Y+7, r24	; 0x07
    5cd0:	98 87       	std	Y+8, r25	; 0x08
    5cd2:	a9 87       	std	Y+9, r26	; 0x09
    5cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    5cd8:	78 85       	ldd	r23, Y+8	; 0x08
    5cda:	89 85       	ldd	r24, Y+9	; 0x09
    5cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	40 e8       	ldi	r20, 0x80	; 128
    5ce4:	5f e3       	ldi	r21, 0x3F	; 63
    5ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cea:	88 23       	and	r24, r24
    5cec:	2c f4       	brge	.+10     	; 0x5cf8 <RETURN_vid+0x3fe>
		__ticks = 1;
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	9e 83       	std	Y+6, r25	; 0x06
    5cf4:	8d 83       	std	Y+5, r24	; 0x05
    5cf6:	3f c0       	rjmp	.+126    	; 0x5d76 <RETURN_vid+0x47c>
	else if (__tmp > 65535)
    5cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    5cfa:	78 85       	ldd	r23, Y+8	; 0x08
    5cfc:	89 85       	ldd	r24, Y+9	; 0x09
    5cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	3f ef       	ldi	r19, 0xFF	; 255
    5d04:	4f e7       	ldi	r20, 0x7F	; 127
    5d06:	57 e4       	ldi	r21, 0x47	; 71
    5d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d0c:	18 16       	cp	r1, r24
    5d0e:	4c f5       	brge	.+82     	; 0x5d62 <RETURN_vid+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	40 e2       	ldi	r20, 0x20	; 32
    5d1e:	51 e4       	ldi	r21, 0x41	; 65
    5d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d24:	dc 01       	movw	r26, r24
    5d26:	cb 01       	movw	r24, r22
    5d28:	bc 01       	movw	r22, r24
    5d2a:	cd 01       	movw	r24, r26
    5d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	9e 83       	std	Y+6, r25	; 0x06
    5d36:	8d 83       	std	Y+5, r24	; 0x05
    5d38:	0f c0       	rjmp	.+30     	; 0x5d58 <RETURN_vid+0x45e>
    5d3a:	88 ec       	ldi	r24, 0xC8	; 200
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	9c 83       	std	Y+4, r25	; 0x04
    5d40:	8b 83       	std	Y+3, r24	; 0x03
    5d42:	8b 81       	ldd	r24, Y+3	; 0x03
    5d44:	9c 81       	ldd	r25, Y+4	; 0x04
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	f1 f7       	brne	.-4      	; 0x5d46 <RETURN_vid+0x44c>
    5d4a:	9c 83       	std	Y+4, r25	; 0x04
    5d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d50:	9e 81       	ldd	r25, Y+6	; 0x06
    5d52:	01 97       	sbiw	r24, 0x01	; 1
    5d54:	9e 83       	std	Y+6, r25	; 0x06
    5d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d58:	8d 81       	ldd	r24, Y+5	; 0x05
    5d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d5c:	00 97       	sbiw	r24, 0x00	; 0
    5d5e:	69 f7       	brne	.-38     	; 0x5d3a <RETURN_vid+0x440>
    5d60:	14 c0       	rjmp	.+40     	; 0x5d8a <RETURN_vid+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d62:	6f 81       	ldd	r22, Y+7	; 0x07
    5d64:	78 85       	ldd	r23, Y+8	; 0x08
    5d66:	89 85       	ldd	r24, Y+9	; 0x09
    5d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d6e:	dc 01       	movw	r26, r24
    5d70:	cb 01       	movw	r24, r22
    5d72:	9e 83       	std	Y+6, r25	; 0x06
    5d74:	8d 83       	std	Y+5, r24	; 0x05
    5d76:	8d 81       	ldd	r24, Y+5	; 0x05
    5d78:	9e 81       	ldd	r25, Y+6	; 0x06
    5d7a:	9a 83       	std	Y+2, r25	; 0x02
    5d7c:	89 83       	std	Y+1, r24	; 0x01
    5d7e:	89 81       	ldd	r24, Y+1	; 0x01
    5d80:	9a 81       	ldd	r25, Y+2	; 0x02
    5d82:	01 97       	sbiw	r24, 0x01	; 1
    5d84:	f1 f7       	brne	.-4      	; 0x5d82 <RETURN_vid+0x488>
    5d86:	9a 83       	std	Y+2, r25	; 0x02
    5d88:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	60 e2       	ldi	r22, 0x20	; 32
    5d8e:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
		}
	}
}
    5d92:	cf 5b       	subi	r28, 0xBF	; 191
    5d94:	df 4f       	sbci	r29, 0xFF	; 255
    5d96:	0f b6       	in	r0, 0x3f	; 63
    5d98:	f8 94       	cli
    5d9a:	de bf       	out	0x3e, r29	; 62
    5d9c:	0f be       	out	0x3f, r0	; 63
    5d9e:	cd bf       	out	0x3d, r28	; 61
    5da0:	cf 91       	pop	r28
    5da2:	df 91       	pop	r29
    5da4:	08 95       	ret

00005da6 <LinkedList_vidCompanion>:


//  for user screen output
void LinkedList_vidCompanion(u16 show)
{
    5da6:	df 93       	push	r29
    5da8:	cf 93       	push	r28
    5daa:	cd b7       	in	r28, 0x3d	; 61
    5dac:	de b7       	in	r29, 0x3e	; 62
    5dae:	27 97       	sbiw	r28, 0x07	; 7
    5db0:	0f b6       	in	r0, 0x3f	; 63
    5db2:	f8 94       	cli
    5db4:	de bf       	out	0x3e, r29	; 62
    5db6:	0f be       	out	0x3f, r0	; 63
    5db8:	cd bf       	out	0x3d, r28	; 61
    5dba:	9f 83       	std	Y+7, r25	; 0x07
    5dbc:	8e 83       	std	Y+6, r24	; 0x06

	u16 *ptr = malloc(5 * sizeof(u16));
    5dbe:	8a e0       	ldi	r24, 0x0A	; 10
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	0e 94 39 33 	call	0x6672	; 0x6672 <malloc>
    5dc6:	9d 83       	std	Y+5, r25	; 0x05
    5dc8:	8c 83       	std	Y+4, r24	; 0x04
	s8 k = 0, i = 0 ;
    5dca:	1b 82       	std	Y+3, r1	; 0x03
    5dcc:	1a 82       	std	Y+2, r1	; 0x02

	// get values in order
	do
	{
		ptr[i] = (show%10) + 0x30;
    5dce:	8a 81       	ldd	r24, Y+2	; 0x02
    5dd0:	99 27       	eor	r25, r25
    5dd2:	87 fd       	sbrc	r24, 7
    5dd4:	90 95       	com	r25
    5dd6:	9c 01       	movw	r18, r24
    5dd8:	22 0f       	add	r18, r18
    5dda:	33 1f       	adc	r19, r19
    5ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    5dde:	9d 81       	ldd	r25, Y+5	; 0x05
    5de0:	fc 01       	movw	r30, r24
    5de2:	e2 0f       	add	r30, r18
    5de4:	f3 1f       	adc	r31, r19
    5de6:	8e 81       	ldd	r24, Y+6	; 0x06
    5de8:	9f 81       	ldd	r25, Y+7	; 0x07
    5dea:	2a e0       	ldi	r18, 0x0A	; 10
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	b9 01       	movw	r22, r18
    5df0:	0e 94 db 32 	call	0x65b6	; 0x65b6 <__udivmodhi4>
    5df4:	c0 96       	adiw	r24, 0x30	; 48
    5df6:	91 83       	std	Z+1, r25	; 0x01
    5df8:	80 83       	st	Z, r24
		i++;
    5dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfc:	8f 5f       	subi	r24, 0xFF	; 255
    5dfe:	8a 83       	std	Y+2, r24	; 0x02
		show /= 10;
    5e00:	8e 81       	ldd	r24, Y+6	; 0x06
    5e02:	9f 81       	ldd	r25, Y+7	; 0x07
    5e04:	2a e0       	ldi	r18, 0x0A	; 10
    5e06:	30 e0       	ldi	r19, 0x00	; 0
    5e08:	b9 01       	movw	r22, r18
    5e0a:	0e 94 db 32 	call	0x65b6	; 0x65b6 <__udivmodhi4>
    5e0e:	cb 01       	movw	r24, r22
    5e10:	9f 83       	std	Y+7, r25	; 0x07
    5e12:	8e 83       	std	Y+6, r24	; 0x06
	}while(show);
    5e14:	8e 81       	ldd	r24, Y+6	; 0x06
    5e16:	9f 81       	ldd	r25, Y+7	; 0x07
    5e18:	00 97       	sbiw	r24, 0x00	; 0
    5e1a:	c9 f6       	brne	.-78     	; 0x5dce <LinkedList_vidCompanion+0x28>

	ptr[i] = '\0';
    5e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1e:	99 27       	eor	r25, r25
    5e20:	87 fd       	sbrc	r24, 7
    5e22:	90 95       	com	r25
    5e24:	9c 01       	movw	r18, r24
    5e26:	22 0f       	add	r18, r18
    5e28:	33 1f       	adc	r19, r19
    5e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    5e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    5e2e:	fc 01       	movw	r30, r24
    5e30:	e2 0f       	add	r30, r18
    5e32:	f3 1f       	adc	r31, r19
    5e34:	11 82       	std	Z+1, r1	; 0x01
    5e36:	10 82       	st	Z, r1

	// get string length
	for(k = 0; ptr[k] != '\0'; k++);
    5e38:	1b 82       	std	Y+3, r1	; 0x03
    5e3a:	03 c0       	rjmp	.+6      	; 0x5e42 <LinkedList_vidCompanion+0x9c>
    5e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e3e:	8f 5f       	subi	r24, 0xFF	; 255
    5e40:	8b 83       	std	Y+3, r24	; 0x03
    5e42:	8b 81       	ldd	r24, Y+3	; 0x03
    5e44:	99 27       	eor	r25, r25
    5e46:	87 fd       	sbrc	r24, 7
    5e48:	90 95       	com	r25
    5e4a:	9c 01       	movw	r18, r24
    5e4c:	22 0f       	add	r18, r18
    5e4e:	33 1f       	adc	r19, r19
    5e50:	8c 81       	ldd	r24, Y+4	; 0x04
    5e52:	9d 81       	ldd	r25, Y+5	; 0x05
    5e54:	fc 01       	movw	r30, r24
    5e56:	e2 0f       	add	r30, r18
    5e58:	f3 1f       	adc	r31, r19
    5e5a:	80 81       	ld	r24, Z
    5e5c:	91 81       	ldd	r25, Z+1	; 0x01
    5e5e:	00 97       	sbiw	r24, 0x00	; 0
    5e60:	69 f7       	brne	.-38     	; 0x5e3c <LinkedList_vidCompanion+0x96>

	//LCD_vidGoTo(1,2);

	// reverse the string sent
	for(s8 kk = k-1; kk >= 0; kk-- )
    5e62:	8b 81       	ldd	r24, Y+3	; 0x03
    5e64:	81 50       	subi	r24, 0x01	; 1
    5e66:	89 83       	std	Y+1, r24	; 0x01
    5e68:	13 c0       	rjmp	.+38     	; 0x5e90 <LinkedList_vidCompanion+0xea>
	{
		LCD_vidData(ptr[kk]);
    5e6a:	89 81       	ldd	r24, Y+1	; 0x01
    5e6c:	99 27       	eor	r25, r25
    5e6e:	87 fd       	sbrc	r24, 7
    5e70:	90 95       	com	r25
    5e72:	9c 01       	movw	r18, r24
    5e74:	22 0f       	add	r18, r18
    5e76:	33 1f       	adc	r19, r19
    5e78:	8c 81       	ldd	r24, Y+4	; 0x04
    5e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    5e7c:	fc 01       	movw	r30, r24
    5e7e:	e2 0f       	add	r30, r18
    5e80:	f3 1f       	adc	r31, r19
    5e82:	80 81       	ld	r24, Z
    5e84:	91 81       	ldd	r25, Z+1	; 0x01
    5e86:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <LCD_vidData>
	for(k = 0; ptr[k] != '\0'; k++);

	//LCD_vidGoTo(1,2);

	// reverse the string sent
	for(s8 kk = k-1; kk >= 0; kk-- )
    5e8a:	89 81       	ldd	r24, Y+1	; 0x01
    5e8c:	81 50       	subi	r24, 0x01	; 1
    5e8e:	89 83       	std	Y+1, r24	; 0x01
    5e90:	89 81       	ldd	r24, Y+1	; 0x01
    5e92:	88 23       	and	r24, r24
    5e94:	54 f7       	brge	.-44     	; 0x5e6a <LinkedList_vidCompanion+0xc4>
	{
		LCD_vidData(ptr[kk]);
	}


	free(ptr);
    5e96:	8c 81       	ldd	r24, Y+4	; 0x04
    5e98:	9d 81       	ldd	r25, Y+5	; 0x05
    5e9a:	0e 94 e6 33 	call	0x67cc	; 0x67cc <free>
}
    5e9e:	27 96       	adiw	r28, 0x07	; 7
    5ea0:	0f b6       	in	r0, 0x3f	; 63
    5ea2:	f8 94       	cli
    5ea4:	de bf       	out	0x3e, r29	; 62
    5ea6:	0f be       	out	0x3f, r0	; 63
    5ea8:	cd bf       	out	0x3d, r28	; 61
    5eaa:	cf 91       	pop	r28
    5eac:	df 91       	pop	r29
    5eae:	08 95       	ret

00005eb0 <main>:
void SECONDS_CALL (void);
void MINUTES_CALL (void);
void HOURS_CALL (void);

int main(void)
{
    5eb0:	df 93       	push	r29
    5eb2:	cf 93       	push	r28
    5eb4:	cd b7       	in	r28, 0x3d	; 61
    5eb6:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInitialize();
    5eb8:	0e 94 b8 14 	call	0x2970	; 0x2970 <LCD_vidInitialize>
	BOOKS_vidInitialize();
    5ebc:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <BOOKS_vidInitialize>
	LinkedList_vidInitialize();
    5ec0:	0e 94 2e 24 	call	0x485c	; 0x485c <LinkedList_vidInitialize>

	// Start timer and count till reaches 50 msec
	Timer1_vidInitialtize(8);
    5ec4:	88 e0       	ldi	r24, 0x08	; 8
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
    5ec8:	0e 94 85 1c 	call	0x390a	; 0x390a <Timer1_vidInitialtize>

	// OCR is high to leave for ISR enough time for execution
	Timer1_vidSetOCRValue(50000);
    5ecc:	80 e5       	ldi	r24, 0x50	; 80
    5ece:	93 ec       	ldi	r25, 0xC3	; 195
    5ed0:	0e 94 cb 1c 	call	0x3996	; 0x3996 <Timer1_vidSetOCRValue>
	Timer1_setcallback(APP);
    5ed4:	87 e9       	ldi	r24, 0x97	; 151
    5ed6:	90 e3       	ldi	r25, 0x30	; 48
    5ed8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <Timer1_setcallback>

	hide_me = 1;
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	80 93 c1 04 	sts	0x04C1, r24

	LinkedList_vidInsertion("1", "Joey");
    5ee2:	8a e0       	ldi	r24, 0x0A	; 10
    5ee4:	92 e0       	ldi	r25, 0x02	; 2
    5ee6:	2c e0       	ldi	r18, 0x0C	; 12
    5ee8:	32 e0       	ldi	r19, 0x02	; 2
    5eea:	b9 01       	movw	r22, r18
    5eec:	0e 94 77 24 	call	0x48ee	; 0x48ee <LinkedList_vidInsertion>
	LinkedList_vidInsertion("2", "John");
    5ef0:	81 e1       	ldi	r24, 0x11	; 17
    5ef2:	92 e0       	ldi	r25, 0x02	; 2
    5ef4:	23 e1       	ldi	r18, 0x13	; 19
    5ef6:	32 e0       	ldi	r19, 0x02	; 2
    5ef8:	b9 01       	movw	r22, r18
    5efa:	0e 94 77 24 	call	0x48ee	; 0x48ee <LinkedList_vidInsertion>
	LinkedList_vidInsertion("3", "Mark");
    5efe:	88 e1       	ldi	r24, 0x18	; 24
    5f00:	92 e0       	ldi	r25, 0x02	; 2
    5f02:	2a e1       	ldi	r18, 0x1A	; 26
    5f04:	32 e0       	ldi	r19, 0x02	; 2
    5f06:	b9 01       	movw	r22, r18
    5f08:	0e 94 77 24 	call	0x48ee	; 0x48ee <LinkedList_vidInsertion>
	LinkedList_vidInsertion("4", "Rose");
    5f0c:	8f e1       	ldi	r24, 0x1F	; 31
    5f0e:	92 e0       	ldi	r25, 0x02	; 2
    5f10:	21 e2       	ldi	r18, 0x21	; 33
    5f12:	32 e0       	ldi	r19, 0x02	; 2
    5f14:	b9 01       	movw	r22, r18
    5f16:	0e 94 77 24 	call	0x48ee	; 0x48ee <LinkedList_vidInsertion>
	LinkedList_vidInsertion("5", "Sarah");
    5f1a:	86 e2       	ldi	r24, 0x26	; 38
    5f1c:	92 e0       	ldi	r25, 0x02	; 2
    5f1e:	28 e2       	ldi	r18, 0x28	; 40
    5f20:	32 e0       	ldi	r19, 0x02	; 2
    5f22:	b9 01       	movw	r22, r18
    5f24:	0e 94 77 24 	call	0x48ee	; 0x48ee <LinkedList_vidInsertion>




	BOOKS_vidInsertion("0060832819", "The Zahir", 5);	//
    5f28:	8e e2       	ldi	r24, 0x2E	; 46
    5f2a:	92 e0       	ldi	r25, 0x02	; 2
    5f2c:	29 e3       	ldi	r18, 0x39	; 57
    5f2e:	32 e0       	ldi	r19, 0x02	; 2
    5f30:	b9 01       	movw	r22, r18
    5f32:	45 e0       	ldi	r20, 0x05	; 5
    5f34:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <BOOKS_vidInsertion>
	BOOKS_vidInsertion("0062315005", "The Alchemist", 5);		//
    5f38:	83 e4       	ldi	r24, 0x43	; 67
    5f3a:	92 e0       	ldi	r25, 0x02	; 2
    5f3c:	2e e4       	ldi	r18, 0x4E	; 78
    5f3e:	32 e0       	ldi	r19, 0x02	; 2
    5f40:	b9 01       	movw	r22, r18
    5f42:	45 e0       	ldi	r20, 0x05	; 5
    5f44:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <BOOKS_vidInsertion>
	BOOKS_vidInsertion("1509825428", "Bleak House", 5);		//
    5f48:	8c e5       	ldi	r24, 0x5C	; 92
    5f4a:	92 e0       	ldi	r25, 0x02	; 2
    5f4c:	27 e6       	ldi	r18, 0x67	; 103
    5f4e:	32 e0       	ldi	r19, 0x02	; 2
    5f50:	b9 01       	movw	r22, r18
    5f52:	45 e0       	ldi	r20, 0x05	; 5
    5f54:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <BOOKS_vidInsertion>
	BOOKS_vidInsertion("0141439675", "Hard times", 5);			//
    5f58:	83 e7       	ldi	r24, 0x73	; 115
    5f5a:	92 e0       	ldi	r25, 0x02	; 2
    5f5c:	2e e7       	ldi	r18, 0x7E	; 126
    5f5e:	32 e0       	ldi	r19, 0x02	; 2
    5f60:	b9 01       	movw	r22, r18
    5f62:	45 e0       	ldi	r20, 0x05	; 5
    5f64:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <BOOKS_vidInsertion>



	while(1)
	{
		hide_me = 1;
    5f68:	81 e0       	ldi	r24, 0x01	; 1
    5f6a:	80 93 c1 04 	sts	0x04C1, r24
		LCD_vidClearOnDemand(1, 32);
    5f6e:	81 e0       	ldi	r24, 0x01	; 1
    5f70:	60 e2       	ldi	r22, 0x20	; 32
    5f72:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>

		DISPLAY_OnDemand("1-INSER BOOK", "2-INSER MEMBER");
    5f76:	89 e8       	ldi	r24, 0x89	; 137
    5f78:	92 e0       	ldi	r25, 0x02	; 2
    5f7a:	26 e9       	ldi	r18, 0x96	; 150
    5f7c:	32 e0       	ldi	r19, 0x02	; 2
    5f7e:	b9 01       	movw	r22, r18
    5f80:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <DISPLAY_OnDemand>

		DISPLAY_OnDemand("3-BORROW BOOK", "4-RETURN BOOK");
    5f84:	85 ea       	ldi	r24, 0xA5	; 165
    5f86:	92 e0       	ldi	r25, 0x02	; 2
    5f88:	23 eb       	ldi	r18, 0xB3	; 179
    5f8a:	32 e0       	ldi	r19, 0x02	; 2
    5f8c:	b9 01       	movw	r22, r18
    5f8e:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <DISPLAY_OnDemand>

		DISPLAY_OnDemand("5-Show all books", "6-Show all members");
    5f92:	81 ec       	ldi	r24, 0xC1	; 193
    5f94:	92 e0       	ldi	r25, 0x02	; 2
    5f96:	22 ed       	ldi	r18, 0xD2	; 210
    5f98:	32 e0       	ldi	r19, 0x02	; 2
    5f9a:	b9 01       	movw	r22, r18
    5f9c:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <DISPLAY_OnDemand>

		DISPLAY_OnDemand("7-Member's INFO.", "                 ");
    5fa0:	85 ee       	ldi	r24, 0xE5	; 229
    5fa2:	92 e0       	ldi	r25, 0x02	; 2
    5fa4:	26 ef       	ldi	r18, 0xF6	; 246
    5fa6:	32 e0       	ldi	r19, 0x02	; 2
    5fa8:	b9 01       	movw	r22, r18
    5faa:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <DISPLAY_OnDemand>

		LCD_String("OPERATION NO. :");
    5fae:	88 e0       	ldi	r24, 0x08	; 8
    5fb0:	93 e0       	ldi	r25, 0x03	; 3
    5fb2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
		LCD_vidGoTo(1, 2);
    5fb6:	81 e0       	ldi	r24, 0x01	; 1
    5fb8:	62 e0       	ldi	r22, 0x02	; 2
    5fba:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
		hide_me = 0;
    5fbe:	10 92 c1 04 	sts	0x04C1, r1

		KeyPad_vidInitialize();
    5fc2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <KeyPad_vidInitialize>

		if(DEAD_SIGNAL_TERMINATE)
    5fc6:	80 91 5c 04 	lds	r24, 0x045C
    5fca:	88 23       	and	r24, r24
    5fcc:	69 f2       	breq	.-102    	; 0x5f68 <main+0xb8>
		{
			DEAD_SIGNAL_TERMINATE = 0;
    5fce:	10 92 5c 04 	sts	0x045C, r1

			// Reset pointers to the head ot its linked list
			restart_vip();
    5fd2:	0e 94 33 26 	call	0x4c66	; 0x4c66 <restart_vip>
			BOOKS_restart_vip();
    5fd6:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <BOOKS_restart_vip>

			// Delete the whole data base
			LinkedList_u8DeleteEntire();
    5fda:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <LinkedList_u8DeleteEntire>
			BOOKS_u8DeleteEntire();
    5fde:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <BOOKS_u8DeleteEntire>
    5fe2:	80 e0       	ldi	r24, 0x00	; 0
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
}
    5fe6:	cf 91       	pop	r28
    5fe8:	df 91       	pop	r29
    5fea:	08 95       	ret

00005fec <DISPLAY_OnDemand>:

void DISPLAY_OnDemand(char *str1, char *str2)
{
    5fec:	df 93       	push	r29
    5fee:	cf 93       	push	r28
    5ff0:	cd b7       	in	r28, 0x3d	; 61
    5ff2:	de b7       	in	r29, 0x3e	; 62
    5ff4:	62 97       	sbiw	r28, 0x12	; 18
    5ff6:	0f b6       	in	r0, 0x3f	; 63
    5ff8:	f8 94       	cli
    5ffa:	de bf       	out	0x3e, r29	; 62
    5ffc:	0f be       	out	0x3f, r0	; 63
    5ffe:	cd bf       	out	0x3d, r28	; 61
    6000:	98 8b       	std	Y+16, r25	; 0x10
    6002:	8f 87       	std	Y+15, r24	; 0x0f
    6004:	7a 8b       	std	Y+18, r23	; 0x12
    6006:	69 8b       	std	Y+17, r22	; 0x11
	LCD_vidClearOnDemand(1, 32);
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	60 e2       	ldi	r22, 0x20	; 32
    600c:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
	// Display 1st string
	LCD_vidGoTo(1, 1);
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	61 e0       	ldi	r22, 0x01	; 1
    6014:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
	LCD_String(str1);
    6018:	8f 85       	ldd	r24, Y+15	; 0x0f
    601a:	98 89       	ldd	r25, Y+16	; 0x10
    601c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
	// Display 2nd string
	LCD_vidGoTo(1, 2);
    6020:	81 e0       	ldi	r24, 0x01	; 1
    6022:	62 e0       	ldi	r22, 0x02	; 2
    6024:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_vidGoTo>
	LCD_String(str2);
    6028:	89 89       	ldd	r24, Y+17	; 0x11
    602a:	9a 89       	ldd	r25, Y+18	; 0x12
    602c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>
    6030:	80 e0       	ldi	r24, 0x00	; 0
    6032:	90 e8       	ldi	r25, 0x80	; 128
    6034:	a2 ea       	ldi	r26, 0xA2	; 162
    6036:	b4 e4       	ldi	r27, 0x44	; 68
    6038:	8b 87       	std	Y+11, r24	; 0x0b
    603a:	9c 87       	std	Y+12, r25	; 0x0c
    603c:	ad 87       	std	Y+13, r26	; 0x0d
    603e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6040:	6b 85       	ldd	r22, Y+11	; 0x0b
    6042:	7c 85       	ldd	r23, Y+12	; 0x0c
    6044:	8d 85       	ldd	r24, Y+13	; 0x0d
    6046:	9e 85       	ldd	r25, Y+14	; 0x0e
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	4a ef       	ldi	r20, 0xFA	; 250
    604e:	54 e4       	ldi	r21, 0x44	; 68
    6050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6054:	dc 01       	movw	r26, r24
    6056:	cb 01       	movw	r24, r22
    6058:	8f 83       	std	Y+7, r24	; 0x07
    605a:	98 87       	std	Y+8, r25	; 0x08
    605c:	a9 87       	std	Y+9, r26	; 0x09
    605e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6060:	6f 81       	ldd	r22, Y+7	; 0x07
    6062:	78 85       	ldd	r23, Y+8	; 0x08
    6064:	89 85       	ldd	r24, Y+9	; 0x09
    6066:	9a 85       	ldd	r25, Y+10	; 0x0a
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	40 e8       	ldi	r20, 0x80	; 128
    606e:	5f e3       	ldi	r21, 0x3F	; 63
    6070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6074:	88 23       	and	r24, r24
    6076:	2c f4       	brge	.+10     	; 0x6082 <DISPLAY_OnDemand+0x96>
		__ticks = 1;
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	9e 83       	std	Y+6, r25	; 0x06
    607e:	8d 83       	std	Y+5, r24	; 0x05
    6080:	3f c0       	rjmp	.+126    	; 0x6100 <DISPLAY_OnDemand+0x114>
	else if (__tmp > 65535)
    6082:	6f 81       	ldd	r22, Y+7	; 0x07
    6084:	78 85       	ldd	r23, Y+8	; 0x08
    6086:	89 85       	ldd	r24, Y+9	; 0x09
    6088:	9a 85       	ldd	r25, Y+10	; 0x0a
    608a:	20 e0       	ldi	r18, 0x00	; 0
    608c:	3f ef       	ldi	r19, 0xFF	; 255
    608e:	4f e7       	ldi	r20, 0x7F	; 127
    6090:	57 e4       	ldi	r21, 0x47	; 71
    6092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6096:	18 16       	cp	r1, r24
    6098:	4c f5       	brge	.+82     	; 0x60ec <DISPLAY_OnDemand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    609a:	6b 85       	ldd	r22, Y+11	; 0x0b
    609c:	7c 85       	ldd	r23, Y+12	; 0x0c
    609e:	8d 85       	ldd	r24, Y+13	; 0x0d
    60a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	40 e2       	ldi	r20, 0x20	; 32
    60a8:	51 e4       	ldi	r21, 0x41	; 65
    60aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ae:	dc 01       	movw	r26, r24
    60b0:	cb 01       	movw	r24, r22
    60b2:	bc 01       	movw	r22, r24
    60b4:	cd 01       	movw	r24, r26
    60b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ba:	dc 01       	movw	r26, r24
    60bc:	cb 01       	movw	r24, r22
    60be:	9e 83       	std	Y+6, r25	; 0x06
    60c0:	8d 83       	std	Y+5, r24	; 0x05
    60c2:	0f c0       	rjmp	.+30     	; 0x60e2 <DISPLAY_OnDemand+0xf6>
    60c4:	88 ec       	ldi	r24, 0xC8	; 200
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	9c 83       	std	Y+4, r25	; 0x04
    60ca:	8b 83       	std	Y+3, r24	; 0x03
    60cc:	8b 81       	ldd	r24, Y+3	; 0x03
    60ce:	9c 81       	ldd	r25, Y+4	; 0x04
    60d0:	01 97       	sbiw	r24, 0x01	; 1
    60d2:	f1 f7       	brne	.-4      	; 0x60d0 <DISPLAY_OnDemand+0xe4>
    60d4:	9c 83       	std	Y+4, r25	; 0x04
    60d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d8:	8d 81       	ldd	r24, Y+5	; 0x05
    60da:	9e 81       	ldd	r25, Y+6	; 0x06
    60dc:	01 97       	sbiw	r24, 0x01	; 1
    60de:	9e 83       	std	Y+6, r25	; 0x06
    60e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e2:	8d 81       	ldd	r24, Y+5	; 0x05
    60e4:	9e 81       	ldd	r25, Y+6	; 0x06
    60e6:	00 97       	sbiw	r24, 0x00	; 0
    60e8:	69 f7       	brne	.-38     	; 0x60c4 <DISPLAY_OnDemand+0xd8>
    60ea:	14 c0       	rjmp	.+40     	; 0x6114 <DISPLAY_OnDemand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ec:	6f 81       	ldd	r22, Y+7	; 0x07
    60ee:	78 85       	ldd	r23, Y+8	; 0x08
    60f0:	89 85       	ldd	r24, Y+9	; 0x09
    60f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    60f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f8:	dc 01       	movw	r26, r24
    60fa:	cb 01       	movw	r24, r22
    60fc:	9e 83       	std	Y+6, r25	; 0x06
    60fe:	8d 83       	std	Y+5, r24	; 0x05
    6100:	8d 81       	ldd	r24, Y+5	; 0x05
    6102:	9e 81       	ldd	r25, Y+6	; 0x06
    6104:	9a 83       	std	Y+2, r25	; 0x02
    6106:	89 83       	std	Y+1, r24	; 0x01
    6108:	89 81       	ldd	r24, Y+1	; 0x01
    610a:	9a 81       	ldd	r25, Y+2	; 0x02
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f1 f7       	brne	.-4      	; 0x610c <DISPLAY_OnDemand+0x120>
    6110:	9a 83       	std	Y+2, r25	; 0x02
    6112:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1300);
	// Clear whole display
	LCD_vidClearOnDemand(1, 32);
    6114:	81 e0       	ldi	r24, 0x01	; 1
    6116:	60 e2       	ldi	r22, 0x20	; 32
    6118:	0e 94 10 1b 	call	0x3620	; 0x3620 <LCD_vidClearOnDemand>
}
    611c:	62 96       	adiw	r28, 0x12	; 18
    611e:	0f b6       	in	r0, 0x3f	; 63
    6120:	f8 94       	cli
    6122:	de bf       	out	0x3e, r29	; 62
    6124:	0f be       	out	0x3f, r0	; 63
    6126:	cd bf       	out	0x3d, r28	; 61
    6128:	cf 91       	pop	r28
    612a:	df 91       	pop	r29
    612c:	08 95       	ret

0000612e <APP>:


void APP(void)
{
    612e:	df 93       	push	r29
    6130:	cf 93       	push	r28
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
    6136:	68 97       	sbiw	r28, 0x18	; 24
    6138:	0f b6       	in	r0, 0x3f	; 63
    613a:	f8 94       	cli
    613c:	de bf       	out	0x3e, r29	; 62
    613e:	0f be       	out	0x3f, r0	; 63
    6140:	cd bf       	out	0x3d, r28	; 61
    6142:	80 e0       	ldi	r24, 0x00	; 0
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	a0 e2       	ldi	r26, 0x20	; 32
    6148:	b1 e4       	ldi	r27, 0x41	; 65
    614a:	8d 8b       	std	Y+21, r24	; 0x15
    614c:	9e 8b       	std	Y+22, r25	; 0x16
    614e:	af 8b       	std	Y+23, r26	; 0x17
    6150:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6152:	6d 89       	ldd	r22, Y+21	; 0x15
    6154:	7e 89       	ldd	r23, Y+22	; 0x16
    6156:	8f 89       	ldd	r24, Y+23	; 0x17
    6158:	98 8d       	ldd	r25, Y+24	; 0x18
    615a:	2b ea       	ldi	r18, 0xAB	; 171
    615c:	3a ea       	ldi	r19, 0xAA	; 170
    615e:	4a e2       	ldi	r20, 0x2A	; 42
    6160:	50 e4       	ldi	r21, 0x40	; 64
    6162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6166:	dc 01       	movw	r26, r24
    6168:	cb 01       	movw	r24, r22
    616a:	89 8b       	std	Y+17, r24	; 0x11
    616c:	9a 8b       	std	Y+18, r25	; 0x12
    616e:	ab 8b       	std	Y+19, r26	; 0x13
    6170:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6172:	69 89       	ldd	r22, Y+17	; 0x11
    6174:	7a 89       	ldd	r23, Y+18	; 0x12
    6176:	8b 89       	ldd	r24, Y+19	; 0x13
    6178:	9c 89       	ldd	r25, Y+20	; 0x14
    617a:	20 e0       	ldi	r18, 0x00	; 0
    617c:	30 e0       	ldi	r19, 0x00	; 0
    617e:	40 e8       	ldi	r20, 0x80	; 128
    6180:	5f e3       	ldi	r21, 0x3F	; 63
    6182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6186:	88 23       	and	r24, r24
    6188:	1c f4       	brge	.+6      	; 0x6190 <APP+0x62>
		__ticks = 1;
    618a:	81 e0       	ldi	r24, 0x01	; 1
    618c:	88 8b       	std	Y+16, r24	; 0x10
    618e:	91 c0       	rjmp	.+290    	; 0x62b2 <APP+0x184>
	else if (__tmp > 255)
    6190:	69 89       	ldd	r22, Y+17	; 0x11
    6192:	7a 89       	ldd	r23, Y+18	; 0x12
    6194:	8b 89       	ldd	r24, Y+19	; 0x13
    6196:	9c 89       	ldd	r25, Y+20	; 0x14
    6198:	20 e0       	ldi	r18, 0x00	; 0
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	4f e7       	ldi	r20, 0x7F	; 127
    619e:	53 e4       	ldi	r21, 0x43	; 67
    61a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61a4:	18 16       	cp	r1, r24
    61a6:	0c f0       	brlt	.+2      	; 0x61aa <APP+0x7c>
    61a8:	7b c0       	rjmp	.+246    	; 0x62a0 <APP+0x172>
	{
		_delay_ms(__us / 1000.0);
    61aa:	6d 89       	ldd	r22, Y+21	; 0x15
    61ac:	7e 89       	ldd	r23, Y+22	; 0x16
    61ae:	8f 89       	ldd	r24, Y+23	; 0x17
    61b0:	98 8d       	ldd	r25, Y+24	; 0x18
    61b2:	20 e0       	ldi	r18, 0x00	; 0
    61b4:	30 e0       	ldi	r19, 0x00	; 0
    61b6:	4a e7       	ldi	r20, 0x7A	; 122
    61b8:	54 e4       	ldi	r21, 0x44	; 68
    61ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	8c 87       	std	Y+12, r24	; 0x0c
    61c4:	9d 87       	std	Y+13, r25	; 0x0d
    61c6:	ae 87       	std	Y+14, r26	; 0x0e
    61c8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    61cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    61ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    61d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	4a ef       	ldi	r20, 0xFA	; 250
    61d8:	54 e4       	ldi	r21, 0x44	; 68
    61da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61de:	dc 01       	movw	r26, r24
    61e0:	cb 01       	movw	r24, r22
    61e2:	88 87       	std	Y+8, r24	; 0x08
    61e4:	99 87       	std	Y+9, r25	; 0x09
    61e6:	aa 87       	std	Y+10, r26	; 0x0a
    61e8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    61ea:	68 85       	ldd	r22, Y+8	; 0x08
    61ec:	79 85       	ldd	r23, Y+9	; 0x09
    61ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    61f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    61f2:	20 e0       	ldi	r18, 0x00	; 0
    61f4:	30 e0       	ldi	r19, 0x00	; 0
    61f6:	40 e8       	ldi	r20, 0x80	; 128
    61f8:	5f e3       	ldi	r21, 0x3F	; 63
    61fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61fe:	88 23       	and	r24, r24
    6200:	2c f4       	brge	.+10     	; 0x620c <APP+0xde>
		__ticks = 1;
    6202:	81 e0       	ldi	r24, 0x01	; 1
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	9f 83       	std	Y+7, r25	; 0x07
    6208:	8e 83       	std	Y+6, r24	; 0x06
    620a:	3f c0       	rjmp	.+126    	; 0x628a <APP+0x15c>
	else if (__tmp > 65535)
    620c:	68 85       	ldd	r22, Y+8	; 0x08
    620e:	79 85       	ldd	r23, Y+9	; 0x09
    6210:	8a 85       	ldd	r24, Y+10	; 0x0a
    6212:	9b 85       	ldd	r25, Y+11	; 0x0b
    6214:	20 e0       	ldi	r18, 0x00	; 0
    6216:	3f ef       	ldi	r19, 0xFF	; 255
    6218:	4f e7       	ldi	r20, 0x7F	; 127
    621a:	57 e4       	ldi	r21, 0x47	; 71
    621c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6220:	18 16       	cp	r1, r24
    6222:	4c f5       	brge	.+82     	; 0x6276 <APP+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6224:	6c 85       	ldd	r22, Y+12	; 0x0c
    6226:	7d 85       	ldd	r23, Y+13	; 0x0d
    6228:	8e 85       	ldd	r24, Y+14	; 0x0e
    622a:	9f 85       	ldd	r25, Y+15	; 0x0f
    622c:	20 e0       	ldi	r18, 0x00	; 0
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	40 e2       	ldi	r20, 0x20	; 32
    6232:	51 e4       	ldi	r21, 0x41	; 65
    6234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6238:	dc 01       	movw	r26, r24
    623a:	cb 01       	movw	r24, r22
    623c:	bc 01       	movw	r22, r24
    623e:	cd 01       	movw	r24, r26
    6240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6244:	dc 01       	movw	r26, r24
    6246:	cb 01       	movw	r24, r22
    6248:	9f 83       	std	Y+7, r25	; 0x07
    624a:	8e 83       	std	Y+6, r24	; 0x06
    624c:	0f c0       	rjmp	.+30     	; 0x626c <APP+0x13e>
    624e:	88 ec       	ldi	r24, 0xC8	; 200
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	9d 83       	std	Y+5, r25	; 0x05
    6254:	8c 83       	std	Y+4, r24	; 0x04
    6256:	8c 81       	ldd	r24, Y+4	; 0x04
    6258:	9d 81       	ldd	r25, Y+5	; 0x05
    625a:	01 97       	sbiw	r24, 0x01	; 1
    625c:	f1 f7       	brne	.-4      	; 0x625a <APP+0x12c>
    625e:	9d 83       	std	Y+5, r25	; 0x05
    6260:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6262:	8e 81       	ldd	r24, Y+6	; 0x06
    6264:	9f 81       	ldd	r25, Y+7	; 0x07
    6266:	01 97       	sbiw	r24, 0x01	; 1
    6268:	9f 83       	std	Y+7, r25	; 0x07
    626a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    626c:	8e 81       	ldd	r24, Y+6	; 0x06
    626e:	9f 81       	ldd	r25, Y+7	; 0x07
    6270:	00 97       	sbiw	r24, 0x00	; 0
    6272:	69 f7       	brne	.-38     	; 0x624e <APP+0x120>
    6274:	24 c0       	rjmp	.+72     	; 0x62be <APP+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6276:	68 85       	ldd	r22, Y+8	; 0x08
    6278:	79 85       	ldd	r23, Y+9	; 0x09
    627a:	8a 85       	ldd	r24, Y+10	; 0x0a
    627c:	9b 85       	ldd	r25, Y+11	; 0x0b
    627e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6282:	dc 01       	movw	r26, r24
    6284:	cb 01       	movw	r24, r22
    6286:	9f 83       	std	Y+7, r25	; 0x07
    6288:	8e 83       	std	Y+6, r24	; 0x06
    628a:	8e 81       	ldd	r24, Y+6	; 0x06
    628c:	9f 81       	ldd	r25, Y+7	; 0x07
    628e:	9b 83       	std	Y+3, r25	; 0x03
    6290:	8a 83       	std	Y+2, r24	; 0x02
    6292:	8a 81       	ldd	r24, Y+2	; 0x02
    6294:	9b 81       	ldd	r25, Y+3	; 0x03
    6296:	01 97       	sbiw	r24, 0x01	; 1
    6298:	f1 f7       	brne	.-4      	; 0x6296 <APP+0x168>
    629a:	9b 83       	std	Y+3, r25	; 0x03
    629c:	8a 83       	std	Y+2, r24	; 0x02
    629e:	0f c0       	rjmp	.+30     	; 0x62be <APP+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    62a0:	69 89       	ldd	r22, Y+17	; 0x11
    62a2:	7a 89       	ldd	r23, Y+18	; 0x12
    62a4:	8b 89       	ldd	r24, Y+19	; 0x13
    62a6:	9c 89       	ldd	r25, Y+20	; 0x14
    62a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62ac:	dc 01       	movw	r26, r24
    62ae:	cb 01       	movw	r24, r22
    62b0:	88 8b       	std	Y+16, r24	; 0x10
    62b2:	88 89       	ldd	r24, Y+16	; 0x10
    62b4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    62b6:	89 81       	ldd	r24, Y+1	; 0x01
    62b8:	8a 95       	dec	r24
    62ba:	f1 f7       	brne	.-4      	; 0x62b8 <APP+0x18a>
    62bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	counter++;
    62be:	80 91 bf 04 	lds	r24, 0x04BF
    62c2:	8f 5f       	subi	r24, 0xFF	; 255
    62c4:	80 93 bf 04 	sts	0x04BF, r24
	// READ_FROM IR and assign to GLOBAL VAR. DATA

	// counter is low to let the function execute correctly without interrupting
	if(counter == 20)
    62c8:	80 91 bf 04 	lds	r24, 0x04BF
    62cc:	84 31       	cpi	r24, 0x14	; 20
    62ce:	f1 f4       	brne	.+60     	; 0x630c <APP+0x1de>
	{
		location_before_timer = LCD_u8CurrentLocation_AC();
    62d0:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_u8CurrentLocation_AC>
    62d4:	80 93 be 04 	sts	0x04BE, r24

		// Variable used externally to connect timer with encrypting user input on screen
		crypt += counter;
    62d8:	90 91 c0 04 	lds	r25, 0x04C0
    62dc:	80 91 bf 04 	lds	r24, 0x04BF
    62e0:	89 0f       	add	r24, r25
    62e2:	80 93 c0 04 	sts	0x04C0, r24

		if(hide_me)
    62e6:	80 91 c1 04 	lds	r24, 0x04C1
    62ea:	88 23       	and	r24, r24
    62ec:	21 f4       	brne	.+8      	; 0x62f6 <APP+0x1c8>
			// Hide the clock
		}
		else
		{
			// READ_FROM IR and assign to GLOBAL VAR. DATA
			location_before_timer = LCD_u8CurrentLocation_AC();
    62ee:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_u8CurrentLocation_AC>
    62f2:	80 93 be 04 	sts	0x04BE, r24
		}

		SECONDS_CALL();
    62f6:	0e 94 8f 31 	call	0x631e	; 0x631e <SECONDS_CALL>

		// Reset counter
		counter = 0;
    62fa:	10 92 bf 04 	sts	0x04BF, r1
		LCD_vidInstruction(location_before_timer + (1<<7), write_operation, IR);
    62fe:	80 91 be 04 	lds	r24, 0x04BE
    6302:	80 58       	subi	r24, 0x80	; 128
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	40 e0       	ldi	r20, 0x00	; 0
    6308:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>

	}
}
    630c:	68 96       	adiw	r28, 0x18	; 24
    630e:	0f b6       	in	r0, 0x3f	; 63
    6310:	f8 94       	cli
    6312:	de bf       	out	0x3e, r29	; 62
    6314:	0f be       	out	0x3f, r0	; 63
    6316:	cd bf       	out	0x3d, r28	; 61
    6318:	cf 91       	pop	r28
    631a:	df 91       	pop	r29
    631c:	08 95       	ret

0000631e <SECONDS_CALL>:


void SECONDS_CALL (void)
{
    631e:	df 93       	push	r29
    6320:	cf 93       	push	r28
    6322:	cd b7       	in	r28, 0x3d	; 61
    6324:	de b7       	in	r29, 0x3e	; 62
	// Operation on fields are done first
	seconds++;
    6326:	80 91 58 04 	lds	r24, 0x0458
    632a:	8f 5f       	subi	r24, 0xFF	; 255
    632c:	80 93 58 04 	sts	0x0458, r24
	if(seconds >= 60)
    6330:	80 91 58 04 	lds	r24, 0x0458
    6334:	8c 33       	cpi	r24, 0x3C	; 60
    6336:	28 f1       	brcs	.+74     	; 0x6382 <SECONDS_CALL+0x64>
	{
		seconds = 0;
    6338:	10 92 58 04 	sts	0x0458, r1
		minutes++;
    633c:	80 91 59 04 	lds	r24, 0x0459
    6340:	8f 5f       	subi	r24, 0xFF	; 255
    6342:	80 93 59 04 	sts	0x0459, r24

		if(hide_me)
    6346:	80 91 c1 04 	lds	r24, 0x04C1
    634a:	88 23       	and	r24, r24
    634c:	09 f0       	breq	.+2      	; 0x6350 <SECONDS_CALL+0x32>
    634e:	66 c0       	rjmp	.+204    	; 0x641c <SECONDS_CALL+0xfe>
		{
			// Hide the clock
		}
		else
		{
			LCD_vidInstruction(0x4D + (1<<7), write_operation, IR);
    6350:	8d ec       	ldi	r24, 0xCD	; 205
    6352:	60 e0       	ldi	r22, 0x00	; 0
    6354:	40 e0       	ldi	r20, 0x00	; 0
    6356:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(":");
    635a:	88 e1       	ldi	r24, 0x18	; 24
    635c:	93 e0       	ldi	r25, 0x03	; 3
    635e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			// 15 and 16 positions are for seconds
			LCD_vidInstruction(0x4E + (1<<7), write_operation, IR);
    6362:	8e ec       	ldi	r24, 0xCE	; 206
    6364:	60 e0       	ldi	r22, 0x00	; 0
    6366:	40 e0       	ldi	r20, 0x00	; 0
    6368:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			// Type two zeros in seconds lane
			LCD_vidInstruction(0x30, write_operation, DR);
    636c:	80 e3       	ldi	r24, 0x30	; 48
    636e:	60 e0       	ldi	r22, 0x00	; 0
    6370:	41 e0       	ldi	r20, 0x01	; 1
    6372:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(0x30, write_operation, DR);
    6376:	80 e3       	ldi	r24, 0x30	; 48
    6378:	60 e0       	ldi	r22, 0x00	; 0
    637a:	41 e0       	ldi	r20, 0x01	; 1
    637c:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    6380:	4d c0       	rjmp	.+154    	; 0x641c <SECONDS_CALL+0xfe>
		}
	}

	else if(seconds < 10)
    6382:	80 91 58 04 	lds	r24, 0x0458
    6386:	8a 30       	cpi	r24, 0x0A	; 10
    6388:	00 f5       	brcc	.+64     	; 0x63ca <SECONDS_CALL+0xac>
	{
		// 15 and 16 positions are for seconds
		if(hide_me)
    638a:	80 91 c1 04 	lds	r24, 0x04C1
    638e:	88 23       	and	r24, r24
    6390:	09 f0       	breq	.+2      	; 0x6394 <SECONDS_CALL+0x76>
    6392:	44 c0       	rjmp	.+136    	; 0x641c <SECONDS_CALL+0xfe>
		{
			// Hide the clock
		}
		else
		{
			LCD_vidInstruction(0x4D + (1<<7), write_operation, IR);
    6394:	8d ec       	ldi	r24, 0xCD	; 205
    6396:	60 e0       	ldi	r22, 0x00	; 0
    6398:	40 e0       	ldi	r20, 0x00	; 0
    639a:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(":");
    639e:	88 e1       	ldi	r24, 0x18	; 24
    63a0:	93 e0       	ldi	r25, 0x03	; 3
    63a2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			//LCD_vidGoTo(15, 1);
			LCD_vidInstruction(0x4E + (1<<7), write_operation, IR);
    63a6:	8e ec       	ldi	r24, 0xCE	; 206
    63a8:	60 e0       	ldi	r22, 0x00	; 0
    63aa:	40 e0       	ldi	r20, 0x00	; 0
    63ac:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			// Type zero at the beginning then seconds
			LCD_vidInstruction(0x30, write_operation, DR);
    63b0:	80 e3       	ldi	r24, 0x30	; 48
    63b2:	60 e0       	ldi	r22, 0x00	; 0
    63b4:	41 e0       	ldi	r20, 0x01	; 1
    63b6:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(seconds + 0x30, write_operation, DR);
    63ba:	80 91 58 04 	lds	r24, 0x0458
    63be:	80 5d       	subi	r24, 0xD0	; 208
    63c0:	60 e0       	ldi	r22, 0x00	; 0
    63c2:	41 e0       	ldi	r20, 0x01	; 1
    63c4:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    63c8:	29 c0       	rjmp	.+82     	; 0x641c <SECONDS_CALL+0xfe>
		}
	}

	else
	{
		if(hide_me)
    63ca:	80 91 c1 04 	lds	r24, 0x04C1
    63ce:	88 23       	and	r24, r24
    63d0:	29 f5       	brne	.+74     	; 0x641c <SECONDS_CALL+0xfe>
		{
			// Hide the clock
		}
		else
		{
			LCD_vidInstruction(0x4D + (1<<7), write_operation, IR);
    63d2:	8d ec       	ldi	r24, 0xCD	; 205
    63d4:	60 e0       	ldi	r22, 0x00	; 0
    63d6:	40 e0       	ldi	r20, 0x00	; 0
    63d8:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(":");
    63dc:	88 e1       	ldi	r24, 0x18	; 24
    63de:	93 e0       	ldi	r25, 0x03	; 3
    63e0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			LCD_vidInstruction(0x4E + (1<<7), write_operation, IR);
    63e4:	8e ec       	ldi	r24, 0xCE	; 206
    63e6:	60 e0       	ldi	r22, 0x00	; 0
    63e8:	40 e0       	ldi	r20, 0x00	; 0
    63ea:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction((seconds/10 + 0x30), write_operation, DR);
    63ee:	80 91 58 04 	lds	r24, 0x0458
    63f2:	9a e0       	ldi	r25, 0x0A	; 10
    63f4:	69 2f       	mov	r22, r25
    63f6:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    63fa:	80 5d       	subi	r24, 0xD0	; 208
    63fc:	60 e0       	ldi	r22, 0x00	; 0
    63fe:	41 e0       	ldi	r20, 0x01	; 1
    6400:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction((seconds%10 + 0x30), write_operation, DR);
    6404:	80 91 58 04 	lds	r24, 0x0458
    6408:	9a e0       	ldi	r25, 0x0A	; 10
    640a:	69 2f       	mov	r22, r25
    640c:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    6410:	89 2f       	mov	r24, r25
    6412:	80 5d       	subi	r24, 0xD0	; 208
    6414:	60 e0       	ldi	r22, 0x00	; 0
    6416:	41 e0       	ldi	r20, 0x01	; 1
    6418:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
		}
	}
	MINUTES_CALL();
    641c:	0e 94 13 32 	call	0x6426	; 0x6426 <MINUTES_CALL>
}
    6420:	cf 91       	pop	r28
    6422:	df 91       	pop	r29
    6424:	08 95       	ret

00006426 <MINUTES_CALL>:

void MINUTES_CALL (void)
{
    6426:	df 93       	push	r29
    6428:	cf 93       	push	r28
    642a:	cd b7       	in	r28, 0x3d	; 61
    642c:	de b7       	in	r29, 0x3e	; 62
	if(minutes >= 60)
    642e:	80 91 59 04 	lds	r24, 0x0459
    6432:	8c 33       	cpi	r24, 0x3C	; 60
    6434:	28 f1       	brcs	.+74     	; 0x6480 <MINUTES_CALL+0x5a>
	{
		minutes = 0;
    6436:	10 92 59 04 	sts	0x0459, r1
		hours++;
    643a:	80 91 5a 04 	lds	r24, 0x045A
    643e:	8f 5f       	subi	r24, 0xFF	; 255
    6440:	80 93 5a 04 	sts	0x045A, r24

		// Indication for minutes

		if(hide_me)
    6444:	80 91 c1 04 	lds	r24, 0x04C1
    6448:	88 23       	and	r24, r24
    644a:	09 f0       	breq	.+2      	; 0x644e <MINUTES_CALL+0x28>
    644c:	66 c0       	rjmp	.+204    	; 0x651a <MINUTES_CALL+0xf4>
		{
			// Hide the clock
		}
		else
		{
			LCD_vidInstruction(0x4A + (1<<7), write_operation, IR);
    644e:	8a ec       	ldi	r24, 0xCA	; 202
    6450:	60 e0       	ldi	r22, 0x00	; 0
    6452:	40 e0       	ldi	r20, 0x00	; 0
    6454:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(":");
    6458:	88 e1       	ldi	r24, 0x18	; 24
    645a:	93 e0       	ldi	r25, 0x03	; 3
    645c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			// 12 and 13 positions are  for minutes lane
			LCD_vidInstruction(0x4B + (1<<7), write_operation, IR);
    6460:	8b ec       	ldi	r24, 0xCB	; 203
    6462:	60 e0       	ldi	r22, 0x00	; 0
    6464:	40 e0       	ldi	r20, 0x00	; 0
    6466:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			// Type two zeros
			LCD_vidInstruction(0x30, write_operation, DR);
    646a:	80 e3       	ldi	r24, 0x30	; 48
    646c:	60 e0       	ldi	r22, 0x00	; 0
    646e:	41 e0       	ldi	r20, 0x01	; 1
    6470:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(0x30, write_operation, DR);
    6474:	80 e3       	ldi	r24, 0x30	; 48
    6476:	60 e0       	ldi	r22, 0x00	; 0
    6478:	41 e0       	ldi	r20, 0x01	; 1
    647a:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    647e:	4d c0       	rjmp	.+154    	; 0x651a <MINUTES_CALL+0xf4>
		}
	}
	else if(minutes < 10)
    6480:	80 91 59 04 	lds	r24, 0x0459
    6484:	8a 30       	cpi	r24, 0x0A	; 10
    6486:	00 f5       	brcc	.+64     	; 0x64c8 <MINUTES_CALL+0xa2>
	{
		// Indication for minutes
		if(hide_me)
    6488:	80 91 c1 04 	lds	r24, 0x04C1
    648c:	88 23       	and	r24, r24
    648e:	09 f0       	breq	.+2      	; 0x6492 <MINUTES_CALL+0x6c>
    6490:	44 c0       	rjmp	.+136    	; 0x651a <MINUTES_CALL+0xf4>
		{
			// Hide the clock
		}
		else
		{
			LCD_vidInstruction(0x4A + (1<<7), write_operation, IR);
    6492:	8a ec       	ldi	r24, 0xCA	; 202
    6494:	60 e0       	ldi	r22, 0x00	; 0
    6496:	40 e0       	ldi	r20, 0x00	; 0
    6498:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(":");
    649c:	88 e1       	ldi	r24, 0x18	; 24
    649e:	93 e0       	ldi	r25, 0x03	; 3
    64a0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			// 12 and 13 positions are  for minutes
			LCD_vidInstruction(0x4B + (1<<7), write_operation, IR);
    64a4:	8b ec       	ldi	r24, 0xCB	; 203
    64a6:	60 e0       	ldi	r22, 0x00	; 0
    64a8:	40 e0       	ldi	r20, 0x00	; 0
    64aa:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			// Type zero at the beginning then minutes
			LCD_vidInstruction(0x30, write_operation, DR);
    64ae:	80 e3       	ldi	r24, 0x30	; 48
    64b0:	60 e0       	ldi	r22, 0x00	; 0
    64b2:	41 e0       	ldi	r20, 0x01	; 1
    64b4:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(minutes + 0x30, write_operation, DR);
    64b8:	80 91 59 04 	lds	r24, 0x0459
    64bc:	80 5d       	subi	r24, 0xD0	; 208
    64be:	60 e0       	ldi	r22, 0x00	; 0
    64c0:	41 e0       	ldi	r20, 0x01	; 1
    64c2:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    64c6:	29 c0       	rjmp	.+82     	; 0x651a <MINUTES_CALL+0xf4>
		}
	}
	else
	{
		if(hide_me)
    64c8:	80 91 c1 04 	lds	r24, 0x04C1
    64cc:	88 23       	and	r24, r24
    64ce:	29 f5       	brne	.+74     	; 0x651a <MINUTES_CALL+0xf4>
		{
			// Hide the clock
		}
		else
		{
			LCD_vidInstruction(0x4A + (1<<7), write_operation, IR);
    64d0:	8a ec       	ldi	r24, 0xCA	; 202
    64d2:	60 e0       	ldi	r22, 0x00	; 0
    64d4:	40 e0       	ldi	r20, 0x00	; 0
    64d6:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_String(":");
    64da:	88 e1       	ldi	r24, 0x18	; 24
    64dc:	93 e0       	ldi	r25, 0x03	; 3
    64de:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_String>

			// 12 and 13 positions are  for minutes
			LCD_vidInstruction(0x4B + (1<<7), write_operation, IR);
    64e2:	8b ec       	ldi	r24, 0xCB	; 203
    64e4:	60 e0       	ldi	r22, 0x00	; 0
    64e6:	40 e0       	ldi	r20, 0x00	; 0
    64e8:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction((minutes/10 + 0x30), write_operation, DR);
    64ec:	80 91 59 04 	lds	r24, 0x0459
    64f0:	9a e0       	ldi	r25, 0x0A	; 10
    64f2:	69 2f       	mov	r22, r25
    64f4:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    64f8:	80 5d       	subi	r24, 0xD0	; 208
    64fa:	60 e0       	ldi	r22, 0x00	; 0
    64fc:	41 e0       	ldi	r20, 0x01	; 1
    64fe:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction((minutes%10 + 0x30), write_operation, DR);
    6502:	80 91 59 04 	lds	r24, 0x0459
    6506:	9a e0       	ldi	r25, 0x0A	; 10
    6508:	69 2f       	mov	r22, r25
    650a:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    650e:	89 2f       	mov	r24, r25
    6510:	80 5d       	subi	r24, 0xD0	; 208
    6512:	60 e0       	ldi	r22, 0x00	; 0
    6514:	41 e0       	ldi	r20, 0x01	; 1
    6516:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
		}
	}
	HOURS_CALL();
    651a:	0e 94 92 32 	call	0x6524	; 0x6524 <HOURS_CALL>
}
    651e:	cf 91       	pop	r28
    6520:	df 91       	pop	r29
    6522:	08 95       	ret

00006524 <HOURS_CALL>:

void HOURS_CALL (void)
{
    6524:	df 93       	push	r29
    6526:	cf 93       	push	r28
    6528:	cd b7       	in	r28, 0x3d	; 61
    652a:	de b7       	in	r29, 0x3e	; 62
	if(hide_me)
    652c:	80 91 c1 04 	lds	r24, 0x04C1
    6530:	88 23       	and	r24, r24
    6532:	91 f5       	brne	.+100    	; 0x6598 <HOURS_CALL+0x74>
	{

	}
	else
	{
		if(hours < 10)
    6534:	80 91 5a 04 	lds	r24, 0x045A
    6538:	8a 30       	cpi	r24, 0x0A	; 10
    653a:	90 f4       	brcc	.+36     	; 0x6560 <HOURS_CALL+0x3c>
		{
			// 9 and 10 positions are  for hours;
			LCD_vidInstruction(0x48 + (1<<7), write_operation, IR);
    653c:	88 ec       	ldi	r24, 0xC8	; 200
    653e:	60 e0       	ldi	r22, 0x00	; 0
    6540:	40 e0       	ldi	r20, 0x00	; 0
    6542:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(0x30, write_operation, DR);
    6546:	80 e3       	ldi	r24, 0x30	; 48
    6548:	60 e0       	ldi	r22, 0x00	; 0
    654a:	41 e0       	ldi	r20, 0x01	; 1
    654c:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(hours + 0x30, write_operation, DR);
    6550:	80 91 5a 04 	lds	r24, 0x045A
    6554:	80 5d       	subi	r24, 0xD0	; 208
    6556:	60 e0       	ldi	r22, 0x00	; 0
    6558:	41 e0       	ldi	r20, 0x01	; 1
    655a:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
    655e:	1c c0       	rjmp	.+56     	; 0x6598 <HOURS_CALL+0x74>
		}
		else
		{
			LCD_vidInstruction(0x48 + (1<<7), write_operation, IR);
    6560:	88 ec       	ldi	r24, 0xC8	; 200
    6562:	60 e0       	ldi	r22, 0x00	; 0
    6564:	40 e0       	ldi	r20, 0x00	; 0
    6566:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(hours / 10 + 0x30, write_operation, DR);
    656a:	80 91 5a 04 	lds	r24, 0x045A
    656e:	9a e0       	ldi	r25, 0x0A	; 10
    6570:	69 2f       	mov	r22, r25
    6572:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    6576:	80 5d       	subi	r24, 0xD0	; 208
    6578:	60 e0       	ldi	r22, 0x00	; 0
    657a:	41 e0       	ldi	r20, 0x01	; 1
    657c:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
			LCD_vidInstruction(hours % 10 + 0x30, write_operation, DR);
    6580:	80 91 5a 04 	lds	r24, 0x045A
    6584:	9a e0       	ldi	r25, 0x0A	; 10
    6586:	69 2f       	mov	r22, r25
    6588:	0e 94 cf 32 	call	0x659e	; 0x659e <__udivmodqi4>
    658c:	89 2f       	mov	r24, r25
    658e:	80 5d       	subi	r24, 0xD0	; 208
    6590:	60 e0       	ldi	r22, 0x00	; 0
    6592:	41 e0       	ldi	r20, 0x01	; 1
    6594:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_vidInstruction>
		}
	}
}
    6598:	cf 91       	pop	r28
    659a:	df 91       	pop	r29
    659c:	08 95       	ret

0000659e <__udivmodqi4>:
    659e:	99 1b       	sub	r25, r25
    65a0:	79 e0       	ldi	r23, 0x09	; 9
    65a2:	04 c0       	rjmp	.+8      	; 0x65ac <__udivmodqi4_ep>

000065a4 <__udivmodqi4_loop>:
    65a4:	99 1f       	adc	r25, r25
    65a6:	96 17       	cp	r25, r22
    65a8:	08 f0       	brcs	.+2      	; 0x65ac <__udivmodqi4_ep>
    65aa:	96 1b       	sub	r25, r22

000065ac <__udivmodqi4_ep>:
    65ac:	88 1f       	adc	r24, r24
    65ae:	7a 95       	dec	r23
    65b0:	c9 f7       	brne	.-14     	; 0x65a4 <__udivmodqi4_loop>
    65b2:	80 95       	com	r24
    65b4:	08 95       	ret

000065b6 <__udivmodhi4>:
    65b6:	aa 1b       	sub	r26, r26
    65b8:	bb 1b       	sub	r27, r27
    65ba:	51 e1       	ldi	r21, 0x11	; 17
    65bc:	07 c0       	rjmp	.+14     	; 0x65cc <__udivmodhi4_ep>

000065be <__udivmodhi4_loop>:
    65be:	aa 1f       	adc	r26, r26
    65c0:	bb 1f       	adc	r27, r27
    65c2:	a6 17       	cp	r26, r22
    65c4:	b7 07       	cpc	r27, r23
    65c6:	10 f0       	brcs	.+4      	; 0x65cc <__udivmodhi4_ep>
    65c8:	a6 1b       	sub	r26, r22
    65ca:	b7 0b       	sbc	r27, r23

000065cc <__udivmodhi4_ep>:
    65cc:	88 1f       	adc	r24, r24
    65ce:	99 1f       	adc	r25, r25
    65d0:	5a 95       	dec	r21
    65d2:	a9 f7       	brne	.-22     	; 0x65be <__udivmodhi4_loop>
    65d4:	80 95       	com	r24
    65d6:	90 95       	com	r25
    65d8:	bc 01       	movw	r22, r24
    65da:	cd 01       	movw	r24, r26
    65dc:	08 95       	ret

000065de <__divmodhi4>:
    65de:	97 fb       	bst	r25, 7
    65e0:	09 2e       	mov	r0, r25
    65e2:	07 26       	eor	r0, r23
    65e4:	0a d0       	rcall	.+20     	; 0x65fa <__divmodhi4_neg1>
    65e6:	77 fd       	sbrc	r23, 7
    65e8:	04 d0       	rcall	.+8      	; 0x65f2 <__divmodhi4_neg2>
    65ea:	e5 df       	rcall	.-54     	; 0x65b6 <__udivmodhi4>
    65ec:	06 d0       	rcall	.+12     	; 0x65fa <__divmodhi4_neg1>
    65ee:	00 20       	and	r0, r0
    65f0:	1a f4       	brpl	.+6      	; 0x65f8 <__divmodhi4_exit>

000065f2 <__divmodhi4_neg2>:
    65f2:	70 95       	com	r23
    65f4:	61 95       	neg	r22
    65f6:	7f 4f       	sbci	r23, 0xFF	; 255

000065f8 <__divmodhi4_exit>:
    65f8:	08 95       	ret

000065fa <__divmodhi4_neg1>:
    65fa:	f6 f7       	brtc	.-4      	; 0x65f8 <__divmodhi4_exit>
    65fc:	90 95       	com	r25
    65fe:	81 95       	neg	r24
    6600:	9f 4f       	sbci	r25, 0xFF	; 255
    6602:	08 95       	ret

00006604 <__prologue_saves__>:
    6604:	2f 92       	push	r2
    6606:	3f 92       	push	r3
    6608:	4f 92       	push	r4
    660a:	5f 92       	push	r5
    660c:	6f 92       	push	r6
    660e:	7f 92       	push	r7
    6610:	8f 92       	push	r8
    6612:	9f 92       	push	r9
    6614:	af 92       	push	r10
    6616:	bf 92       	push	r11
    6618:	cf 92       	push	r12
    661a:	df 92       	push	r13
    661c:	ef 92       	push	r14
    661e:	ff 92       	push	r15
    6620:	0f 93       	push	r16
    6622:	1f 93       	push	r17
    6624:	cf 93       	push	r28
    6626:	df 93       	push	r29
    6628:	cd b7       	in	r28, 0x3d	; 61
    662a:	de b7       	in	r29, 0x3e	; 62
    662c:	ca 1b       	sub	r28, r26
    662e:	db 0b       	sbc	r29, r27
    6630:	0f b6       	in	r0, 0x3f	; 63
    6632:	f8 94       	cli
    6634:	de bf       	out	0x3e, r29	; 62
    6636:	0f be       	out	0x3f, r0	; 63
    6638:	cd bf       	out	0x3d, r28	; 61
    663a:	09 94       	ijmp

0000663c <__epilogue_restores__>:
    663c:	2a 88       	ldd	r2, Y+18	; 0x12
    663e:	39 88       	ldd	r3, Y+17	; 0x11
    6640:	48 88       	ldd	r4, Y+16	; 0x10
    6642:	5f 84       	ldd	r5, Y+15	; 0x0f
    6644:	6e 84       	ldd	r6, Y+14	; 0x0e
    6646:	7d 84       	ldd	r7, Y+13	; 0x0d
    6648:	8c 84       	ldd	r8, Y+12	; 0x0c
    664a:	9b 84       	ldd	r9, Y+11	; 0x0b
    664c:	aa 84       	ldd	r10, Y+10	; 0x0a
    664e:	b9 84       	ldd	r11, Y+9	; 0x09
    6650:	c8 84       	ldd	r12, Y+8	; 0x08
    6652:	df 80       	ldd	r13, Y+7	; 0x07
    6654:	ee 80       	ldd	r14, Y+6	; 0x06
    6656:	fd 80       	ldd	r15, Y+5	; 0x05
    6658:	0c 81       	ldd	r16, Y+4	; 0x04
    665a:	1b 81       	ldd	r17, Y+3	; 0x03
    665c:	aa 81       	ldd	r26, Y+2	; 0x02
    665e:	b9 81       	ldd	r27, Y+1	; 0x01
    6660:	ce 0f       	add	r28, r30
    6662:	d1 1d       	adc	r29, r1
    6664:	0f b6       	in	r0, 0x3f	; 63
    6666:	f8 94       	cli
    6668:	de bf       	out	0x3e, r29	; 62
    666a:	0f be       	out	0x3f, r0	; 63
    666c:	cd bf       	out	0x3d, r28	; 61
    666e:	ed 01       	movw	r28, r26
    6670:	08 95       	ret

00006672 <malloc>:
    6672:	cf 93       	push	r28
    6674:	df 93       	push	r29
    6676:	bc 01       	movw	r22, r24
    6678:	82 30       	cpi	r24, 0x02	; 2
    667a:	91 05       	cpc	r25, r1
    667c:	10 f4       	brcc	.+4      	; 0x6682 <malloc+0x10>
    667e:	62 e0       	ldi	r22, 0x02	; 2
    6680:	70 e0       	ldi	r23, 0x00	; 0
    6682:	a0 91 ce 04 	lds	r26, 0x04CE
    6686:	b0 91 cf 04 	lds	r27, 0x04CF
    668a:	ed 01       	movw	r28, r26
    668c:	e0 e0       	ldi	r30, 0x00	; 0
    668e:	f0 e0       	ldi	r31, 0x00	; 0
    6690:	40 e0       	ldi	r20, 0x00	; 0
    6692:	50 e0       	ldi	r21, 0x00	; 0
    6694:	21 c0       	rjmp	.+66     	; 0x66d8 <malloc+0x66>
    6696:	88 81       	ld	r24, Y
    6698:	99 81       	ldd	r25, Y+1	; 0x01
    669a:	86 17       	cp	r24, r22
    669c:	97 07       	cpc	r25, r23
    669e:	69 f4       	brne	.+26     	; 0x66ba <malloc+0x48>
    66a0:	8a 81       	ldd	r24, Y+2	; 0x02
    66a2:	9b 81       	ldd	r25, Y+3	; 0x03
    66a4:	30 97       	sbiw	r30, 0x00	; 0
    66a6:	19 f0       	breq	.+6      	; 0x66ae <malloc+0x3c>
    66a8:	93 83       	std	Z+3, r25	; 0x03
    66aa:	82 83       	std	Z+2, r24	; 0x02
    66ac:	04 c0       	rjmp	.+8      	; 0x66b6 <malloc+0x44>
    66ae:	90 93 cf 04 	sts	0x04CF, r25
    66b2:	80 93 ce 04 	sts	0x04CE, r24
    66b6:	fe 01       	movw	r30, r28
    66b8:	34 c0       	rjmp	.+104    	; 0x6722 <malloc+0xb0>
    66ba:	68 17       	cp	r22, r24
    66bc:	79 07       	cpc	r23, r25
    66be:	38 f4       	brcc	.+14     	; 0x66ce <malloc+0x5c>
    66c0:	41 15       	cp	r20, r1
    66c2:	51 05       	cpc	r21, r1
    66c4:	19 f0       	breq	.+6      	; 0x66cc <malloc+0x5a>
    66c6:	84 17       	cp	r24, r20
    66c8:	95 07       	cpc	r25, r21
    66ca:	08 f4       	brcc	.+2      	; 0x66ce <malloc+0x5c>
    66cc:	ac 01       	movw	r20, r24
    66ce:	fe 01       	movw	r30, r28
    66d0:	8a 81       	ldd	r24, Y+2	; 0x02
    66d2:	9b 81       	ldd	r25, Y+3	; 0x03
    66d4:	9c 01       	movw	r18, r24
    66d6:	e9 01       	movw	r28, r18
    66d8:	20 97       	sbiw	r28, 0x00	; 0
    66da:	e9 f6       	brne	.-70     	; 0x6696 <malloc+0x24>
    66dc:	41 15       	cp	r20, r1
    66de:	51 05       	cpc	r21, r1
    66e0:	a9 f1       	breq	.+106    	; 0x674c <malloc+0xda>
    66e2:	ca 01       	movw	r24, r20
    66e4:	86 1b       	sub	r24, r22
    66e6:	97 0b       	sbc	r25, r23
    66e8:	04 97       	sbiw	r24, 0x04	; 4
    66ea:	08 f4       	brcc	.+2      	; 0x66ee <malloc+0x7c>
    66ec:	ba 01       	movw	r22, r20
    66ee:	e0 e0       	ldi	r30, 0x00	; 0
    66f0:	f0 e0       	ldi	r31, 0x00	; 0
    66f2:	2a c0       	rjmp	.+84     	; 0x6748 <malloc+0xd6>
    66f4:	8d 91       	ld	r24, X+
    66f6:	9c 91       	ld	r25, X
    66f8:	11 97       	sbiw	r26, 0x01	; 1
    66fa:	84 17       	cp	r24, r20
    66fc:	95 07       	cpc	r25, r21
    66fe:	f9 f4       	brne	.+62     	; 0x673e <malloc+0xcc>
    6700:	64 17       	cp	r22, r20
    6702:	75 07       	cpc	r23, r21
    6704:	81 f4       	brne	.+32     	; 0x6726 <malloc+0xb4>
    6706:	12 96       	adiw	r26, 0x02	; 2
    6708:	8d 91       	ld	r24, X+
    670a:	9c 91       	ld	r25, X
    670c:	13 97       	sbiw	r26, 0x03	; 3
    670e:	30 97       	sbiw	r30, 0x00	; 0
    6710:	19 f0       	breq	.+6      	; 0x6718 <malloc+0xa6>
    6712:	93 83       	std	Z+3, r25	; 0x03
    6714:	82 83       	std	Z+2, r24	; 0x02
    6716:	04 c0       	rjmp	.+8      	; 0x6720 <malloc+0xae>
    6718:	90 93 cf 04 	sts	0x04CF, r25
    671c:	80 93 ce 04 	sts	0x04CE, r24
    6720:	fd 01       	movw	r30, r26
    6722:	32 96       	adiw	r30, 0x02	; 2
    6724:	4f c0       	rjmp	.+158    	; 0x67c4 <malloc+0x152>
    6726:	ca 01       	movw	r24, r20
    6728:	86 1b       	sub	r24, r22
    672a:	97 0b       	sbc	r25, r23
    672c:	fd 01       	movw	r30, r26
    672e:	e8 0f       	add	r30, r24
    6730:	f9 1f       	adc	r31, r25
    6732:	61 93       	st	Z+, r22
    6734:	71 93       	st	Z+, r23
    6736:	02 97       	sbiw	r24, 0x02	; 2
    6738:	8d 93       	st	X+, r24
    673a:	9c 93       	st	X, r25
    673c:	43 c0       	rjmp	.+134    	; 0x67c4 <malloc+0x152>
    673e:	fd 01       	movw	r30, r26
    6740:	82 81       	ldd	r24, Z+2	; 0x02
    6742:	93 81       	ldd	r25, Z+3	; 0x03
    6744:	9c 01       	movw	r18, r24
    6746:	d9 01       	movw	r26, r18
    6748:	10 97       	sbiw	r26, 0x00	; 0
    674a:	a1 f6       	brne	.-88     	; 0x66f4 <malloc+0x82>
    674c:	80 91 cc 04 	lds	r24, 0x04CC
    6750:	90 91 cd 04 	lds	r25, 0x04CD
    6754:	89 2b       	or	r24, r25
    6756:	41 f4       	brne	.+16     	; 0x6768 <malloc+0xf6>
    6758:	80 91 24 04 	lds	r24, 0x0424
    675c:	90 91 25 04 	lds	r25, 0x0425
    6760:	90 93 cd 04 	sts	0x04CD, r25
    6764:	80 93 cc 04 	sts	0x04CC, r24
    6768:	40 91 26 04 	lds	r20, 0x0426
    676c:	50 91 27 04 	lds	r21, 0x0427
    6770:	41 15       	cp	r20, r1
    6772:	51 05       	cpc	r21, r1
    6774:	41 f4       	brne	.+16     	; 0x6786 <malloc+0x114>
    6776:	4d b7       	in	r20, 0x3d	; 61
    6778:	5e b7       	in	r21, 0x3e	; 62
    677a:	80 91 22 04 	lds	r24, 0x0422
    677e:	90 91 23 04 	lds	r25, 0x0423
    6782:	48 1b       	sub	r20, r24
    6784:	59 0b       	sbc	r21, r25
    6786:	20 91 cc 04 	lds	r18, 0x04CC
    678a:	30 91 cd 04 	lds	r19, 0x04CD
    678e:	24 17       	cp	r18, r20
    6790:	35 07       	cpc	r19, r21
    6792:	b0 f4       	brcc	.+44     	; 0x67c0 <malloc+0x14e>
    6794:	ca 01       	movw	r24, r20
    6796:	82 1b       	sub	r24, r18
    6798:	93 0b       	sbc	r25, r19
    679a:	86 17       	cp	r24, r22
    679c:	97 07       	cpc	r25, r23
    679e:	80 f0       	brcs	.+32     	; 0x67c0 <malloc+0x14e>
    67a0:	ab 01       	movw	r20, r22
    67a2:	4e 5f       	subi	r20, 0xFE	; 254
    67a4:	5f 4f       	sbci	r21, 0xFF	; 255
    67a6:	84 17       	cp	r24, r20
    67a8:	95 07       	cpc	r25, r21
    67aa:	50 f0       	brcs	.+20     	; 0x67c0 <malloc+0x14e>
    67ac:	42 0f       	add	r20, r18
    67ae:	53 1f       	adc	r21, r19
    67b0:	50 93 cd 04 	sts	0x04CD, r21
    67b4:	40 93 cc 04 	sts	0x04CC, r20
    67b8:	f9 01       	movw	r30, r18
    67ba:	61 93       	st	Z+, r22
    67bc:	71 93       	st	Z+, r23
    67be:	02 c0       	rjmp	.+4      	; 0x67c4 <malloc+0x152>
    67c0:	e0 e0       	ldi	r30, 0x00	; 0
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	cf 01       	movw	r24, r30
    67c6:	df 91       	pop	r29
    67c8:	cf 91       	pop	r28
    67ca:	08 95       	ret

000067cc <free>:
    67cc:	cf 93       	push	r28
    67ce:	df 93       	push	r29
    67d0:	00 97       	sbiw	r24, 0x00	; 0
    67d2:	09 f4       	brne	.+2      	; 0x67d6 <free+0xa>
    67d4:	50 c0       	rjmp	.+160    	; 0x6876 <free+0xaa>
    67d6:	ec 01       	movw	r28, r24
    67d8:	22 97       	sbiw	r28, 0x02	; 2
    67da:	1b 82       	std	Y+3, r1	; 0x03
    67dc:	1a 82       	std	Y+2, r1	; 0x02
    67de:	a0 91 ce 04 	lds	r26, 0x04CE
    67e2:	b0 91 cf 04 	lds	r27, 0x04CF
    67e6:	10 97       	sbiw	r26, 0x00	; 0
    67e8:	09 f1       	breq	.+66     	; 0x682c <free+0x60>
    67ea:	40 e0       	ldi	r20, 0x00	; 0
    67ec:	50 e0       	ldi	r21, 0x00	; 0
    67ee:	ac 17       	cp	r26, r28
    67f0:	bd 07       	cpc	r27, r29
    67f2:	08 f1       	brcs	.+66     	; 0x6836 <free+0x6a>
    67f4:	bb 83       	std	Y+3, r27	; 0x03
    67f6:	aa 83       	std	Y+2, r26	; 0x02
    67f8:	fe 01       	movw	r30, r28
    67fa:	21 91       	ld	r18, Z+
    67fc:	31 91       	ld	r19, Z+
    67fe:	e2 0f       	add	r30, r18
    6800:	f3 1f       	adc	r31, r19
    6802:	ae 17       	cp	r26, r30
    6804:	bf 07       	cpc	r27, r31
    6806:	79 f4       	brne	.+30     	; 0x6826 <free+0x5a>
    6808:	8d 91       	ld	r24, X+
    680a:	9c 91       	ld	r25, X
    680c:	11 97       	sbiw	r26, 0x01	; 1
    680e:	28 0f       	add	r18, r24
    6810:	39 1f       	adc	r19, r25
    6812:	2e 5f       	subi	r18, 0xFE	; 254
    6814:	3f 4f       	sbci	r19, 0xFF	; 255
    6816:	39 83       	std	Y+1, r19	; 0x01
    6818:	28 83       	st	Y, r18
    681a:	12 96       	adiw	r26, 0x02	; 2
    681c:	8d 91       	ld	r24, X+
    681e:	9c 91       	ld	r25, X
    6820:	13 97       	sbiw	r26, 0x03	; 3
    6822:	9b 83       	std	Y+3, r25	; 0x03
    6824:	8a 83       	std	Y+2, r24	; 0x02
    6826:	41 15       	cp	r20, r1
    6828:	51 05       	cpc	r21, r1
    682a:	71 f4       	brne	.+28     	; 0x6848 <free+0x7c>
    682c:	d0 93 cf 04 	sts	0x04CF, r29
    6830:	c0 93 ce 04 	sts	0x04CE, r28
    6834:	20 c0       	rjmp	.+64     	; 0x6876 <free+0xaa>
    6836:	12 96       	adiw	r26, 0x02	; 2
    6838:	8d 91       	ld	r24, X+
    683a:	9c 91       	ld	r25, X
    683c:	13 97       	sbiw	r26, 0x03	; 3
    683e:	ad 01       	movw	r20, r26
    6840:	00 97       	sbiw	r24, 0x00	; 0
    6842:	11 f0       	breq	.+4      	; 0x6848 <free+0x7c>
    6844:	dc 01       	movw	r26, r24
    6846:	d3 cf       	rjmp	.-90     	; 0x67ee <free+0x22>
    6848:	fa 01       	movw	r30, r20
    684a:	d3 83       	std	Z+3, r29	; 0x03
    684c:	c2 83       	std	Z+2, r28	; 0x02
    684e:	21 91       	ld	r18, Z+
    6850:	31 91       	ld	r19, Z+
    6852:	e2 0f       	add	r30, r18
    6854:	f3 1f       	adc	r31, r19
    6856:	ce 17       	cp	r28, r30
    6858:	df 07       	cpc	r29, r31
    685a:	69 f4       	brne	.+26     	; 0x6876 <free+0xaa>
    685c:	88 81       	ld	r24, Y
    685e:	99 81       	ldd	r25, Y+1	; 0x01
    6860:	28 0f       	add	r18, r24
    6862:	39 1f       	adc	r19, r25
    6864:	2e 5f       	subi	r18, 0xFE	; 254
    6866:	3f 4f       	sbci	r19, 0xFF	; 255
    6868:	fa 01       	movw	r30, r20
    686a:	31 83       	std	Z+1, r19	; 0x01
    686c:	20 83       	st	Z, r18
    686e:	8a 81       	ldd	r24, Y+2	; 0x02
    6870:	9b 81       	ldd	r25, Y+3	; 0x03
    6872:	93 83       	std	Z+3, r25	; 0x03
    6874:	82 83       	std	Z+2, r24	; 0x02
    6876:	df 91       	pop	r29
    6878:	cf 91       	pop	r28
    687a:	08 95       	ret

0000687c <_exit>:
    687c:	f8 94       	cli

0000687e <__stop_program>:
    687e:	ff cf       	rjmp	.-2      	; 0x687e <__stop_program>
