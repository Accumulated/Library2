
library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002fa  00800060  00005ac4  00005b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  0080035a  0080035a  00005e52  2**0
                  ALLOC
  3 .stab         000055d4  00000000  00000000  00005e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000169d  00000000  00000000  0000b428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000cac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000cc25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000edf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000fefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000112be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 2a 	call	0x558c	; 0x558c <main>
      8a:	0c 94 60 2d 	jmp	0x5ac0	; 0x5ac0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e1       	ldi	r26, 0x1B	; 27
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e1       	ldi	r24, 0x1B	; 27
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e1       	ldi	r22, 0x1B	; 27
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vidSetPortxDir>:
 *	1 -> OUTPUT
 */

/* PORTx Direction only*/
void DIO_vidSetPortxDir(u8 PortName, u8 PortDir)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vidSetPortxDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vidSetPortxDir+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortName)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3c 83       	std	Y+4, r19	; 0x04
     cb6:	2b 83       	std	Y+3, r18	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	09 f1       	breq	.+66     	; 0xd04 <DIO_vidSetPortxDir+0x66>
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <DIO_vidSetPortxDir+0x38>
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <DIO_vidSetPortxDir+0x4e>
     cd4:	3a c0       	rjmp	.+116    	; 0xd4a <DIO_vidSetPortxDir+0xac>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	f1 f0       	breq	.+60     	; 0xd1c <DIO_vidSetPortxDir+0x7e>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	29 f1       	breq	.+74     	; 0xd34 <DIO_vidSetPortxDir+0x96>
     cea:	2f c0       	rjmp	.+94     	; 0xd4a <DIO_vidSetPortxDir+0xac>
	{
		// PORTA in AVR MICROCONTROLLER
		case PORTA:
			if(PortDir == INPUT)
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	88 23       	and	r24, r24
     cf0:	21 f4       	brne	.+8      	; 0xcfa <DIO_vidSetPortxDir+0x5c>
			{
				// DDR for register is all input directed
				DDRA_REG = 0x00;
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	10 82       	st	Z, r1
     cf8:	28 c0       	rjmp	.+80     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRA_REG = 0xff;
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	80 83       	st	Z, r24
     d02:	23 c0       	rjmp	.+70     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PORTB in AVR MICROCONTROLLER
		case PORTB:
			if(PortDir == INPUT)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	88 23       	and	r24, r24
     d08:	21 f4       	brne	.+8      	; 0xd12 <DIO_vidSetPortxDir+0x74>
			{
				// DDR for register is all input directed
				DDRB_REG = 0x00;
     d0a:	e7 e3       	ldi	r30, 0x37	; 55
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
     d10:	1c c0       	rjmp	.+56     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRB_REG = 0xff;
     d12:	e7 e3       	ldi	r30, 0x37	; 55
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	80 83       	st	Z, r24
     d1a:	17 c0       	rjmp	.+46     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PARTC in AVR MICROCONTROLLER
		case PORTC:
			if(PortDir == INPUT)
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	88 23       	and	r24, r24
     d20:	21 f4       	brne	.+8      	; 0xd2a <DIO_vidSetPortxDir+0x8c>
			{
				// DDR for register is all input directed
				DDRC_REG = 0x00;
     d22:	e4 e3       	ldi	r30, 0x34	; 52
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
     d28:	10 c0       	rjmp	.+32     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRC_REG = 0xff;
     d2a:	e4 e3       	ldi	r30, 0x34	; 52
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	80 83       	st	Z, r24
     d32:	0b c0       	rjmp	.+22     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PORTD in AVR MICROCONTROLLER
		case PORTD:
			if(PortDir == INPUT)
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	88 23       	and	r24, r24
     d38:	21 f4       	brne	.+8      	; 0xd42 <DIO_vidSetPortxDir+0xa4>
			{
				// DDR for register is all input directed
				DDRD_REG = 0x00;
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	10 82       	st	Z, r1
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRD_REG = 0xff;
     d42:	e1 e3       	ldi	r30, 0x31	; 49
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <DIO_vidSetPortValue>:

// PORTx VALUE
void DIO_vidSetPortValue(u8 Portname, u8 Value)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <DIO_vidSetPortValue+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <DIO_vidSetPortValue+0x8>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	6a 83       	std	Y+2, r22	; 0x02
	switch(Portname)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	2b 83       	std	Y+3, r18	; 0x03
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	d1 f0       	breq	.+52     	; 0xdb0 <DIO_vidSetPortValue+0x58>
     d7c:	2b 81       	ldd	r18, Y+3	; 0x03
     d7e:	3c 81       	ldd	r19, Y+4	; 0x04
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_vidSetPortValue+0x38>
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_vidSetPortValue+0x4e>
     d8e:	1e c0       	rjmp	.+60     	; 0xdcc <DIO_vidSetPortValue+0x74>
     d90:	2b 81       	ldd	r18, Y+3	; 0x03
     d92:	3c 81       	ldd	r19, Y+4	; 0x04
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	81 f0       	breq	.+32     	; 0xdba <DIO_vidSetPortValue+0x62>
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	81 f0       	breq	.+32     	; 0xdc4 <DIO_vidSetPortValue+0x6c>
     da4:	13 c0       	rjmp	.+38     	; 0xdcc <DIO_vidSetPortValue+0x74>
	{
		case PORTA:
			PORTA_REG = Value;
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	80 83       	st	Z, r24
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <DIO_vidSetPortValue+0x74>
			break;
		case PORTB:
			PORTB_REG = Value;
     db0:	e8 e3       	ldi	r30, 0x38	; 56
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	80 83       	st	Z, r24
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <DIO_vidSetPortValue+0x74>
			break;
		case PORTC:
			PORTC_REG = Value;
     dba:	e5 e3       	ldi	r30, 0x35	; 53
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	80 83       	st	Z, r24
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <DIO_vidSetPortValue+0x74>
			break;
		case PORTD:
			PORTD_REG = Value;
     dc4:	e2 e3       	ldi	r30, 0x32	; 50
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <DIO_vidSetPinxDir>:

// PORTx.n Direction
void DIO_vidSetPinxDir(u8 portname, u8 pin_number, u8 state)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <DIO_vidSetPinxDir+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <DIO_vidSetPinxDir+0x8>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	6a 83       	std	Y+2, r22	; 0x02
     dec:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3d 83       	std	Y+5, r19	; 0x05
     df6:	2c 83       	std	Y+4, r18	; 0x04
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <DIO_vidSetPinxDir+0x2a>
     e02:	59 c0       	rjmp	.+178    	; 0xeb6 <DIO_vidSetPinxDir+0xdc>
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	2c f4       	brge	.+10     	; 0xe18 <DIO_vidSetPinxDir+0x3e>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	71 f0       	breq	.+28     	; 0xe32 <DIO_vidSetPinxDir+0x58>
     e16:	13 c1       	rjmp	.+550    	; 0x103e <DIO_vidSetPinxDir+0x264>
     e18:	2c 81       	ldd	r18, Y+4	; 0x04
     e1a:	3d 81       	ldd	r19, Y+5	; 0x05
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <DIO_vidSetPinxDir+0x4a>
     e22:	8b c0       	rjmp	.+278    	; 0xf3a <DIO_vidSetPinxDir+0x160>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <DIO_vidSetPinxDir+0x56>
     e2e:	c7 c0       	rjmp	.+398    	; 0xfbe <DIO_vidSetPinxDir+0x1e4>
     e30:	06 c1       	rjmp	.+524    	; 0x103e <DIO_vidSetPinxDir+0x264>
	{
		case PORTA:
			if (state == OUTPUT)
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <DIO_vidSetPinxDir+0x86>
				set_bit(DDRA_REG, pin_number);
     e38:	aa e3       	ldi	r26, 0x3A	; 58
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ea e3       	ldi	r30, 0x3A	; 58
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_vidSetPinxDir+0x7c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_vidSetPinxDir+0x78>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	ef c0       	rjmp	.+478    	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_vidSetPinxDir+0x8e>
     e66:	eb c0       	rjmp	.+470    	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				// DDR IS INPUT
				clr_bit(DDRA_REG, pin_number);
     e68:	aa e3       	ldi	r26, 0x3A	; 58
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_vidSetPinxDir+0xaa>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	2a 95       	dec	r18
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_vidSetPinxDir+0xa6>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTA_REG, pin_number);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_vidSetPinxDir+0xd2>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_vidSetPinxDir+0xce>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	c4 c0       	rjmp	.+392    	; 0x103e <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <DIO_vidSetPinxDir+0x10a>
				set_bit(DDRB_REG, pin_number);
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_vidSetPinxDir+0x100>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_vidSetPinxDir+0xfc>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	ad c0       	rjmp	.+346    	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 23       	and	r24, r24
     ee8:	09 f0       	breq	.+2      	; 0xeec <DIO_vidSetPinxDir+0x112>
     eea:	a9 c0       	rjmp	.+338    	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				clr_bit(DDRB_REG, pin_number);
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_vidSetPinxDir+0x12e>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	2a 95       	dec	r18
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_vidSetPinxDir+0x12a>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTB_REG, pin_number);
     f12:	a8 e3       	ldi	r26, 0x38	; 56
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 e3       	ldi	r30, 0x38	; 56
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_vidSetPinxDir+0x156>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_vidSetPinxDir+0x152>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	82 c0       	rjmp	.+260    	; 0x103e <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <DIO_vidSetPinxDir+0x18e>
				set_bit(DDRC_REG, pin_number);
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_vidSetPinxDir+0x184>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_vidSetPinxDir+0x180>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	6b c0       	rjmp	.+214    	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <DIO_vidSetPinxDir+0x196>
     f6e:	67 c0       	rjmp	.+206    	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				clr_bit(DDRC_REG, pin_number);
     f70:	a4 e3       	ldi	r26, 0x34	; 52
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e4 e3       	ldi	r30, 0x34	; 52
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_vidSetPinxDir+0x1b2>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	2a 95       	dec	r18
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_vidSetPinxDir+0x1ae>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTC_REG, pin_number);
     f96:	a5 e3       	ldi	r26, 0x35	; 53
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_vidSetPinxDir+0x1da>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_vidSetPinxDir+0x1d6>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <DIO_vidSetPinxDir+0x212>
				set_bit(DDRD_REG, pin_number);
     fc4:	a1 e3       	ldi	r26, 0x31	; 49
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e1 e3       	ldi	r30, 0x31	; 49
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_vidSetPinxDir+0x208>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_vidSetPinxDir+0x204>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	29 c0       	rjmp	.+82     	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 23       	and	r24, r24
     ff0:	31 f5       	brne	.+76     	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				// CLEAR
				clr_bit(DDRD_REG, pin_number);
     ff2:	a1 e3       	ldi	r26, 0x31	; 49
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_vidSetPinxDir+0x234>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	2a 95       	dec	r18
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_vidSetPinxDir+0x230>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTD_REG, pin_number);
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_vidSetPinxDir+0x25c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_vidSetPinxDir+0x258>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <DIO_vidSetPinValue>:

// PINx Whole value
void DIO_vidSetPinValue(u8 portname, u8 value)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <DIO_vidSetPinValue+0x6>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <DIO_vidSetPinValue+0x8>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3c 83       	std	Y+4, r19	; 0x04
    1066:	2b 83       	std	Y+3, r18	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	d1 f0       	breq	.+52     	; 0x10a6 <DIO_vidSetPinValue+0x58>
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <DIO_vidSetPinValue+0x38>
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	61 f0       	breq	.+24     	; 0x109c <DIO_vidSetPinValue+0x4e>
    1084:	1e c0       	rjmp	.+60     	; 0x10c2 <DIO_vidSetPinValue+0x74>
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	81 f0       	breq	.+32     	; 0x10b0 <DIO_vidSetPinValue+0x62>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <DIO_vidSetPinValue+0x6c>
    109a:	13 c0       	rjmp	.+38     	; 0x10c2 <DIO_vidSetPinValue+0x74>
	{
		case PORTA:
			PINA_REG = value;
    109c:	e9 e3       	ldi	r30, 0x39	; 57
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <DIO_vidSetPinValue+0x74>
			break;
		case PORTB:
			PINB_REG = value;
    10a6:	e6 e3       	ldi	r30, 0x36	; 54
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <DIO_vidSetPinValue+0x74>
			break;
		case PORTC:
			PINC_REG = value;
    10b0:	e3 e3       	ldi	r30, 0x33	; 51
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <DIO_vidSetPinValue+0x74>
			break;
		case PORTD:
			PIND_REG = value;
    10ba:	e0 e3       	ldi	r30, 0x30	; 48
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <DIO_u8GetPinBitValue>:

// GET PIN VALUE
u8 DIO_u8GetPinBitValue(u8 Portname, u8 Pin_number)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_u8GetPinBitValue+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_u8GetPinBitValue+0x8>
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 tmp = 0;
    10e2:	19 82       	std	Y+1, r1	; 0x01
	switch(Portname)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3d 83       	std	Y+5, r19	; 0x05
    10ec:	2c 83       	std	Y+4, r18	; 0x04
    10ee:	4c 81       	ldd	r20, Y+4	; 0x04
    10f0:	5d 81       	ldd	r21, Y+5	; 0x05
    10f2:	41 30       	cpi	r20, 0x01	; 1
    10f4:	51 05       	cpc	r21, r1
    10f6:	59 f1       	breq	.+86     	; 0x114e <DIO_u8GetPinBitValue+0x7e>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	91 05       	cpc	r25, r1
    1100:	34 f4       	brge	.+12     	; 0x110e <DIO_u8GetPinBitValue+0x3e>
    1102:	2c 81       	ldd	r18, Y+4	; 0x04
    1104:	3d 81       	ldd	r19, Y+5	; 0x05
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	69 f0       	breq	.+26     	; 0x1126 <DIO_u8GetPinBitValue+0x56>
    110c:	5b c0       	rjmp	.+182    	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
    110e:	4c 81       	ldd	r20, Y+4	; 0x04
    1110:	5d 81       	ldd	r21, Y+5	; 0x05
    1112:	42 30       	cpi	r20, 0x02	; 2
    1114:	51 05       	cpc	r21, r1
    1116:	79 f1       	breq	.+94     	; 0x1176 <DIO_u8GetPinBitValue+0xa6>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_u8GetPinBitValue+0x54>
    1122:	3d c0       	rjmp	.+122    	; 0x119e <DIO_u8GetPinBitValue+0xce>
    1124:	4f c0       	rjmp	.+158    	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
	{
		case PORTA:
			tmp = PINA_REG;
    1126:	e9 e3       	ldi	r30, 0x39	; 57
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8GetPinBitValue+0x72>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8GetPinBitValue+0x6e>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	3b c0       	rjmp	.+118    	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTB:
			tmp = PINB_REG;
    114e:	e6 e3       	ldi	r30, 0x36	; 54
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8GetPinBitValue+0x9a>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8GetPinBitValue+0x96>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	27 c0       	rjmp	.+78     	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTC:
			tmp = PINC_REG;
    1176:	e3 e3       	ldi	r30, 0x33	; 51
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_u8GetPinBitValue+0xc2>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_u8GetPinBitValue+0xbe>
    1196:	ca 01       	movw	r24, r20
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTD:
			tmp = PIND_REG;
    119e:	e0 e3       	ldi	r30, 0x30	; 48
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8GetPinBitValue+0xea>
    11b6:	55 95       	asr	r21
    11b8:	47 95       	ror	r20
    11ba:	8a 95       	dec	r24
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8GetPinBitValue+0xe6>
    11be:	ca 01       	movw	r24, r20
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_vidSetPortBitValue>:

// PORTx Bit value
void DIO_vidSetPortBitValue(u8 portname, u8 port_number, u8 state)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_vidSetPortBitValue+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_vidSetPortBitValue+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3d 83       	std	Y+5, r19	; 0x05
    11f2:	2c 83       	std	Y+4, r18	; 0x04
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_vidSetPortBitValue+0x2a>
    11fe:	47 c0       	rjmp	.+142    	; 0x128e <DIO_vidSetPortBitValue+0xb8>
    1200:	2c 81       	ldd	r18, Y+4	; 0x04
    1202:	3d 81       	ldd	r19, Y+5	; 0x05
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <DIO_vidSetPortBitValue+0x3e>
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	71 f0       	breq	.+28     	; 0x122e <DIO_vidSetPortBitValue+0x58>
    1212:	cb c0       	rjmp	.+406    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <DIO_vidSetPortBitValue+0x4a>
    121e:	67 c0       	rjmp	.+206    	; 0x12ee <DIO_vidSetPortBitValue+0x118>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_vidSetPortBitValue+0x56>
    122a:	91 c0       	rjmp	.+290    	; 0x134e <DIO_vidSetPortBitValue+0x178>
    122c:	be c0       	rjmp	.+380    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
	{
		case PORTA:
			if (state == OUTPUT)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	a1 f4       	brne	.+40     	; 0x125c <DIO_vidSetPortBitValue+0x86>
				set_bit(PORTA_REG, port_number);
    1234:	ab e3       	ldi	r26, 0x3B	; 59
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	eb e3       	ldi	r30, 0x3B	; 59
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_vidSetPortBitValue+0x7c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_vidSetPortBitValue+0x78>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	a7 c0       	rjmp	.+334    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	88 23       	and	r24, r24
    1260:	09 f0       	breq	.+2      	; 0x1264 <DIO_vidSetPortBitValue+0x8e>
    1262:	a3 c0       	rjmp	.+326    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTA_REG, port_number);
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_vidSetPortBitValue+0xac>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_vidSetPortBitValue+0xa8>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	8e c0       	rjmp	.+284    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	a1 f4       	brne	.+40     	; 0x12bc <DIO_vidSetPortBitValue+0xe6>
				set_bit(PORTB_REG, port_number);
    1294:	a8 e3       	ldi	r26, 0x38	; 56
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_vidSetPortBitValue+0xdc>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_vidSetPortBitValue+0xd8>
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	77 c0       	rjmp	.+238    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 23       	and	r24, r24
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <DIO_vidSetPortBitValue+0xee>
    12c2:	73 c0       	rjmp	.+230    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTB_REG, port_number);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_vidSetPortBitValue+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_vidSetPortBitValue+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	5e c0       	rjmp	.+188    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <DIO_vidSetPortBitValue+0x146>
				set_bit(PORTC_REG, port_number);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_vidSetPortBitValue+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_vidSetPortBitValue+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	47 c0       	rjmp	.+142    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 23       	and	r24, r24
    1320:	09 f0       	breq	.+2      	; 0x1324 <DIO_vidSetPortBitValue+0x14e>
    1322:	43 c0       	rjmp	.+134    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTC_REG, port_number);
    1324:	a5 e3       	ldi	r26, 0x35	; 53
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_vidSetPortBitValue+0x16c>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_vidSetPortBitValue+0x168>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	2e c0       	rjmp	.+92     	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <DIO_vidSetPortBitValue+0x1a6>
				set_bit(PORTD_REG, port_number);
    1354:	a2 e3       	ldi	r26, 0x32	; 50
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_vidSetPortBitValue+0x19c>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_vidSetPortBitValue+0x198>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	17 c0       	rjmp	.+46     	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 23       	and	r24, r24
    1380:	a1 f4       	brne	.+40     	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTD_REG, port_number);
    1382:	a2 e3       	ldi	r26, 0x32	; 50
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_vidSetPortBitValue+0x1ca>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_vidSetPortBitValue+0x1c6>
    13a4:	80 95       	com	r24
    13a6:	84 23       	and	r24, r20
    13a8:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <DIO_vidSetPintBitValue>:



// PINx Bit value
void DIO_vidSetPintBitValue(u8 portname, u8 port_number, u8 state)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_vidSetPintBitValue+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_vidSetPintBitValue+0x8>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	6a 83       	std	Y+2, r22	; 0x02
    13cc:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3d 83       	std	Y+5, r19	; 0x05
    13d6:	2c 83       	std	Y+4, r18	; 0x04
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_vidSetPintBitValue+0x2a>
    13e2:	47 c0       	rjmp	.+142    	; 0x1472 <DIO_vidSetPintBitValue+0xb8>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_vidSetPintBitValue+0x3e>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	71 f0       	breq	.+28     	; 0x1412 <DIO_vidSetPintBitValue+0x58>
    13f6:	cb c0       	rjmp	.+406    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_vidSetPintBitValue+0x4a>
    1402:	67 c0       	rjmp	.+206    	; 0x14d2 <DIO_vidSetPintBitValue+0x118>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <DIO_vidSetPintBitValue+0x56>
    140e:	91 c0       	rjmp	.+290    	; 0x1532 <DIO_vidSetPintBitValue+0x178>
    1410:	be c0       	rjmp	.+380    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
	{
		case PORTA:
			if (state == OUTPUT)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	a1 f4       	brne	.+40     	; 0x1440 <DIO_vidSetPintBitValue+0x86>
				set_bit(PINA_REG, port_number);
    1418:	a9 e3       	ldi	r26, 0x39	; 57
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e9 e3       	ldi	r30, 0x39	; 57
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_vidSetPintBitValue+0x7c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_vidSetPintBitValue+0x78>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	a7 c0       	rjmp	.+334    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 23       	and	r24, r24
    1444:	09 f0       	breq	.+2      	; 0x1448 <DIO_vidSetPintBitValue+0x8e>
    1446:	a3 c0       	rjmp	.+326    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINA_REG, port_number);
    1448:	a9 e3       	ldi	r26, 0x39	; 57
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e3       	ldi	r30, 0x39	; 57
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_vidSetPintBitValue+0xac>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_vidSetPintBitValue+0xa8>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	8e c0       	rjmp	.+284    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	a1 f4       	brne	.+40     	; 0x14a0 <DIO_vidSetPintBitValue+0xe6>
				set_bit(PINB_REG, port_number);
    1478:	a6 e3       	ldi	r26, 0x36	; 54
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e6 e3       	ldi	r30, 0x36	; 54
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_vidSetPintBitValue+0xdc>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_vidSetPintBitValue+0xd8>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	77 c0       	rjmp	.+238    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 23       	and	r24, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <DIO_vidSetPintBitValue+0xee>
    14a6:	73 c0       	rjmp	.+230    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINB_REG, port_number);
    14a8:	a6 e3       	ldi	r26, 0x36	; 54
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_vidSetPintBitValue+0x10c>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_vidSetPintBitValue+0x108>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	5e c0       	rjmp	.+188    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	a1 f4       	brne	.+40     	; 0x1500 <DIO_vidSetPintBitValue+0x146>
				set_bit(PINC_REG, port_number);
    14d8:	a3 e3       	ldi	r26, 0x33	; 51
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e3       	ldi	r30, 0x33	; 51
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_vidSetPintBitValue+0x13c>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_vidSetPintBitValue+0x138>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	47 c0       	rjmp	.+142    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <DIO_vidSetPintBitValue+0x14e>
    1506:	43 c0       	rjmp	.+134    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINC_REG, port_number);
    1508:	a3 e3       	ldi	r26, 0x33	; 51
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e3       	ldi	r30, 0x33	; 51
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_vidSetPintBitValue+0x16c>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_vidSetPintBitValue+0x168>
    152a:	80 95       	com	r24
    152c:	84 23       	and	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	2e c0       	rjmp	.+92     	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	a1 f4       	brne	.+40     	; 0x1560 <DIO_vidSetPintBitValue+0x1a6>
				set_bit(PIND_REG, port_number);
    1538:	a0 e3       	ldi	r26, 0x30	; 48
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e0 e3       	ldi	r30, 0x30	; 48
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_vidSetPintBitValue+0x19c>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_vidSetPintBitValue+0x198>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	17 c0       	rjmp	.+46     	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 23       	and	r24, r24
    1564:	a1 f4       	brne	.+40     	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PIND_REG, port_number);
    1566:	a0 e3       	ldi	r26, 0x30	; 48
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e0 e3       	ldi	r30, 0x30	; 48
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_vidSetPintBitValue+0x1ca>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_vidSetPintBitValue+0x1c6>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <DIO_GetPortValue>:

u8 DIO_GetPortValue(u8 portname)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_GetPortValue+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_GetPortValue+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 tmp = 0;
    15ac:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	d1 f0       	breq	.+52     	; 0x15f6 <DIO_GetPortValue+0x58>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <DIO_GetPortValue+0x38>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 f0       	breq	.+24     	; 0x15ec <DIO_GetPortValue+0x4e>
    15d4:	1e c0       	rjmp	.+60     	; 0x1612 <DIO_GetPortValue+0x74>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <DIO_GetPortValue+0x62>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	81 f0       	breq	.+32     	; 0x160a <DIO_GetPortValue+0x6c>
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <DIO_GetPortValue+0x74>
	{
		case PORTA:
			tmp = PORTA_REG;
    15ec:	eb e3       	ldi	r30, 0x3B	; 59
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <DIO_GetPortValue+0x74>
			break;

		case PORTB:
			tmp = PORTB_REG;
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <DIO_GetPortValue+0x74>
			break;

		case PORTC:
			tmp = PORTC_REG;
    1600:	e5 e3       	ldi	r30, 0x35	; 53
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <DIO_GetPortValue+0x74>
			break;

		case PORTD:
			tmp = PORTD_REG;
    160a:	e2 e3       	ldi	r30, 0x32	; 50
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 portname)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <DIO_GetPinValue+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <DIO_GetPinValue+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = 0;
    1630:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3c 83       	std	Y+4, r19	; 0x04
    163a:	2b 83       	std	Y+3, r18	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	d1 f0       	breq	.+52     	; 0x167a <DIO_GetPinValue+0x58>
    1646:	2b 81       	ldd	r18, Y+3	; 0x03
    1648:	3c 81       	ldd	r19, Y+4	; 0x04
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	2c f4       	brge	.+10     	; 0x165a <DIO_GetPinValue+0x38>
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	61 f0       	breq	.+24     	; 0x1670 <DIO_GetPinValue+0x4e>
    1658:	1e c0       	rjmp	.+60     	; 0x1696 <DIO_GetPinValue+0x74>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	81 f0       	breq	.+32     	; 0x1684 <DIO_GetPinValue+0x62>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	91 05       	cpc	r25, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <DIO_GetPinValue+0x6c>
    166e:	13 c0       	rjmp	.+38     	; 0x1696 <DIO_GetPinValue+0x74>
	{
		case PORTA:
			value = PINA_REG;
    1670:	e9 e3       	ldi	r30, 0x39	; 57
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	0e c0       	rjmp	.+28     	; 0x1696 <DIO_GetPinValue+0x74>
			break;

		case PORTB:
			value = PINB_REG;
    167a:	e6 e3       	ldi	r30, 0x36	; 54
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <DIO_GetPinValue+0x74>
			break;

		case PORTC:
			value = PINC_REG;
    1684:	e3 e3       	ldi	r30, 0x33	; 51
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <DIO_GetPinValue+0x74>
			break;

		case PORTD:
			value = PIND_REG;
    168e:	e0 e3       	ldi	r30, 0x30	; 48
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return value;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <DIO_u8GetPortBitValue>:

u8 DIO_u8GetPortBitValue(u8 portname, u8 Pin_number)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DIO_u8GetPortBitValue+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <DIO_u8GetPortBitValue+0x8>
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	8a 83       	std	Y+2, r24	; 0x02
    16b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 tmp = 0;
    16b8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	4c 81       	ldd	r20, Y+4	; 0x04
    16c6:	5d 81       	ldd	r21, Y+5	; 0x05
    16c8:	41 30       	cpi	r20, 0x01	; 1
    16ca:	51 05       	cpc	r21, r1
    16cc:	59 f1       	breq	.+86     	; 0x1724 <DIO_u8GetPortBitValue+0x7e>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	91 05       	cpc	r25, r1
    16d6:	34 f4       	brge	.+12     	; 0x16e4 <DIO_u8GetPortBitValue+0x3e>
    16d8:	2c 81       	ldd	r18, Y+4	; 0x04
    16da:	3d 81       	ldd	r19, Y+5	; 0x05
    16dc:	21 15       	cp	r18, r1
    16de:	31 05       	cpc	r19, r1
    16e0:	69 f0       	breq	.+26     	; 0x16fc <DIO_u8GetPortBitValue+0x56>
    16e2:	5b c0       	rjmp	.+182    	; 0x179a <DIO_u8GetPortBitValue+0xf4>
    16e4:	4c 81       	ldd	r20, Y+4	; 0x04
    16e6:	5d 81       	ldd	r21, Y+5	; 0x05
    16e8:	42 30       	cpi	r20, 0x02	; 2
    16ea:	51 05       	cpc	r21, r1
    16ec:	79 f1       	breq	.+94     	; 0x174c <DIO_u8GetPortBitValue+0xa6>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <DIO_u8GetPortBitValue+0x54>
    16f8:	3d c0       	rjmp	.+122    	; 0x1774 <DIO_u8GetPortBitValue+0xce>
    16fa:	4f c0       	rjmp	.+158    	; 0x179a <DIO_u8GetPortBitValue+0xf4>
	{
		case PORTA:
			tmp = PORTA_REG;
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_u8GetPortBitValue+0x72>
    1714:	55 95       	asr	r21
    1716:	47 95       	ror	r20
    1718:	8a 95       	dec	r24
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_u8GetPortBitValue+0x6e>
    171c:	ca 01       	movw	r24, r20
    171e:	81 70       	andi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	3b c0       	rjmp	.+118    	; 0x179a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTB:
			tmp = PORTB_REG;
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_u8GetPortBitValue+0x9a>
    173c:	55 95       	asr	r21
    173e:	47 95       	ror	r20
    1740:	8a 95       	dec	r24
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_u8GetPortBitValue+0x96>
    1744:	ca 01       	movw	r24, r20
    1746:	81 70       	andi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	27 c0       	rjmp	.+78     	; 0x179a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTC:
			tmp = PORTC_REG;
    174c:	e5 e3       	ldi	r30, 0x35	; 53
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a9 01       	movw	r20, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_u8GetPortBitValue+0xc2>
    1764:	55 95       	asr	r21
    1766:	47 95       	ror	r20
    1768:	8a 95       	dec	r24
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_u8GetPortBitValue+0xbe>
    176c:	ca 01       	movw	r24, r20
    176e:	81 70       	andi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	13 c0       	rjmp	.+38     	; 0x179a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTD:
			tmp = PORTD_REG;
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_u8GetPortBitValue+0xea>
    178c:	55 95       	asr	r21
    178e:	47 95       	ror	r20
    1790:	8a 95       	dec	r24
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_u8GetPortBitValue+0xe6>
    1794:	ca 01       	movw	r24, r20
    1796:	81 70       	andi	r24, 0x01	; 1
    1798:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <KeyPad_vidInitialize>:

u8 lcd_stage1 = 0, lcd_stage2 = 0, lcd_stage3 = 0;

// Columns are input, Rows are output
void KeyPad_vidInitialize(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	// Set low nibble columns are input and pulled up
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL1, INPUT);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL2, INPUT);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL3, INPUT);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL4, INPUT);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>

	// Set high nibble rows as output
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW1, OUTPUT);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	64 e0       	ldi	r22, 0x04	; 4
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW2, OUTPUT);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	65 e0       	ldi	r22, 0x05	; 5
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW3, OUTPUT);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	66 e0       	ldi	r22, 0x06	; 6
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW4, OUTPUT);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	67 e0       	ldi	r22, 0x07	; 7
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>

	// Rows are all  zeros
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	64 e0       	ldi	r22, 0x04	; 4
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	65 e0       	ldi	r22, 0x05	; 5
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	66 e0       	ldi	r22, 0x06	; 6
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	67 e0       	ldi	r22, 0x07	; 7
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

	KeyPad_vidKey_Pressed();
    182c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <KeyPad_vidKey_Pressed>

}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <KeyPad_vidKey_Pressed>:


u8 KeyPad_vidKey_Pressed(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	6d 97       	sbiw	r28, 0x1d	; 29
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	{
		// 1st stage Make sure key is released
		do
		{
			// Rows are all  zeros
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	65 e0       	ldi	r22, 0x05	; 5
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	66 e0       	ldi	r22, 0x06	; 6
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	67 e0       	ldi	r22, 0x07	; 7
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
		}
		while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	8f 70       	andi	r24, 0x0F	; 15
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	8f 30       	cpi	r24, 0x0F	; 15
    1882:	91 05       	cpc	r25, r1
    1884:	11 f7       	brne	.-60     	; 0x184a <KeyPad_vidKey_Pressed+0x14>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 ea       	ldi	r26, 0xA0	; 160
    188c:	b1 e4       	ldi	r27, 0x41	; 65
    188e:	89 8f       	std	Y+25, r24	; 0x19
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	ab 8f       	std	Y+27, r26	; 0x1b
    1894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
    18b0:	9e 8b       	std	Y+22, r25	; 0x16
    18b2:	af 8b       	std	Y+23, r26	; 0x17
    18b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <KeyPad_vidKey_Pressed+0xa2>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <KeyPad_vidKey_Pressed+0x120>
	else if (__tmp > 65535)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <KeyPad_vidKey_Pressed+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	69 8d       	ldd	r22, Y+25	; 0x19
    18f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <KeyPad_vidKey_Pressed+0x102>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	9a 89       	ldd	r25, Y+18	; 0x12
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <KeyPad_vidKey_Pressed+0xf0>
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <KeyPad_vidKey_Pressed+0xe4>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <KeyPad_vidKey_Pressed+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	98 89       	ldd	r25, Y+16	; 0x10
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <KeyPad_vidKey_Pressed+0x12c>
    1966:	98 8b       	std	Y+16, r25	; 0x10
    1968:	8f 87       	std	Y+15, r24	; 0x0f
			do
			{
				// delay for  noise
				_delay_ms(20);
			}
			while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0f);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	8f 70       	andi	r24, 0x0F	; 15
    1976:	90 70       	andi	r25, 0x00	; 0
    1978:	8f 30       	cpi	r24, 0x0F	; 15
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <KeyPad_vidKey_Pressed+0x14a>
    197e:	83 cf       	rjmp	.-250    	; 0x1886 <KeyPad_vidKey_Pressed+0x50>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 ea       	ldi	r26, 0xA0	; 160
    1986:	b1 e4       	ldi	r27, 0x41	; 65
    1988:	8b 87       	std	Y+11, r24	; 0x0b
    198a:	9c 87       	std	Y+12, r25	; 0x0c
    198c:	ad 87       	std	Y+13, r26	; 0x0d
    198e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	98 87       	std	Y+8, r25	; 0x08
    19ac:	a9 87       	std	Y+9, r26	; 0x09
    19ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <KeyPad_vidKey_Pressed+0x19c>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <KeyPad_vidKey_Pressed+0x21a>
	else if (__tmp > 65535)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <KeyPad_vidKey_Pressed+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <KeyPad_vidKey_Pressed+0x1fc>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <KeyPad_vidKey_Pressed+0x1ea>
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <KeyPad_vidKey_Pressed+0x1de>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <KeyPad_vidKey_Pressed+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <KeyPad_vidKey_Pressed+0x226>
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01

			// Delay for De_bounce
			_delay_ms(20);
		}
		while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0f);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	8f 30       	cpi	r24, 0x0F	; 15
    1a74:	91 05       	cpc	r25, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <KeyPad_vidKey_Pressed+0x244>
    1a78:	06 cf       	rjmp	.-500    	; 0x1886 <KeyPad_vidKey_Pressed+0x50>


		while(1)
		{
			// 3rd stage
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	64 e0       	ldi	r22, 0x04	; 4
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	65 e0       	ldi	r22, 0x05	; 5
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	66 e0       	ldi	r22, 0x06	; 6
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	67 e0       	ldi	r22, 0x07	; 7
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	8f 70       	andi	r24, 0x0F	; 15
    1aae:	90 70       	andi	r25, 0x00	; 0
    1ab0:	8f 30       	cpi	r24, 0x0F	; 15
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	29 f0       	breq	.+10     	; 0x1ac0 <KeyPad_vidKey_Pressed+0x28a>
			{
				location = X;		//0
    1ab6:	80 91 5c 03 	lds	r24, 0x035C
    1aba:	80 93 5b 03 	sts	0x035B, r24
    1abe:	6c c0       	rjmp	.+216    	; 0x1b98 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	64 e0       	ldi	r22, 0x04	; 4
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	65 e0       	ldi	r22, 0x05	; 5
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	66 e0       	ldi	r22, 0x06	; 6
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	67 e0       	ldi	r22, 0x07	; 7
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	8f 70       	andi	r24, 0x0F	; 15
    1af4:	90 70       	andi	r25, 0x00	; 0
    1af6:	8f 30       	cpi	r24, 0x0F	; 15
    1af8:	91 05       	cpc	r25, r1
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <KeyPad_vidKey_Pressed+0x2d2>
			{
				location = X + 1;		//1
    1afc:	80 91 5c 03 	lds	r24, 0x035C
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 5b 03 	sts	0x035B, r24
    1b06:	48 c0       	rjmp	.+144    	; 0x1b98 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	65 e0       	ldi	r22, 0x05	; 5
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	66 e0       	ldi	r22, 0x06	; 6
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	67 e0       	ldi	r22, 0x07	; 7
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	8f 70       	andi	r24, 0x0F	; 15
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	8f 30       	cpi	r24, 0x0F	; 15
    1b40:	91 05       	cpc	r25, r1
    1b42:	31 f0       	breq	.+12     	; 0x1b50 <KeyPad_vidKey_Pressed+0x31a>
			{
				location = X + 2;		//2
    1b44:	80 91 5c 03 	lds	r24, 0x035C
    1b48:	8e 5f       	subi	r24, 0xFE	; 254
    1b4a:	80 93 5b 03 	sts	0x035B, r24
    1b4e:	24 c0       	rjmp	.+72     	; 0x1b98 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	64 e0       	ldi	r22, 0x04	; 4
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	65 e0       	ldi	r22, 0x05	; 5
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	66 e0       	ldi	r22, 0x06	; 6
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	67 e0       	ldi	r22, 0x07	; 7
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8f 70       	andi	r24, 0x0F	; 15
    1b84:	90 70       	andi	r25, 0x00	; 0
    1b86:	8f 30       	cpi	r24, 0x0F	; 15
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <KeyPad_vidKey_Pressed+0x358>
    1b8c:	76 cf       	rjmp	.-276    	; 0x1a7a <KeyPad_vidKey_Pressed+0x244>
			{
				location = X + 3;		//3
    1b8e:	80 91 5c 03 	lds	r24, 0x035C
    1b92:	8d 5f       	subi	r24, 0xFD	; 253
    1b94:	80 93 5b 03 	sts	0x035B, r24

		}


		// Check for column location
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0E)
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	8f 70       	andi	r24, 0x0F	; 15
    1ba4:	90 70       	andi	r25, 0x00	; 0
    1ba6:	8e 30       	cpi	r24, 0x0E	; 14
    1ba8:	91 05       	cpc	r25, r1
    1baa:	71 f4       	brne	.+28     	; 0x1bc8 <KeyPad_vidKey_Pressed+0x392>
			result = character[location][COL1];
    1bac:	80 91 5b 03 	lds	r24, 0x035B
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e7 5d       	subi	r30, 0xD7	; 215
    1bc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 93 5d 03 	sts	0x035D, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x0D)
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	8f 70       	andi	r24, 0x0F	; 15
    1bd4:	90 70       	andi	r25, 0x00	; 0
    1bd6:	8d 30       	cpi	r24, 0x0D	; 13
    1bd8:	91 05       	cpc	r25, r1
    1bda:	71 f4       	brne	.+28     	; 0x1bf8 <KeyPad_vidKey_Pressed+0x3c2>
			result = character[location][COL2];
    1bdc:	80 91 5b 03 	lds	r24, 0x035B
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	fc 01       	movw	r30, r24
    1bee:	e6 5d       	subi	r30, 0xD6	; 214
    1bf0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 93 5d 03 	sts	0x035D, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x0B)
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	8f 70       	andi	r24, 0x0F	; 15
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	8b 30       	cpi	r24, 0x0B	; 11
    1c08:	91 05       	cpc	r25, r1
    1c0a:	79 f4       	brne	.+30     	; 0x1c2a <KeyPad_vidKey_Pressed+0x3f4>
			result = character[location][COL3];
    1c0c:	80 91 5b 03 	lds	r24, 0x035B
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e7 5d       	subi	r30, 0xD7	; 215
    1c22:	fc 4f       	sbci	r31, 0xFC	; 252
    1c24:	80 81       	ld	r24, Z
    1c26:	80 93 5d 03 	sts	0x035D, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x07)
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	8f 70       	andi	r24, 0x0F	; 15
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	87 30       	cpi	r24, 0x07	; 7
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <KeyPad_vidKey_Pressed+0x424>
			result = character[location][COL4];
    1c3e:	80 91 5b 03 	lds	r24, 0x035B
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e4 5d       	subi	r30, 0xD4	; 212
    1c52:	fc 4f       	sbci	r31, 0xFC	; 252
    1c54:	80 81       	ld	r24, Z
    1c56:	80 93 5d 03 	sts	0x035D, r24


		// change charcters by a button
		if (result == character[(X + 3) % 12][3])
    1c5a:	80 91 5c 03 	lds	r24, 0x035C
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	03 96       	adiw	r24, 0x03	; 3
    1c64:	2c e0       	ldi	r18, 0x0C	; 12
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	b9 01       	movw	r22, r18
    1c6a:	0e 94 11 2c 	call	0x5822	; 0x5822 <__divmodhi4>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	fc 01       	movw	r30, r24
    1c78:	e4 5d       	subi	r30, 0xD4	; 212
    1c7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7c:	90 81       	ld	r25, Z
    1c7e:	80 91 5d 03 	lds	r24, 0x035D
    1c82:	98 17       	cp	r25, r24
    1c84:	69 f4       	brne	.+26     	; 0x1ca0 <KeyPad_vidKey_Pressed+0x46a>
		{
			// Change keyPad on Demand
			X = (X + 4) % 12;
    1c86:	80 91 5c 03 	lds	r24, 0x035C
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	04 96       	adiw	r24, 0x04	; 4
    1c90:	2c e0       	ldi	r18, 0x0C	; 12
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	b9 01       	movw	r22, r18
    1c96:	0e 94 11 2c 	call	0x5822	; 0x5822 <__divmodhi4>
    1c9a:	80 93 5c 03 	sts	0x035C, r24
    1c9e:	d5 cd       	rjmp	.-1110   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
		}
		else if (result == character[11][1])
    1ca0:	90 91 56 03 	lds	r25, 0x0356
    1ca4:	80 91 5d 03 	lds	r24, 0x035D
    1ca8:	98 17       	cp	r25, r24
    1caa:	21 f4       	brne	.+8      	; 0x1cb4 <KeyPad_vidKey_Pressed+0x47e>
		{
			// Change keyPad on Demand

			DEAD_SIGNAL_TERMINATE = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 5a 03 	sts	0x035A, r24
    1cb2:	cb cd       	rjmp	.-1130   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
		}
		else if (result == character[3][1])
    1cb4:	90 91 36 03 	lds	r25, 0x0336
    1cb8:	80 91 5d 03 	lds	r24, 0x035D
    1cbc:	98 17       	cp	r25, r24
    1cbe:	09 f5       	brne	.+66     	; 0x1d02 <KeyPad_vidKey_Pressed+0x4cc>
		{
			// DELETE THE PREVIOUS CHAR

			GPS_Index--;
    1cc0:	80 91 6e 03 	lds	r24, 0x036E
    1cc4:	81 50       	subi	r24, 0x01	; 1
    1cc6:	80 93 6e 03 	sts	0x036E, r24
			General_Purpose_String[GPS_Index] = '\0';
    1cca:	80 91 6e 03 	lds	r24, 0x036E
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e1 5a       	subi	r30, 0xA1	; 161
    1cd6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cd8:	10 82       	st	Z, r1
			u8 tmp = LCD_u8CurrentLocation_AC();
    1cda:	0e 94 4f 18 	call	0x309e	; 0x309e <LCD_u8CurrentLocation_AC>
    1cde:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_vidInstruction(tmp - 1 + (1<<7), write_operation, IR);
    1ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce2:	81 58       	subi	r24, 0x81	; 129
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
			LCD_String(" ");
    1cec:	80 e6       	ldi	r24, 0x60	; 96
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_vidInstruction(tmp - 1 + (1<<7), write_operation, IR);
    1cf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf6:	81 58       	subi	r24, 0x81	; 129
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    1d00:	a4 cd       	rjmp	.-1208   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
		}

		// Submit using equal button
		else if (result == character[(X + 3) % 12][2])
    1d02:	80 91 5c 03 	lds	r24, 0x035C
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	03 96       	adiw	r24, 0x03	; 3
    1d0c:	2c e0       	ldi	r18, 0x0C	; 12
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	b9 01       	movw	r22, r18
    1d12:	0e 94 11 2c 	call	0x5822	; 0x5822 <__divmodhi4>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	fc 01       	movw	r30, r24
    1d22:	e7 5d       	subi	r30, 0xD7	; 215
    1d24:	fc 4f       	sbci	r31, 0xFC	; 252
    1d26:	90 81       	ld	r25, Z
    1d28:	80 91 5d 03 	lds	r24, 0x035D
    1d2c:	98 17       	cp	r25, r24
    1d2e:	f9 f4       	brne	.+62     	; 0x1d6e <KeyPad_vidKey_Pressed+0x538>
		{
			// Change keyPad on Demand
			LCD_vidClearOnDemand(1, 16);
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	60 e1       	ldi	r22, 0x10	; 16
    1d34:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

			// Incase of being at the beginning of the program
			if(!operation_flag)
    1d38:	80 91 a8 03 	lds	r24, 0x03A8
    1d3c:	88 23       	and	r24, r24
    1d3e:	a1 f4       	brne	.+40     	; 0x1d68 <KeyPad_vidKey_Pressed+0x532>
			{
				if(BREAK_CODE)
    1d40:	80 91 ab 03 	lds	r24, 0x03AB
    1d44:	88 23       	and	r24, r24
    1d46:	69 f0       	breq	.+26     	; 0x1d62 <KeyPad_vidKey_Pressed+0x52c>
				{
					BREAK_CODE = 0;
    1d48:	10 92 ab 03 	sts	0x03AB, r1
			LCD_vidInstruction(result, write_operation, DR);
		}


	}
	return result;
    1d4c:	80 91 5d 03 	lds	r24, 0x035D
}
    1d50:	6d 96       	adiw	r28, 0x1d	; 29
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret
				if(BREAK_CODE)
				{
					BREAK_CODE = 0;
					break;
				}
				LCD_OperateResult();
    1d62:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_OperateResult>
    1d66:	71 cd       	rjmp	.-1310   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
			}
			else
			{
					KEY_PAD_vidOperations();
    1d68:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <KEY_PAD_vidOperations>
    1d6c:	6e cd       	rjmp	.-1316   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
			}
		}
		else
		{
			KeyPad_CharAccumulateString(result);
    1d6e:	80 91 5d 03 	lds	r24, 0x035D
    1d72:	0e 94 0e 11 	call	0x221c	; 0x221c <KeyPad_CharAccumulateString>
			LCD_vidInstruction(result, write_operation, DR);
    1d76:	80 91 5d 03 	lds	r24, 0x035D
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	41 e0       	ldi	r20, 0x01	; 1
    1d7e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    1d82:	63 cd       	rjmp	.-1338   	; 0x184a <KeyPad_vidKey_Pressed+0x14>

00001d84 <LCD_OperateResult>:
	return result;
}

// 1st stage for LCD
void LCD_OperateResult(void)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <LCD_OperateResult+0x6>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	u8 j = General_Purpose_String[0];
    1d90:	80 91 5f 03 	lds	r24, 0x035F
    1d94:	89 83       	std	Y+1, r24	; 0x01
	GPS_Index = 0;
    1d96:	10 92 6e 03 	sts	0x036E, r1

	switch(j)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3b 83       	std	Y+3, r19	; 0x03
    1da2:	2a 83       	std	Y+2, r18	; 0x02
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	84 33       	cpi	r24, 0x34	; 52
    1daa:	91 05       	cpc	r25, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <LCD_OperateResult+0x2c>
    1dae:	4b c0       	rjmp	.+150    	; 0x1e46 <LCD_OperateResult+0xc2>
    1db0:	2a 81       	ldd	r18, Y+2	; 0x02
    1db2:	3b 81       	ldd	r19, Y+3	; 0x03
    1db4:	25 33       	cpi	r18, 0x35	; 53
    1db6:	31 05       	cpc	r19, r1
    1db8:	84 f4       	brge	.+32     	; 0x1dda <LCD_OperateResult+0x56>
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	82 33       	cpi	r24, 0x32	; 50
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	49 f1       	breq	.+82     	; 0x1e16 <LCD_OperateResult+0x92>
    1dc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc8:	23 33       	cpi	r18, 0x33	; 51
    1dca:	31 05       	cpc	r19, r1
    1dcc:	84 f5       	brge	.+96     	; 0x1e2e <LCD_OperateResult+0xaa>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	81 33       	cpi	r24, 0x31	; 49
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	99 f0       	breq	.+38     	; 0x1dfe <LCD_OperateResult+0x7a>
    1dd8:	5e c0       	rjmp	.+188    	; 0x1e96 <LCD_OperateResult+0x112>
    1dda:	2a 81       	ldd	r18, Y+2	; 0x02
    1ddc:	3b 81       	ldd	r19, Y+3	; 0x03
    1dde:	26 33       	cpi	r18, 0x36	; 54
    1de0:	31 05       	cpc	r19, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <LCD_OperateResult+0x62>
    1de4:	44 c0       	rjmp	.+136    	; 0x1e6e <LCD_OperateResult+0xea>
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	86 33       	cpi	r24, 0x36	; 54
    1dec:	91 05       	cpc	r25, r1
    1dee:	bc f1       	brlt	.+110    	; 0x1e5e <LCD_OperateResult+0xda>
    1df0:	2a 81       	ldd	r18, Y+2	; 0x02
    1df2:	3b 81       	ldd	r19, Y+3	; 0x03
    1df4:	27 33       	cpi	r18, 0x37	; 55
    1df6:	31 05       	cpc	r19, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <LCD_OperateResult+0x78>
    1dfa:	41 c0       	rjmp	.+130    	; 0x1e7e <LCD_OperateResult+0xfa>
    1dfc:	4c c0       	rjmp	.+152    	; 0x1e96 <LCD_OperateResult+0x112>
	{
		case '1':
			LCD_String("NAME:");
    1dfe:	82 e6       	ldi	r24, 0x62	; 98
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit(Insert_new_book);
    1e06:	81 e3       	ldi	r24, 0x31	; 49
    1e08:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1e14:	4c c0       	rjmp	.+152    	; 0x1eae <LCD_OperateResult+0x12a>
			break;

		case '2':
			LCD_String("ID:");
    1e16:	88 e6       	ldi	r24, 0x68	; 104
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit(Insert_new_member);
    1e1e:	82 e3       	ldi	r24, 0x32	; 50
    1e20:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	62 e0       	ldi	r22, 0x02	; 2
    1e28:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1e2c:	40 c0       	rjmp	.+128    	; 0x1eae <LCD_OperateResult+0x12a>
			break;

		case '3':
			LCD_String("ID:");
    1e2e:	88 e6       	ldi	r24, 0x68	; 104
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit(Borrow);
    1e36:	83 e3       	ldi	r24, 0x33	; 51
    1e38:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1e44:	34 c0       	rjmp	.+104    	; 0x1eae <LCD_OperateResult+0x12a>
			break;

		case '4':
			LCD_String("ID:");
    1e46:	88 e6       	ldi	r24, 0x68	; 104
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit(Return);
    1e4e:	84 e3       	ldi	r24, 0x34	; 52
    1e50:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	62 e0       	ldi	r22, 0x02	; 2
    1e58:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1e5c:	28 c0       	rjmp	.+80     	; 0x1eae <LCD_OperateResult+0x12a>
			break;

		case '5':
			LCD_String("Book Confirm OP:");
    1e5e:	8c e6       	ldi	r24, 0x6C	; 108
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit('5');
    1e66:	85 e3       	ldi	r24, 0x35	; 53
    1e68:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
    1e6c:	20 c0       	rjmp	.+64     	; 0x1eae <LCD_OperateResult+0x12a>
			break;

		case '6':
			LCD_String("Member Confirm OP:");
    1e6e:	8d e7       	ldi	r24, 0x7D	; 125
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit('6');
    1e76:	86 e3       	ldi	r24, 0x36	; 54
    1e78:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
    1e7c:	18 c0       	rjmp	.+48     	; 0x1eae <LCD_OperateResult+0x12a>

			break;

		case '7':
			LCD_String("search ID:");
    1e7e:	80 e9       	ldi	r24, 0x90	; 144
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			Operation_submit('7');
    1e86:	87 e3       	ldi	r24, 0x37	; 55
    1e88:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	62 e0       	ldi	r22, 0x02	; 2
    1e90:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <LCD_OperateResult+0x12a>
			break;

		default:
			LCD_String("Invalid Operation");
    1e96:	8b e9       	ldi	r24, 0x9B	; 155
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_vidClearOnDemand(1, 32);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	60 e2       	ldi	r22, 0x20	; 32
    1ea2:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
			LCD_vidGoTo(1, 1);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			break;
	}
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <KEY_PAD_vidOperations>:


// 2nd stage for LCD
// Pass string to the correspoinding field inside its operation
void KEY_PAD_vidOperations(void)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <KEY_PAD_vidOperations+0x6>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	// Detect operations
	switch(operation)
    1ec4:	80 91 aa 03 	lds	r24, 0x03AA
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3a 83       	std	Y+2, r19	; 0x02
    1ece:	29 83       	std	Y+1, r18	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	84 33       	cpi	r24, 0x34	; 52
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <KEY_PAD_vidOperations+0x22>
    1eda:	19 c1       	rjmp	.+562    	; 0x210e <KEY_PAD_vidOperations+0x254>
    1edc:	29 81       	ldd	r18, Y+1	; 0x01
    1ede:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee0:	25 33       	cpi	r18, 0x35	; 53
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	94 f4       	brge	.+36     	; 0x1f0a <KEY_PAD_vidOperations+0x50>
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	82 33       	cpi	r24, 0x32	; 50
    1eec:	91 05       	cpc	r25, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <KEY_PAD_vidOperations+0x38>
    1ef0:	82 c0       	rjmp	.+260    	; 0x1ff6 <KEY_PAD_vidOperations+0x13c>
    1ef2:	29 81       	ldd	r18, Y+1	; 0x01
    1ef4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef6:	23 33       	cpi	r18, 0x33	; 51
    1ef8:	31 05       	cpc	r19, r1
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <KEY_PAD_vidOperations+0x44>
    1efc:	c2 c0       	rjmp	.+388    	; 0x2082 <KEY_PAD_vidOperations+0x1c8>
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	81 33       	cpi	r24, 0x31	; 49
    1f04:	91 05       	cpc	r25, r1
    1f06:	a1 f0       	breq	.+40     	; 0x1f30 <KEY_PAD_vidOperations+0x76>
    1f08:	80 c1       	rjmp	.+768    	; 0x220a <KEY_PAD_vidOperations+0x350>
    1f0a:	29 81       	ldd	r18, Y+1	; 0x01
    1f0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f0e:	26 33       	cpi	r18, 0x36	; 54
    1f10:	31 05       	cpc	r19, r1
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <KEY_PAD_vidOperations+0x5c>
    1f14:	49 c1       	rjmp	.+658    	; 0x21a8 <KEY_PAD_vidOperations+0x2ee>
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	86 33       	cpi	r24, 0x36	; 54
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	0c f4       	brge	.+2      	; 0x1f22 <KEY_PAD_vidOperations+0x68>
    1f20:	3c c1       	rjmp	.+632    	; 0x219a <KEY_PAD_vidOperations+0x2e0>
    1f22:	29 81       	ldd	r18, Y+1	; 0x01
    1f24:	3a 81       	ldd	r19, Y+2	; 0x02
    1f26:	27 33       	cpi	r18, 0x37	; 55
    1f28:	31 05       	cpc	r19, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <KEY_PAD_vidOperations+0x74>
    1f2c:	44 c1       	rjmp	.+648    	; 0x21b6 <KEY_PAD_vidOperations+0x2fc>
    1f2e:	6d c1       	rjmp	.+730    	; 0x220a <KEY_PAD_vidOperations+0x350>
	{
		case Insert_new_book:
			// Sequential insertion
			
			if(!Name_General_flag)
    1f30:	80 91 a6 03 	lds	r24, 0x03A6
    1f34:	88 23       	and	r24, r24
    1f36:	a1 f4       	brne	.+40     	; 0x1f60 <KEY_PAD_vidOperations+0xa6>
			{
				// Call to insert name and submit the string
				CopyString(Name);
    1f38:	82 e8       	ldi	r24, 0x82	; 130
    1f3a:	93 e0       	ldi	r25, 0x03	; 3
    1f3c:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				Name_General_flag = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	80 93 a6 03 	sts	0x03A6, r24

				LCD_String("ISBN");
    1f46:	8d ea       	ldi	r24, 0xAD	; 173
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1f4e:	81 e1       	ldi	r24, 0x11	; 17
    1f50:	60 e2       	ldi	r22, 0x20	; 32
    1f52:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1f5e:	46 c0       	rjmp	.+140    	; 0x1fec <KEY_PAD_vidOperations+0x132>
			}
			else if(!ISBN_flag)
    1f60:	80 91 a5 03 	lds	r24, 0x03A5
    1f64:	88 23       	and	r24, r24
    1f66:	a1 f4       	brne	.+40     	; 0x1f90 <KEY_PAD_vidOperations+0xd6>
			{
				// Call to submit ISBN and submit the string
				CopyString(serial);
    1f68:	86 e9       	ldi	r24, 0x96	; 150
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				ISBN_flag = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 a5 03 	sts	0x03A5, r24

				LCD_String("COPIES:");
    1f76:	82 eb       	ldi	r24, 0xB2	; 178
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1f7e:	81 e1       	ldi	r24, 0x11	; 17
    1f80:	60 e2       	ldi	r22, 0x20	; 32
    1f82:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	62 e0       	ldi	r22, 0x02	; 2
    1f8a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1f8e:	2e c0       	rjmp	.+92     	; 0x1fec <KEY_PAD_vidOperations+0x132>
			}
			else if(!copies_flag)
    1f90:	80 91 a7 03 	lds	r24, 0x03A7
    1f94:	88 23       	and	r24, r24
    1f96:	a1 f4       	brne	.+40     	; 0x1fc0 <KEY_PAD_vidOperations+0x106>
			{
				// Call to submit copies and submit the string
				copies = StringToInt();
    1f98:	0e 94 2e 11 	call	0x225c	; 0x225c <StringToInt>
    1f9c:	80 93 74 03 	sts	0x0374, r24
				copies_flag = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	80 93 a7 03 	sts	0x03A7, r24

				LCD_String("Confirm");
    1fa6:	8a eb       	ldi	r24, 0xBA	; 186
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1fae:	81 e1       	ldi	r24, 0x11	; 17
    1fb0:	60 e2       	ldi	r22, 0x20	; 32
    1fb2:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <KEY_PAD_vidOperations+0x132>
			}
			else
			{
				// Make sure you checked for 3 inputs
				BOOKS_vidInsertion(serial, Name, copies);
    1fc0:	20 91 74 03 	lds	r18, 0x0374
    1fc4:	86 e9       	ldi	r24, 0x96	; 150
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	42 e8       	ldi	r20, 0x82	; 130
    1fca:	53 e0       	ldi	r21, 0x03	; 3
    1fcc:	ba 01       	movw	r22, r20
    1fce:	42 2f       	mov	r20, r18
    1fd0:	0e 94 c3 18 	call	0x3186	; 0x3186 <BOOKS_vidInsertion>
					
				// Reset for recheck
				Name_General_flag = 0;
    1fd4:	10 92 a6 03 	sts	0x03A6, r1
				copies_flag = 0;
    1fd8:	10 92 a7 03 	sts	0x03A7, r1
				ISBN_flag = 0;
    1fdc:	10 92 a5 03 	sts	0x03A5, r1
				LCD_vidClearOnDemand(17, 32);
    1fe0:	81 e1       	ldi	r24, 0x11	; 17
    1fe2:	60 e2       	ldi	r22, 0x20	; 32
    1fe4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				Operation_Reset();
    1fe8:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>

			}
			
			GPS_Index = 0;
    1fec:	10 92 6e 03 	sts	0x036E, r1
			GPS_Reset();
    1ff0:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
    1ff4:	0e c1       	rjmp	.+540    	; 0x2212 <KEY_PAD_vidOperations+0x358>
			
			
		case Insert_new_member:
			// Sequential insertion

			if(!id_flag)
    1ff6:	80 91 a3 03 	lds	r24, 0x03A3
    1ffa:	88 23       	and	r24, r24
    1ffc:	a1 f4       	brne	.+40     	; 0x2026 <KEY_PAD_vidOperations+0x16c>
			{
				// return to insert id and submit the string 
				CopyString(id);
    1ffe:	8f e6       	ldi	r24, 0x6F	; 111
    2000:	93 e0       	ldi	r25, 0x03	; 3
    2002:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				id_flag = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	80 93 a3 03 	sts	0x03A3, r24

				LCD_String("NAME:");
    200c:	82 e6       	ldi	r24, 0x62	; 98
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2014:	81 e1       	ldi	r24, 0x11	; 17
    2016:	60 e2       	ldi	r22, 0x20	; 32
    2018:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    2024:	29 c0       	rjmp	.+82     	; 0x2078 <KEY_PAD_vidOperations+0x1be>
			}
			else if(!Name_General_flag)
    2026:	80 91 a6 03 	lds	r24, 0x03A6
    202a:	88 23       	and	r24, r24
    202c:	a1 f4       	brne	.+40     	; 0x2056 <KEY_PAD_vidOperations+0x19c>
			{
				// return to submit ISBN and submit the string
				CopyString(Name);
    202e:	82 e8       	ldi	r24, 0x82	; 130
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				Name_General_flag = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 a6 03 	sts	0x03A6, r24

				LCD_String("Confirm");
    203c:	8a eb       	ldi	r24, 0xBA	; 186
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2044:	81 e1       	ldi	r24, 0x11	; 17
    2046:	60 e2       	ldi	r22, 0x20	; 32
    2048:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	62 e0       	ldi	r22, 0x02	; 2
    2050:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    2054:	11 c0       	rjmp	.+34     	; 0x2078 <KEY_PAD_vidOperations+0x1be>
			}
			else
			{
				LinkedList_vidInsertion(id, Name);
    2056:	8f e6       	ldi	r24, 0x6F	; 111
    2058:	93 e0       	ldi	r25, 0x03	; 3
    205a:	22 e8       	ldi	r18, 0x82	; 130
    205c:	33 e0       	ldi	r19, 0x03	; 3
    205e:	b9 01       	movw	r22, r18
    2060:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <LinkedList_vidInsertion>

				// Reset for recheck
				id_flag = 0;
    2064:	10 92 a3 03 	sts	0x03A3, r1
				Name_General_flag = 0;
    2068:	10 92 a6 03 	sts	0x03A6, r1
				LCD_vidClearOnDemand(17, 32);
    206c:	81 e1       	ldi	r24, 0x11	; 17
    206e:	60 e2       	ldi	r22, 0x20	; 32
    2070:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

				Operation_Reset();
    2074:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>
			}
			
			GPS_Index = 0;
    2078:	10 92 6e 03 	sts	0x036E, r1
			GPS_Reset();
    207c:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
    2080:	c8 c0       	rjmp	.+400    	; 0x2212 <KEY_PAD_vidOperations+0x358>


		case Borrow:
			// Sequential insertion

			if(!id_flag)
    2082:	80 91 a3 03 	lds	r24, 0x03A3
    2086:	88 23       	and	r24, r24
    2088:	a1 f4       	brne	.+40     	; 0x20b2 <KEY_PAD_vidOperations+0x1f8>
			{
				// return to insert id and submit the string 
				CopyString(id);
    208a:	8f e6       	ldi	r24, 0x6F	; 111
    208c:	93 e0       	ldi	r25, 0x03	; 3
    208e:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				id_flag = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	80 93 a3 03 	sts	0x03A3, r24

				LCD_String("ISBN");
    2098:	8d ea       	ldi	r24, 0xAD	; 173
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    20a0:	81 e1       	ldi	r24, 0x11	; 17
    20a2:	60 e2       	ldi	r22, 0x20	; 32
    20a4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    20b0:	29 c0       	rjmp	.+82     	; 0x2104 <KEY_PAD_vidOperations+0x24a>
			}
			else if(!ISBN_flag)
    20b2:	80 91 a5 03 	lds	r24, 0x03A5
    20b6:	88 23       	and	r24, r24
    20b8:	a1 f4       	brne	.+40     	; 0x20e2 <KEY_PAD_vidOperations+0x228>
			{
				// return to submit ISBN and submit the string
				CopyString(serial);
    20ba:	86 e9       	ldi	r24, 0x96	; 150
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				ISBN_flag = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	80 93 a5 03 	sts	0x03A5, r24

				LCD_String("Confirm");
    20c8:	8a eb       	ldi	r24, 0xBA	; 186
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    20d0:	81 e1       	ldi	r24, 0x11	; 17
    20d2:	60 e2       	ldi	r22, 0x20	; 32
    20d4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    20e0:	11 c0       	rjmp	.+34     	; 0x2104 <KEY_PAD_vidOperations+0x24a>
			}
			else
			{
				Borrow_vid(id, serial);
    20e2:	8f e6       	ldi	r24, 0x6F	; 111
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    20e6:	26 e9       	ldi	r18, 0x96	; 150
    20e8:	33 e0       	ldi	r19, 0x03	; 3
    20ea:	b9 01       	movw	r22, r18
    20ec:	0e 94 0d 23 	call	0x461a	; 0x461a <Borrow_vid>
			
				// Reset for checking
				id_flag = 0;
    20f0:	10 92 a3 03 	sts	0x03A3, r1
				ISBN_flag = 0;
    20f4:	10 92 a5 03 	sts	0x03A5, r1
				LCD_vidClearOnDemand(17, 32);
    20f8:	81 e1       	ldi	r24, 0x11	; 17
    20fa:	60 e2       	ldi	r22, 0x20	; 32
    20fc:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				Operation_Reset();
    2100:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>
			}

			GPS_Index = 0;
    2104:	10 92 6e 03 	sts	0x036E, r1
			GPS_Reset();
    2108:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
    210c:	82 c0       	rjmp	.+260    	; 0x2212 <KEY_PAD_vidOperations+0x358>
			break;

		case Return:
			// Sequential insertion
		
			if(!id_flag)
    210e:	80 91 a3 03 	lds	r24, 0x03A3
    2112:	88 23       	and	r24, r24
    2114:	a1 f4       	brne	.+40     	; 0x213e <KEY_PAD_vidOperations+0x284>
			{
				// return to insert id and submit the string 
				CopyString(id);
    2116:	8f e6       	ldi	r24, 0x6F	; 111
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				id_flag = 1;	
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	80 93 a3 03 	sts	0x03A3, r24

				LCD_String("ISBN");
    2124:	8d ea       	ldi	r24, 0xAD	; 173
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    212c:	81 e1       	ldi	r24, 0x11	; 17
    212e:	60 e2       	ldi	r22, 0x20	; 32
    2130:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	62 e0       	ldi	r22, 0x02	; 2
    2138:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    213c:	29 c0       	rjmp	.+82     	; 0x2190 <KEY_PAD_vidOperations+0x2d6>
			}
			else if(!ISBN_flag)
    213e:	80 91 a5 03 	lds	r24, 0x03A5
    2142:	88 23       	and	r24, r24
    2144:	a1 f4       	brne	.+40     	; 0x216e <KEY_PAD_vidOperations+0x2b4>
			{
				// return to submit ISBN and submit the string
				CopyString(serial);
    2146:	86 e9       	ldi	r24, 0x96	; 150
    2148:	93 e0       	ldi	r25, 0x03	; 3
    214a:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				ISBN_flag = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	80 93 a5 03 	sts	0x03A5, r24

				LCD_String("Confirm");
    2154:	8a eb       	ldi	r24, 0xBA	; 186
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    215c:	81 e1       	ldi	r24, 0x11	; 17
    215e:	60 e2       	ldi	r22, 0x20	; 32
    2160:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    216c:	11 c0       	rjmp	.+34     	; 0x2190 <KEY_PAD_vidOperations+0x2d6>
			}
			else
			{
				// Insert into the list and set ready to overwrite
				RETURN_vid(id, serial);
    216e:	8f e6       	ldi	r24, 0x6F	; 111
    2170:	93 e0       	ldi	r25, 0x03	; 3
    2172:	26 e9       	ldi	r18, 0x96	; 150
    2174:	33 e0       	ldi	r19, 0x03	; 3
    2176:	b9 01       	movw	r22, r18
    2178:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <RETURN_vid>
				id_flag = 0;
    217c:	10 92 a3 03 	sts	0x03A3, r1
				ISBN_flag = 0;
    2180:	10 92 a5 03 	sts	0x03A5, r1
				LCD_vidClearOnDemand(17, 32);
    2184:	81 e1       	ldi	r24, 0x11	; 17
    2186:	60 e2       	ldi	r22, 0x20	; 32
    2188:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				Operation_Reset();
    218c:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>
			}
			
			GPS_Index = 0;
    2190:	10 92 6e 03 	sts	0x036E, r1
			GPS_Reset();
    2194:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
    2198:	3c c0       	rjmp	.+120    	; 0x2212 <KEY_PAD_vidOperations+0x358>
			break;
			
		// Shows all books in library
		case '5':
			BOOKS_show();
    219a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <BOOKS_show>
			GPS_Index = 0;
    219e:	10 92 6e 03 	sts	0x036E, r1
			Operation_Reset();
    21a2:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>
    21a6:	35 c0       	rjmp	.+106    	; 0x2212 <KEY_PAD_vidOperations+0x358>

			break;

		// Shows all member
		case '6':
			LinkedList_show();
    21a8:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <LinkedList_show>
			GPS_Index = 0;
    21ac:	10 92 6e 03 	sts	0x036E, r1
			Operation_Reset();
    21b0:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>
    21b4:	2e c0       	rjmp	.+92     	; 0x2212 <KEY_PAD_vidOperations+0x358>
			break;

		// Gives info about specific member
		case '7':
			if(!id_flag)
    21b6:	80 91 a3 03 	lds	r24, 0x03A3
    21ba:	88 23       	and	r24, r24
    21bc:	a1 f4       	brne	.+40     	; 0x21e6 <KEY_PAD_vidOperations+0x32c>
			{
				// return to submit ID
				CopyString(id);
    21be:	8f e6       	ldi	r24, 0x6F	; 111
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 98 11 	call	0x2330	; 0x2330 <CopyString>
				id_flag = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	80 93 a3 03 	sts	0x03A3, r24

				LCD_String("Confirm");
    21cc:	8a eb       	ldi	r24, 0xBA	; 186
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    21d4:	81 e1       	ldi	r24, 0x11	; 17
    21d6:	60 e2       	ldi	r22, 0x20	; 32
    21d8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    21e4:	0d c0       	rjmp	.+26     	; 0x2200 <KEY_PAD_vidOperations+0x346>
			}
			else
			{
				// Insert into the list and set ready to overwrite
				LinkedList_vidSearch(id, 1);
    21e6:	8f e6       	ldi	r24, 0x6F	; 111
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	0e 94 b0 21 	call	0x4360	; 0x4360 <LinkedList_vidSearch>
				id_flag = 0;
    21f0:	10 92 a3 03 	sts	0x03A3, r1
				LCD_vidClearOnDemand(17, 32);
    21f4:	81 e1       	ldi	r24, 0x11	; 17
    21f6:	60 e2       	ldi	r22, 0x20	; 32
    21f8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
				Operation_Reset();
    21fc:	0e 94 ce 11 	call	0x239c	; 0x239c <Operation_Reset>
			}

			GPS_Index = 0;
    2200:	10 92 6e 03 	sts	0x036E, r1
			GPS_Reset();
    2204:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
    2208:	04 c0       	rjmp	.+8      	; 0x2212 <KEY_PAD_vidOperations+0x358>
			break;

		default:
			GPS_Reset();
    220a:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
			GPS_Index = 0;
    220e:	10 92 6e 03 	sts	0x036E, r1
			break;
	}
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <KeyPad_CharAccumulateString>:


// Fetch string for every new input
void KeyPad_CharAccumulateString(u8 result)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	0f 92       	push	r0
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	89 83       	std	Y+1, r24	; 0x01
	// For new inputs remeber to set GPS_Index = 0
	General_Purpose_String[GPS_Index] = result;
    2228:	80 91 6e 03 	lds	r24, 0x036E
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	fc 01       	movw	r30, r24
    2232:	e1 5a       	subi	r30, 0xA1	; 161
    2234:	fc 4f       	sbci	r31, 0xFC	; 252
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	80 83       	st	Z, r24
	GPS_Index++;
    223a:	80 91 6e 03 	lds	r24, 0x036E
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	80 93 6e 03 	sts	0x036E, r24
	General_Purpose_String[GPS_Index] = '\0';
    2244:	80 91 6e 03 	lds	r24, 0x036E
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	fc 01       	movw	r30, r24
    224e:	e1 5a       	subi	r30, 0xA1	; 161
    2250:	fc 4f       	sbci	r31, 0xFC	; 252
    2252:	10 82       	st	Z, r1

}
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <StringToInt>:


// From string of chars to int
short int StringToInt(void)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <StringToInt+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <StringToInt+0x8>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
	u8 j = 0, times = 1;
    2268:	1c 82       	std	Y+4, r1	; 0x04
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	8b 83       	std	Y+3, r24	; 0x03
	u16 sum = 0;
    226e:	1a 82       	std	Y+2, r1	; 0x02
    2270:	19 82       	std	Y+1, r1	; 0x01
    2272:	18 c0       	rjmp	.+48     	; 0x22a4 <StringToInt+0x48>

	// Get string length
	while(General_Purpose_String[j] != '\0')
	{
		if(!j)
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	88 23       	and	r24, r24
    2278:	21 f4       	brne	.+8      	; 0x2282 <StringToInt+0x26>
		{
			j++;
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	8c 83       	std	Y+4, r24	; 0x04
    2280:	11 c0       	rjmp	.+34     	; 0x22a4 <StringToInt+0x48>
		}
		else
		{
			j++;
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	8c 83       	std	Y+4, r24	; 0x04
			times *= 10;
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9c 01       	movw	r18, r24
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	c9 01       	movw	r24, r18
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	8b 83       	std	Y+3, r24	; 0x03
{
	u8 j = 0, times = 1;
	u16 sum = 0;

	// Get string length
	while(General_Purpose_String[j] != '\0')
    22a4:	8c 81       	ldd	r24, Y+4	; 0x04
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	fc 01       	movw	r30, r24
    22ac:	e1 5a       	subi	r30, 0xA1	; 161
    22ae:	fc 4f       	sbci	r31, 0xFC	; 252
    22b0:	80 81       	ld	r24, Z
    22b2:	88 23       	and	r24, r24
    22b4:	f9 f6       	brne	.-66     	; 0x2274 <StringToInt+0x18>
		}
	}


	// Get serial number from string
	for(j = 0; General_Purpose_String[j] != '\0'; j--)
    22b6:	1c 82       	std	Y+4, r1	; 0x04
    22b8:	29 c0       	rjmp	.+82     	; 0x230c <StringToInt+0xb0>
	{
		// Serial is global variable
		sum += (General_Purpose_String[j] % 48)* times;
    22ba:	8c 81       	ldd	r24, Y+4	; 0x04
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	fc 01       	movw	r30, r24
    22c2:	e1 5a       	subi	r30, 0xA1	; 161
    22c4:	fc 4f       	sbci	r31, 0xFC	; 252
    22c6:	80 81       	ld	r24, Z
    22c8:	90 e3       	ldi	r25, 0x30	; 48
    22ca:	69 2f       	mov	r22, r25
    22cc:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__udivmodqi4>
    22d0:	89 2f       	mov	r24, r25
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	ac 01       	movw	r20, r24
    22de:	24 9f       	mul	r18, r20
    22e0:	c0 01       	movw	r24, r0
    22e2:	25 9f       	mul	r18, r21
    22e4:	90 0d       	add	r25, r0
    22e6:	34 9f       	mul	r19, r20
    22e8:	90 0d       	add	r25, r0
    22ea:	11 24       	eor	r1, r1
    22ec:	9c 01       	movw	r18, r24
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	82 0f       	add	r24, r18
    22f4:	93 1f       	adc	r25, r19
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
		times /=10;
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9a e0       	ldi	r25, 0x0A	; 10
    22fe:	69 2f       	mov	r22, r25
    2300:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__udivmodqi4>
    2304:	8b 83       	std	Y+3, r24	; 0x03
		}
	}


	// Get serial number from string
	for(j = 0; General_Purpose_String[j] != '\0'; j--)
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	81 50       	subi	r24, 0x01	; 1
    230a:	8c 83       	std	Y+4, r24	; 0x04
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	fc 01       	movw	r30, r24
    2314:	e1 5a       	subi	r30, 0xA1	; 161
    2316:	fc 4f       	sbci	r31, 0xFC	; 252
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	71 f6       	brne	.-100    	; 0x22ba <StringToInt+0x5e>
		// Serial is global variable
		sum += (General_Purpose_String[j] % 48)* times;
		times /=10;
	}

	return sum;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <CopyString>:


// Copy string
void CopyString(char *ptr)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	00 d0       	rcall	.+0      	; 0x2336 <CopyString+0x6>
    2336:	0f 92       	push	r0
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	9b 83       	std	Y+3, r25	; 0x03
    233e:	8a 83       	std	Y+2, r24	; 0x02
	u8 j = 0;
    2340:	19 82       	std	Y+1, r1	; 0x01

	// Get Name
	for(j = 0; General_Purpose_String[j] != '\0'; j++)
    2342:	19 82       	std	Y+1, r1	; 0x01
    2344:	13 c0       	rjmp	.+38     	; 0x236c <CopyString+0x3c>
	{
		// Serial is global variable
		ptr[j] = (General_Purpose_String[j]);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	dc 01       	movw	r26, r24
    2352:	a2 0f       	add	r26, r18
    2354:	b3 1f       	adc	r27, r19
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	fc 01       	movw	r30, r24
    235e:	e1 5a       	subi	r30, 0xA1	; 161
    2360:	fc 4f       	sbci	r31, 0xFC	; 252
    2362:	80 81       	ld	r24, Z
    2364:	8c 93       	st	X, r24
void CopyString(char *ptr)
{
	u8 j = 0;

	// Get Name
	for(j = 0; General_Purpose_String[j] != '\0'; j++)
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	fc 01       	movw	r30, r24
    2374:	e1 5a       	subi	r30, 0xA1	; 161
    2376:	fc 4f       	sbci	r31, 0xFC	; 252
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	21 f7       	brne	.-56     	; 0x2346 <CopyString+0x16>
	{
		// Serial is global variable
		ptr[j] = (General_Purpose_String[j]);

	}
	ptr[j] = '\0';
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	9b 81       	ldd	r25, Y+3	; 0x03
    2388:	fc 01       	movw	r30, r24
    238a:	e2 0f       	add	r30, r18
    238c:	f3 1f       	adc	r31, r19
    238e:	10 82       	st	Z, r1
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <Operation_Reset>:


// Reset after executing the current operation
void Operation_Reset(void)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
	// Reset operation fields
	operation = 0;
    23a4:	10 92 aa 03 	sts	0x03AA, r1
	operation_flag = 0;
    23a8:	10 92 a8 03 	sts	0x03A8, r1
	GPS_Reset();
    23ac:	0e 94 de 11 	call	0x23bc	; 0x23bc <GPS_Reset>
	BREAK_CODE = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	80 93 ab 03 	sts	0x03AB, r24

}
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <GPS_Reset>:


// Reset General_Purpose_string with '0' for operation's not to accumulate
void GPS_Reset(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	for(u8 i = 0; i < sizeof(General_Purpose_String); i++)
    23c6:	19 82       	std	Y+1, r1	; 0x01
    23c8:	0b c0       	rjmp	.+22     	; 0x23e0 <GPS_Reset+0x24>
	{
		General_Purpose_String[i] = '0';
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	fc 01       	movw	r30, r24
    23d2:	e1 5a       	subi	r30, 0xA1	; 161
    23d4:	fc 4f       	sbci	r31, 0xFC	; 252
    23d6:	80 e3       	ldi	r24, 0x30	; 48
    23d8:	80 83       	st	Z, r24


// Reset General_Purpose_string with '0' for operation's not to accumulate
void GPS_Reset(void)
{
	for(u8 i = 0; i < sizeof(General_Purpose_String); i++)
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	8f 30       	cpi	r24, 0x0F	; 15
    23e4:	90 f3       	brcs	.-28     	; 0x23ca <GPS_Reset+0xe>
	{
		General_Purpose_String[i] = '0';
	}
}
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <Operation_submit>:


// Submit operation to execute in the next loop
void Operation_submit(char x)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	89 83       	std	Y+1, r24	; 0x01
	// Clear Display
	LCD_vidClearOnDemand(17, 32);
    23fa:	81 e1       	ldi	r24, 0x11	; 17
    23fc:	60 e2       	ldi	r22, 0x20	; 32
    23fe:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

	// Submit operation global variable
	operation = x;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	80 93 aa 03 	sts	0x03AA, r24
	operation_flag = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	80 93 a8 03 	sts	0x03A8, r24
}
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_vidInitialize>:
  */


// INITIALIZATION, always start an LCD with
void LCD_vidInitialize(void)
{
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	c6 55       	subi	r28, 0x56	; 86
    2424:	d0 40       	sbci	r29, 0x00	; 0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
	// Set PORTD, PORTC as output by default
	DIO_vidSetPortxDir(LCD_PORT_DATA, 1);	// PORTC
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>
	DIO_vidSetPortxDir(LCD_PORT_CONTROL, 1);	// PORTD
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	61 e0       	ldi	r22, 0x01	; 1
    243c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>

	// RS and RW = 0
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 0);
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 0);
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>


	// Function Set, F = 0, DL = 1, N = 1
	LCD_vidInstruction(0X38, write_operation, IR);
    2454:	88 e3       	ldi	r24, 0x38	; 56
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    245e:	fe 01       	movw	r30, r28
    2460:	ed 5a       	subi	r30, 0xAD	; 173
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 e3       	ldi	r26, 0x30	; 48
    246a:	b1 e4       	ldi	r27, 0x41	; 65
    246c:	80 83       	st	Z, r24
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	a2 83       	std	Z+2, r26	; 0x02
    2472:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2474:	8e 01       	movw	r16, r28
    2476:	01 5b       	subi	r16, 0xB1	; 177
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	fe 01       	movw	r30, r28
    247c:	ed 5a       	subi	r30, 0xAD	; 173
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	2b ea       	ldi	r18, 0xAB	; 171
    248a:	3a ea       	ldi	r19, 0xAA	; 170
    248c:	4a e2       	ldi	r20, 0x2A	; 42
    248e:	50 e4       	ldi	r21, 0x40	; 64
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	80 83       	st	Z, r24
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	a2 83       	std	Z+2, r26	; 0x02
    24a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a2:	fe 01       	movw	r30, r28
    24a4:	e1 5b       	subi	r30, 0xB1	; 177
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	34 f4       	brge	.+12     	; 0x24cc <LCD_vidInitialize+0xb6>
		__ticks = 1;
    24c0:	fe 01       	movw	r30, r28
    24c2:	e2 5b       	subi	r30, 0xB2	; 178
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	80 83       	st	Z, r24
    24ca:	e0 c0       	rjmp	.+448    	; 0x268c <LCD_vidInitialize+0x276>
	else if (__tmp > 255)
    24cc:	fe 01       	movw	r30, r28
    24ce:	e1 5b       	subi	r30, 0xB1	; 177
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	53 e4       	ldi	r21, 0x43	; 67
    24e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	0c f0       	brlt	.+2      	; 0x24ec <LCD_vidInitialize+0xd6>
    24ea:	c0 c0       	rjmp	.+384    	; 0x266c <LCD_vidInitialize+0x256>
	{
		_delay_ms(__us / 1000.0);
    24ec:	fe 01       	movw	r30, r28
    24ee:	ed 5a       	subi	r30, 0xAD	; 173
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a e7       	ldi	r20, 0x7A	; 122
    2500:	54 e4       	ldi	r21, 0x44	; 68
    2502:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	fe 01       	movw	r30, r28
    250c:	e6 5b       	subi	r30, 0xB6	; 182
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 83       	st	Z, r24
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	a2 83       	std	Z+2, r26	; 0x02
    2516:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	8e 01       	movw	r16, r28
    251a:	0a 5b       	subi	r16, 0xBA	; 186
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	fe 01       	movw	r30, r28
    2520:	e6 5b       	subi	r30, 0xB6	; 182
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a ef       	ldi	r20, 0xFA	; 250
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	80 83       	st	Z, r24
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	a2 83       	std	Z+2, r26	; 0x02
    2544:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2546:	fe 01       	movw	r30, r28
    2548:	ea 5b       	subi	r30, 0xBA	; 186
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	44 f4       	brge	.+16     	; 0x2574 <LCD_vidInitialize+0x15e>
		__ticks = 1;
    2564:	fe 01       	movw	r30, r28
    2566:	ec 5b       	subi	r30, 0xBC	; 188
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    2572:	64 c0       	rjmp	.+200    	; 0x263c <LCD_vidInitialize+0x226>
	else if (__tmp > 65535)
    2574:	fe 01       	movw	r30, r28
    2576:	ea 5b       	subi	r30, 0xBA	; 186
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	0c f0       	brlt	.+2      	; 0x2594 <LCD_vidInitialize+0x17e>
    2592:	43 c0       	rjmp	.+134    	; 0x261a <LCD_vidInitialize+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	fe 01       	movw	r30, r28
    2596:	e6 5b       	subi	r30, 0xB6	; 182
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8e 01       	movw	r16, r28
    25b4:	0c 5b       	subi	r16, 0xBC	; 188
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	1f c0       	rjmp	.+62     	; 0x260a <LCD_vidInitialize+0x1f4>
    25cc:	fe 01       	movw	r30, r28
    25ce:	ee 5b       	subi	r30, 0xBE	; 190
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	88 ec       	ldi	r24, 0xC8	; 200
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
    25da:	fe 01       	movw	r30, r28
    25dc:	ee 5b       	subi	r30, 0xBE	; 190
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_vidInitialize+0x1ce>
    25e8:	fe 01       	movw	r30, r28
    25ea:	ee 5b       	subi	r30, 0xBE	; 190
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	de 01       	movw	r26, r28
    25f4:	ac 5b       	subi	r26, 0xBC	; 188
    25f6:	bf 4f       	sbci	r27, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	ec 5b       	subi	r30, 0xBC	; 188
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	11 96       	adiw	r26, 0x01	; 1
    2606:	9c 93       	st	X, r25
    2608:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	fe 01       	movw	r30, r28
    260c:	ec 5b       	subi	r30, 0xBC	; 188
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	d1 f6       	brne	.-76     	; 0x25cc <LCD_vidInitialize+0x1b6>
    2618:	42 c0       	rjmp	.+132    	; 0x269e <LCD_vidInitialize+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	8e 01       	movw	r16, r28
    261c:	0c 5b       	subi	r16, 0xBC	; 188
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	ea 5b       	subi	r30, 0xBA	; 186
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	f8 01       	movw	r30, r16
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	80 83       	st	Z, r24
    263c:	de 01       	movw	r26, r28
    263e:	a0 5c       	subi	r26, 0xC0	; 192
    2640:	bf 4f       	sbci	r27, 0xFF	; 255
    2642:	fe 01       	movw	r30, r28
    2644:	ec 5b       	subi	r30, 0xBC	; 188
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	91 81       	ldd	r25, Z+1	; 0x01
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	9c 93       	st	X, r25
    2650:	8e 93       	st	-X, r24
    2652:	fe 01       	movw	r30, r28
    2654:	e0 5c       	subi	r30, 0xC0	; 192
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_vidInitialize+0x246>
    2660:	fe 01       	movw	r30, r28
    2662:	e0 5c       	subi	r30, 0xC0	; 192
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
    266a:	19 c0       	rjmp	.+50     	; 0x269e <LCD_vidInitialize+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    266c:	8e 01       	movw	r16, r28
    266e:	02 5b       	subi	r16, 0xB2	; 178
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	fe 01       	movw	r30, r28
    2674:	e1 5b       	subi	r30, 0xB1	; 177
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	f8 01       	movw	r30, r16
    268a:	80 83       	st	Z, r24
    268c:	fe 01       	movw	r30, r28
    268e:	e2 5b       	subi	r30, 0xB2	; 178
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2696:	8f ad       	ldd	r24, Y+63	; 0x3f
    2698:	8a 95       	dec	r24
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_vidInitialize+0x282>
    269c:	8f af       	std	Y+63, r24	; 0x3f

	// Delay > 39us
	_delay_us(11);

	// Display ON/OFF Control D = 1, C = 1, B = 0
	LCD_vidInstruction(0X0c, write_operation, IR);
    269e:	8c e0       	ldi	r24, 0x0C	; 12
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e3       	ldi	r26, 0x30	; 48
    26ae:	b1 e4       	ldi	r27, 0x41	; 65
    26b0:	8b af       	std	Y+59, r24	; 0x3b
    26b2:	9c af       	std	Y+60, r25	; 0x3c
    26b4:	ad af       	std	Y+61, r26	; 0x3d
    26b6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    26ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    26bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26be:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c0:	2b ea       	ldi	r18, 0xAB	; 171
    26c2:	3a ea       	ldi	r19, 0xAA	; 170
    26c4:	4a e2       	ldi	r20, 0x2A	; 42
    26c6:	50 e4       	ldi	r21, 0x40	; 64
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8f ab       	std	Y+55, r24	; 0x37
    26d2:	98 af       	std	Y+56, r25	; 0x38
    26d4:	a9 af       	std	Y+57, r26	; 0x39
    26d6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    26d8:	6f a9       	ldd	r22, Y+55	; 0x37
    26da:	78 ad       	ldd	r23, Y+56	; 0x38
    26dc:	89 ad       	ldd	r24, Y+57	; 0x39
    26de:	9a ad       	ldd	r25, Y+58	; 0x3a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	1c f4       	brge	.+6      	; 0x26f6 <LCD_vidInitialize+0x2e0>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	8e ab       	std	Y+54, r24	; 0x36
    26f4:	91 c0       	rjmp	.+290    	; 0x2818 <LCD_vidInitialize+0x402>
	else if (__tmp > 255)
    26f6:	6f a9       	ldd	r22, Y+55	; 0x37
    26f8:	78 ad       	ldd	r23, Y+56	; 0x38
    26fa:	89 ad       	ldd	r24, Y+57	; 0x39
    26fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4f e7       	ldi	r20, 0x7F	; 127
    2704:	53 e4       	ldi	r21, 0x43	; 67
    2706:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270a:	18 16       	cp	r1, r24
    270c:	0c f0       	brlt	.+2      	; 0x2710 <LCD_vidInitialize+0x2fa>
    270e:	7b c0       	rjmp	.+246    	; 0x2806 <LCD_vidInitialize+0x3f0>
	{
		_delay_ms(__us / 1000.0);
    2710:	6b ad       	ldd	r22, Y+59	; 0x3b
    2712:	7c ad       	ldd	r23, Y+60	; 0x3c
    2714:	8d ad       	ldd	r24, Y+61	; 0x3d
    2716:	9e ad       	ldd	r25, Y+62	; 0x3e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a e7       	ldi	r20, 0x7A	; 122
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8a ab       	std	Y+50, r24	; 0x32
    272a:	9b ab       	std	Y+51, r25	; 0x33
    272c:	ac ab       	std	Y+52, r26	; 0x34
    272e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	6a a9       	ldd	r22, Y+50	; 0x32
    2732:	7b a9       	ldd	r23, Y+51	; 0x33
    2734:	8c a9       	ldd	r24, Y+52	; 0x34
    2736:	9d a9       	ldd	r25, Y+53	; 0x35
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	4a ef       	ldi	r20, 0xFA	; 250
    273e:	54 e4       	ldi	r21, 0x44	; 68
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	8e a7       	std	Y+46, r24	; 0x2e
    274a:	9f a7       	std	Y+47, r25	; 0x2f
    274c:	a8 ab       	std	Y+48, r26	; 0x30
    274e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2750:	6e a5       	ldd	r22, Y+46	; 0x2e
    2752:	7f a5       	ldd	r23, Y+47	; 0x2f
    2754:	88 a9       	ldd	r24, Y+48	; 0x30
    2756:	99 a9       	ldd	r25, Y+49	; 0x31
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	2c f4       	brge	.+10     	; 0x2772 <LCD_vidInitialize+0x35c>
		__ticks = 1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9d a7       	std	Y+45, r25	; 0x2d
    276e:	8c a7       	std	Y+44, r24	; 0x2c
    2770:	3f c0       	rjmp	.+126    	; 0x27f0 <LCD_vidInitialize+0x3da>
	else if (__tmp > 65535)
    2772:	6e a5       	ldd	r22, Y+46	; 0x2e
    2774:	7f a5       	ldd	r23, Y+47	; 0x2f
    2776:	88 a9       	ldd	r24, Y+48	; 0x30
    2778:	99 a9       	ldd	r25, Y+49	; 0x31
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	4c f5       	brge	.+82     	; 0x27dc <LCD_vidInitialize+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278a:	6a a9       	ldd	r22, Y+50	; 0x32
    278c:	7b a9       	ldd	r23, Y+51	; 0x33
    278e:	8c a9       	ldd	r24, Y+52	; 0x34
    2790:	9d a9       	ldd	r25, Y+53	; 0x35
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	51 e4       	ldi	r21, 0x41	; 65
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9d a7       	std	Y+45, r25	; 0x2d
    27b0:	8c a7       	std	Y+44, r24	; 0x2c
    27b2:	0f c0       	rjmp	.+30     	; 0x27d2 <LCD_vidInitialize+0x3bc>
    27b4:	88 ec       	ldi	r24, 0xC8	; 200
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9b a7       	std	Y+43, r25	; 0x2b
    27ba:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27bc:	8a a5       	ldd	r24, Y+42	; 0x2a
    27be:	9b a5       	ldd	r25, Y+43	; 0x2b
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_vidInitialize+0x3aa>
    27c4:	9b a7       	std	Y+43, r25	; 0x2b
    27c6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    27ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9d a7       	std	Y+45, r25	; 0x2d
    27d0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    27d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <LCD_vidInitialize+0x39e>
    27da:	24 c0       	rjmp	.+72     	; 0x2824 <LCD_vidInitialize+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	6e a5       	ldd	r22, Y+46	; 0x2e
    27de:	7f a5       	ldd	r23, Y+47	; 0x2f
    27e0:	88 a9       	ldd	r24, Y+48	; 0x30
    27e2:	99 a9       	ldd	r25, Y+49	; 0x31
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9d a7       	std	Y+45, r25	; 0x2d
    27ee:	8c a7       	std	Y+44, r24	; 0x2c
    27f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    27f4:	99 a7       	std	Y+41, r25	; 0x29
    27f6:	88 a7       	std	Y+40, r24	; 0x28
    27f8:	88 a5       	ldd	r24, Y+40	; 0x28
    27fa:	99 a5       	ldd	r25, Y+41	; 0x29
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_vidInitialize+0x3e6>
    2800:	99 a7       	std	Y+41, r25	; 0x29
    2802:	88 a7       	std	Y+40, r24	; 0x28
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <LCD_vidInitialize+0x40e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2806:	6f a9       	ldd	r22, Y+55	; 0x37
    2808:	78 ad       	ldd	r23, Y+56	; 0x38
    280a:	89 ad       	ldd	r24, Y+57	; 0x39
    280c:	9a ad       	ldd	r25, Y+58	; 0x3a
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8e ab       	std	Y+54, r24	; 0x36
    2818:	8e a9       	ldd	r24, Y+54	; 0x36
    281a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    281c:	8f a1       	ldd	r24, Y+39	; 0x27
    281e:	8a 95       	dec	r24
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_vidInitialize+0x408>
    2822:	8f a3       	std	Y+39, r24	; 0x27

	// Delay > 39us
	_delay_us(11);

	// Display Clear
	LCD_vidInstruction(0x01, write_operation, IR);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	a0 e0       	ldi	r26, 0x00	; 0
    2834:	b0 e4       	ldi	r27, 0x40	; 64
    2836:	8b a3       	std	Y+35, r24	; 0x23
    2838:	9c a3       	std	Y+36, r25	; 0x24
    283a:	ad a3       	std	Y+37, r26	; 0x25
    283c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283e:	6b a1       	ldd	r22, Y+35	; 0x23
    2840:	7c a1       	ldd	r23, Y+36	; 0x24
    2842:	8d a1       	ldd	r24, Y+37	; 0x25
    2844:	9e a1       	ldd	r25, Y+38	; 0x26
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	4a ef       	ldi	r20, 0xFA	; 250
    284c:	54 e4       	ldi	r21, 0x44	; 68
    284e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	8f 8f       	std	Y+31, r24	; 0x1f
    2858:	98 a3       	std	Y+32, r25	; 0x20
    285a:	a9 a3       	std	Y+33, r26	; 0x21
    285c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    285e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2860:	78 a1       	ldd	r23, Y+32	; 0x20
    2862:	89 a1       	ldd	r24, Y+33	; 0x21
    2864:	9a a1       	ldd	r25, Y+34	; 0x22
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e8       	ldi	r20, 0x80	; 128
    286c:	5f e3       	ldi	r21, 0x3F	; 63
    286e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2872:	88 23       	and	r24, r24
    2874:	2c f4       	brge	.+10     	; 0x2880 <LCD_vidInitialize+0x46a>
		__ticks = 1;
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9e 8f       	std	Y+30, r25	; 0x1e
    287c:	8d 8f       	std	Y+29, r24	; 0x1d
    287e:	3f c0       	rjmp	.+126    	; 0x28fe <LCD_vidInitialize+0x4e8>
	else if (__tmp > 65535)
    2880:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2882:	78 a1       	ldd	r23, Y+32	; 0x20
    2884:	89 a1       	ldd	r24, Y+33	; 0x21
    2886:	9a a1       	ldd	r25, Y+34	; 0x22
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	3f ef       	ldi	r19, 0xFF	; 255
    288c:	4f e7       	ldi	r20, 0x7F	; 127
    288e:	57 e4       	ldi	r21, 0x47	; 71
    2890:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2894:	18 16       	cp	r1, r24
    2896:	4c f5       	brge	.+82     	; 0x28ea <LCD_vidInitialize+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2898:	6b a1       	ldd	r22, Y+35	; 0x23
    289a:	7c a1       	ldd	r23, Y+36	; 0x24
    289c:	8d a1       	ldd	r24, Y+37	; 0x25
    289e:	9e a1       	ldd	r25, Y+38	; 0x26
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e2       	ldi	r20, 0x20	; 32
    28a6:	51 e4       	ldi	r21, 0x41	; 65
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9e 8f       	std	Y+30, r25	; 0x1e
    28be:	8d 8f       	std	Y+29, r24	; 0x1d
    28c0:	0f c0       	rjmp	.+30     	; 0x28e0 <LCD_vidInitialize+0x4ca>
    28c2:	88 ec       	ldi	r24, 0xC8	; 200
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9c 8f       	std	Y+28, r25	; 0x1c
    28c8:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_vidInitialize+0x4b8>
    28d2:	9c 8f       	std	Y+28, r25	; 0x1c
    28d4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	9e 8f       	std	Y+30, r25	; 0x1e
    28de:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	69 f7       	brne	.-38     	; 0x28c2 <LCD_vidInitialize+0x4ac>
    28e8:	14 c0       	rjmp	.+40     	; 0x2912 <LCD_vidInitialize+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28ec:	78 a1       	ldd	r23, Y+32	; 0x20
    28ee:	89 a1       	ldd	r24, Y+33	; 0x21
    28f0:	9a a1       	ldd	r25, Y+34	; 0x22
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9e 8f       	std	Y+30, r25	; 0x1e
    28fc:	8d 8f       	std	Y+29, r24	; 0x1d
    28fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2900:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2902:	9a 8f       	std	Y+26, r25	; 0x1a
    2904:	89 8f       	std	Y+25, r24	; 0x19
    2906:	89 8d       	ldd	r24, Y+25	; 0x19
    2908:	9a 8d       	ldd	r25, Y+26	; 0x1a
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <LCD_vidInitialize+0x4f4>
    290e:	9a 8f       	std	Y+26, r25	; 0x1a
    2910:	89 8f       	std	Y+25, r24	; 0x19

	// Delay > 1.53ms
	_delay_ms(2);

	// Entry Mode Set
	LCD_vidInstruction(0x06, write_operation, IR);
    2912:	86 e0       	ldi	r24, 0x06	; 6
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a0 e3       	ldi	r26, 0x30	; 48
    2922:	b1 e4       	ldi	r27, 0x41	; 65
    2924:	8d 8b       	std	Y+21, r24	; 0x15
    2926:	9e 8b       	std	Y+22, r25	; 0x16
    2928:	af 8b       	std	Y+23, r26	; 0x17
    292a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292c:	6d 89       	ldd	r22, Y+21	; 0x15
    292e:	7e 89       	ldd	r23, Y+22	; 0x16
    2930:	8f 89       	ldd	r24, Y+23	; 0x17
    2932:	98 8d       	ldd	r25, Y+24	; 0x18
    2934:	2b ea       	ldi	r18, 0xAB	; 171
    2936:	3a ea       	ldi	r19, 0xAA	; 170
    2938:	4a e2       	ldi	r20, 0x2A	; 42
    293a:	50 e4       	ldi	r21, 0x40	; 64
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	9a 8b       	std	Y+18, r25	; 0x12
    2948:	ab 8b       	std	Y+19, r26	; 0x13
    294a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    294c:	69 89       	ldd	r22, Y+17	; 0x11
    294e:	7a 89       	ldd	r23, Y+18	; 0x12
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	9c 89       	ldd	r25, Y+20	; 0x14
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	1c f4       	brge	.+6      	; 0x296a <LCD_vidInitialize+0x554>
		__ticks = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	88 8b       	std	Y+16, r24	; 0x10
    2968:	91 c0       	rjmp	.+290    	; 0x2a8c <LCD_vidInitialize+0x676>
	else if (__tmp > 255)
    296a:	69 89       	ldd	r22, Y+17	; 0x11
    296c:	7a 89       	ldd	r23, Y+18	; 0x12
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	53 e4       	ldi	r21, 0x43	; 67
    297a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <LCD_vidInitialize+0x56e>
    2982:	7b c0       	rjmp	.+246    	; 0x2a7a <LCD_vidInitialize+0x664>
	{
		_delay_ms(__us / 1000.0);
    2984:	6d 89       	ldd	r22, Y+21	; 0x15
    2986:	7e 89       	ldd	r23, Y+22	; 0x16
    2988:	8f 89       	ldd	r24, Y+23	; 0x17
    298a:	98 8d       	ldd	r25, Y+24	; 0x18
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a e7       	ldi	r20, 0x7A	; 122
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8c 87       	std	Y+12, r24	; 0x0c
    299e:	9d 87       	std	Y+13, r25	; 0x0d
    29a0:	ae 87       	std	Y+14, r26	; 0x0e
    29a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    29a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    29a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    29aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	88 87       	std	Y+8, r24	; 0x08
    29be:	99 87       	std	Y+9, r25	; 0x09
    29c0:	aa 87       	std	Y+10, r26	; 0x0a
    29c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29c4:	68 85       	ldd	r22, Y+8	; 0x08
    29c6:	79 85       	ldd	r23, Y+9	; 0x09
    29c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <LCD_vidInitialize+0x5d0>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9f 83       	std	Y+7, r25	; 0x07
    29e2:	8e 83       	std	Y+6, r24	; 0x06
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <LCD_vidInitialize+0x64e>
	else if (__tmp > 65535)
    29e6:	68 85       	ldd	r22, Y+8	; 0x08
    29e8:	79 85       	ldd	r23, Y+9	; 0x09
    29ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <LCD_vidInitialize+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a00:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9f 83       	std	Y+7, r25	; 0x07
    2a24:	8e 83       	std	Y+6, r24	; 0x06
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <LCD_vidInitialize+0x630>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9d 83       	std	Y+5, r25	; 0x05
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	9d 81       	ldd	r25, Y+5	; 0x05
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_vidInitialize+0x61e>
    2a38:	9d 83       	std	Y+5, r25	; 0x05
    2a3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9f 83       	std	Y+7, r25	; 0x07
    2a44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8e 81       	ldd	r24, Y+6	; 0x06
    2a48:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <LCD_vidInitialize+0x612>
    2a4e:	24 c0       	rjmp	.+72     	; 0x2a98 <LCD_vidInitialize+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	68 85       	ldd	r22, Y+8	; 0x08
    2a52:	79 85       	ldd	r23, Y+9	; 0x09
    2a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9f 83       	std	Y+7, r25	; 0x07
    2a62:	8e 83       	std	Y+6, r24	; 0x06
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	9f 81       	ldd	r25, Y+7	; 0x07
    2a68:	9b 83       	std	Y+3, r25	; 0x03
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_vidInitialize+0x65a>
    2a74:	9b 83       	std	Y+3, r25	; 0x03
    2a76:	8a 83       	std	Y+2, r24	; 0x02
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_vidInitialize+0x682>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7a:	69 89       	ldd	r22, Y+17	; 0x11
    2a7c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	88 8b       	std	Y+16, r24	; 0x10
    2a8c:	88 89       	ldd	r24, Y+16	; 0x10
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	8a 95       	dec	r24
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_vidInitialize+0x67c>
    2a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(11);
}
    2a98:	ca 5a       	subi	r28, 0xAA	; 170
    2a9a:	df 4f       	sbci	r29, 0xFF	; 255
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	08 95       	ret

00002ab0 <LCD_vidInstruction>:


// Send instruction to execute
void LCD_vidInstruction(u8 command, u8 RW_value, u8 RS_value)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	e3 97       	sbiw	r28, 0x33	; 51
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	89 ab       	std	Y+49, r24	; 0x31
    2ac6:	6a ab       	std	Y+50, r22	; 0x32
    2ac8:	4b ab       	std	Y+51, r20	; 0x33
	// INDICATE WHICH REGISTER
	if(RS_value == IR)
    2aca:	8b a9       	ldd	r24, Y+51	; 0x33
    2acc:	88 23       	and	r24, r24
    2ace:	31 f4       	brne	.+12     	; 0x2adc <LCD_vidInstruction+0x2c>
	{
		// RS = 0, indication for Instruction Register
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 0);
    2ad0:	83 e0       	ldi	r24, 0x03	; 3
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
    2ada:	05 c0       	rjmp	.+10     	; 0x2ae6 <LCD_vidInstruction+0x36>
	}
	else
	{
		// RS = 1, indication for DATA Register
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 1);
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	}

	// INDICATE R/W OPERATION
	if(RW_value == write_operation)
    2ae6:	8a a9       	ldd	r24, Y+50	; 0x32
    2ae8:	88 23       	and	r24, r24
    2aea:	51 f4       	brne	.+20     	; 0x2b00 <LCD_vidInstruction+0x50>
	{
		// R/W = 0, write indication
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 0);
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	61 e0       	ldi	r22, 0x01	; 1
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
		DIO_vidSetPortValue(LCD_PORT_DATA, command);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	69 a9       	ldd	r22, Y+49	; 0x31
    2afa:	0e 94 ac 06 	call	0xd58	; 0xd58 <DIO_vidSetPortValue>
    2afe:	09 c0       	rjmp	.+18     	; 0x2b12 <LCD_vidInstruction+0x62>
	}
	else
	{
		// R/W = 1, read indication
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 1);
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
		// Change Direction of PORT to input
		DIO_vidSetPortxDir(LCD_PORT_DATA, 0);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>
	}

	// E = 1, H-to-L pulse
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, E_PIN, 1);
    2b12:	83 e0       	ldi	r24, 0x03	; 3
    2b14:	62 e0       	ldi	r22, 0x02	; 2
    2b16:	41 e0       	ldi	r20, 0x01	; 1
    2b18:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e2       	ldi	r26, 0x20	; 32
    2b22:	b1 e4       	ldi	r27, 0x41	; 65
    2b24:	8d a7       	std	Y+45, r24	; 0x2d
    2b26:	9e a7       	std	Y+46, r25	; 0x2e
    2b28:	af a7       	std	Y+47, r26	; 0x2f
    2b2a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b2c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b2e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b32:	98 a9       	ldd	r25, Y+48	; 0x30
    2b34:	2b ea       	ldi	r18, 0xAB	; 171
    2b36:	3a ea       	ldi	r19, 0xAA	; 170
    2b38:	4a e2       	ldi	r20, 0x2A	; 42
    2b3a:	50 e4       	ldi	r21, 0x40	; 64
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	89 a7       	std	Y+41, r24	; 0x29
    2b46:	9a a7       	std	Y+42, r25	; 0x2a
    2b48:	ab a7       	std	Y+43, r26	; 0x2b
    2b4a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b4c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	1c f4       	brge	.+6      	; 0x2b6a <LCD_vidInstruction+0xba>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	88 a7       	std	Y+40, r24	; 0x28
    2b68:	91 c0       	rjmp	.+290    	; 0x2c8c <LCD_vidInstruction+0x1dc>
	else if (__tmp > 255)
    2b6a:	69 a5       	ldd	r22, Y+41	; 0x29
    2b6c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b70:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	53 e4       	ldi	r21, 0x43	; 67
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <LCD_vidInstruction+0xd4>
    2b82:	7b c0       	rjmp	.+246    	; 0x2c7a <LCD_vidInstruction+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    2b84:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b86:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a e7       	ldi	r20, 0x7A	; 122
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8c a3       	std	Y+36, r24	; 0x24
    2b9e:	9d a3       	std	Y+37, r25	; 0x25
    2ba0:	ae a3       	std	Y+38, r26	; 0x26
    2ba2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	6c a1       	ldd	r22, Y+36	; 0x24
    2ba6:	7d a1       	ldd	r23, Y+37	; 0x25
    2ba8:	8e a1       	ldd	r24, Y+38	; 0x26
    2baa:	9f a1       	ldd	r25, Y+39	; 0x27
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a ef       	ldi	r20, 0xFA	; 250
    2bb2:	54 e4       	ldi	r21, 0x44	; 68
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	88 a3       	std	Y+32, r24	; 0x20
    2bbe:	99 a3       	std	Y+33, r25	; 0x21
    2bc0:	aa a3       	std	Y+34, r26	; 0x22
    2bc2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2bc4:	68 a1       	ldd	r22, Y+32	; 0x20
    2bc6:	79 a1       	ldd	r23, Y+33	; 0x21
    2bc8:	8a a1       	ldd	r24, Y+34	; 0x22
    2bca:	9b a1       	ldd	r25, Y+35	; 0x23
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <LCD_vidInstruction+0x136>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9f 8f       	std	Y+31, r25	; 0x1f
    2be2:	8e 8f       	std	Y+30, r24	; 0x1e
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <LCD_vidInstruction+0x1b4>
	else if (__tmp > 65535)
    2be6:	68 a1       	ldd	r22, Y+32	; 0x20
    2be8:	79 a1       	ldd	r23, Y+33	; 0x21
    2bea:	8a a1       	ldd	r24, Y+34	; 0x22
    2bec:	9b a1       	ldd	r25, Y+35	; 0x23
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <LCD_vidInstruction+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	6c a1       	ldd	r22, Y+36	; 0x24
    2c00:	7d a1       	ldd	r23, Y+37	; 0x25
    2c02:	8e a1       	ldd	r24, Y+38	; 0x26
    2c04:	9f a1       	ldd	r25, Y+39	; 0x27
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9f 8f       	std	Y+31, r25	; 0x1f
    2c24:	8e 8f       	std	Y+30, r24	; 0x1e
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <LCD_vidInstruction+0x196>
    2c28:	88 ec       	ldi	r24, 0xC8	; 200
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9d 8f       	std	Y+29, r25	; 0x1d
    2c2e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_vidInstruction+0x184>
    2c38:	9d 8f       	std	Y+29, r25	; 0x1d
    2c3a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	9f 8f       	std	Y+31, r25	; 0x1f
    2c44:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <LCD_vidInstruction+0x178>
    2c4e:	24 c0       	rjmp	.+72     	; 0x2c98 <LCD_vidInstruction+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	68 a1       	ldd	r22, Y+32	; 0x20
    2c52:	79 a1       	ldd	r23, Y+33	; 0x21
    2c54:	8a a1       	ldd	r24, Y+34	; 0x22
    2c56:	9b a1       	ldd	r25, Y+35	; 0x23
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9f 8f       	std	Y+31, r25	; 0x1f
    2c62:	8e 8f       	std	Y+30, r24	; 0x1e
    2c64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c68:	9b 8f       	std	Y+27, r25	; 0x1b
    2c6a:	8a 8f       	std	Y+26, r24	; 0x1a
    2c6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_vidInstruction+0x1c0>
    2c74:	9b 8f       	std	Y+27, r25	; 0x1b
    2c76:	8a 8f       	std	Y+26, r24	; 0x1a
    2c78:	0f c0       	rjmp	.+30     	; 0x2c98 <LCD_vidInstruction+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c7a:	69 a5       	ldd	r22, Y+41	; 0x29
    2c7c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c80:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	88 a7       	std	Y+40, r24	; 0x28
    2c8c:	88 a5       	ldd	r24, Y+40	; 0x28
    2c8e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c90:	89 8d       	ldd	r24, Y+25	; 0x19
    2c92:	8a 95       	dec	r24
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LCD_vidInstruction+0x1e2>
    2c96:	89 8f       	std	Y+25, r24	; 0x19

	// Wait to make enable wide
	_delay_us(10);

	// READ/WRITE VALUES FROM/TO LCD
	if(RW_value == write_operation)
    2c98:	8a a9       	ldd	r24, Y+50	; 0x32
    2c9a:	88 23       	and	r24, r24
    2c9c:	29 f0       	breq	.+10     	; 0x2ca8 <LCD_vidInstruction+0x1f8>

	}
	else
	{
		// Store the whole PIN_REG value
		DATA = DIO_GetPinValue(LCD_PORT_DATA);
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    2ca4:	80 93 af 03 	sts	0x03AF, r24
	}

	// EN = 0
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, E_PIN, 0);
    2ca8:	83 e0       	ldi	r24, 0x03	; 3
    2caa:	62 e0       	ldi	r22, 0x02	; 2
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a0 e2       	ldi	r26, 0x20	; 32
    2cb8:	b1 e4       	ldi	r27, 0x41	; 65
    2cba:	8d 8b       	std	Y+21, r24	; 0x15
    2cbc:	9e 8b       	std	Y+22, r25	; 0x16
    2cbe:	af 8b       	std	Y+23, r26	; 0x17
    2cc0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cca:	2b ea       	ldi	r18, 0xAB	; 171
    2ccc:	3a ea       	ldi	r19, 0xAA	; 170
    2cce:	4a e2       	ldi	r20, 0x2A	; 42
    2cd0:	50 e4       	ldi	r21, 0x40	; 64
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	89 8b       	std	Y+17, r24	; 0x11
    2cdc:	9a 8b       	std	Y+18, r25	; 0x12
    2cde:	ab 8b       	std	Y+19, r26	; 0x13
    2ce0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ce2:	69 89       	ldd	r22, Y+17	; 0x11
    2ce4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	1c f4       	brge	.+6      	; 0x2d00 <LCD_vidInstruction+0x250>
		__ticks = 1;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	88 8b       	std	Y+16, r24	; 0x10
    2cfe:	91 c0       	rjmp	.+290    	; 0x2e22 <LCD_vidInstruction+0x372>
	else if (__tmp > 255)
    2d00:	69 89       	ldd	r22, Y+17	; 0x11
    2d02:	7a 89       	ldd	r23, Y+18	; 0x12
    2d04:	8b 89       	ldd	r24, Y+19	; 0x13
    2d06:	9c 89       	ldd	r25, Y+20	; 0x14
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4f e7       	ldi	r20, 0x7F	; 127
    2d0e:	53 e4       	ldi	r21, 0x43	; 67
    2d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d14:	18 16       	cp	r1, r24
    2d16:	0c f0       	brlt	.+2      	; 0x2d1a <LCD_vidInstruction+0x26a>
    2d18:	7b c0       	rjmp	.+246    	; 0x2e10 <LCD_vidInstruction+0x360>
	{
		_delay_ms(__us / 1000.0);
    2d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	98 8d       	ldd	r25, Y+24	; 0x18
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a e7       	ldi	r20, 0x7A	; 122
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8c 87       	std	Y+12, r24	; 0x0c
    2d34:	9d 87       	std	Y+13, r25	; 0x0d
    2d36:	ae 87       	std	Y+14, r26	; 0x0e
    2d38:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d40:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	4a ef       	ldi	r20, 0xFA	; 250
    2d48:	54 e4       	ldi	r21, 0x44	; 68
    2d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	88 87       	std	Y+8, r24	; 0x08
    2d54:	99 87       	std	Y+9, r25	; 0x09
    2d56:	aa 87       	std	Y+10, r26	; 0x0a
    2d58:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d5a:	68 85       	ldd	r22, Y+8	; 0x08
    2d5c:	79 85       	ldd	r23, Y+9	; 0x09
    2d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e8       	ldi	r20, 0x80	; 128
    2d68:	5f e3       	ldi	r21, 0x3F	; 63
    2d6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6e:	88 23       	and	r24, r24
    2d70:	2c f4       	brge	.+10     	; 0x2d7c <LCD_vidInstruction+0x2cc>
		__ticks = 1;
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9f 83       	std	Y+7, r25	; 0x07
    2d78:	8e 83       	std	Y+6, r24	; 0x06
    2d7a:	3f c0       	rjmp	.+126    	; 0x2dfa <LCD_vidInstruction+0x34a>
	else if (__tmp > 65535)
    2d7c:	68 85       	ldd	r22, Y+8	; 0x08
    2d7e:	79 85       	ldd	r23, Y+9	; 0x09
    2d80:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d82:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	3f ef       	ldi	r19, 0xFF	; 255
    2d88:	4f e7       	ldi	r20, 0x7F	; 127
    2d8a:	57 e4       	ldi	r21, 0x47	; 71
    2d8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d90:	18 16       	cp	r1, r24
    2d92:	4c f5       	brge	.+82     	; 0x2de6 <LCD_vidInstruction+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d94:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d96:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d98:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e2       	ldi	r20, 0x20	; 32
    2da2:	51 e4       	ldi	r21, 0x41	; 65
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9f 83       	std	Y+7, r25	; 0x07
    2dba:	8e 83       	std	Y+6, r24	; 0x06
    2dbc:	0f c0       	rjmp	.+30     	; 0x2ddc <LCD_vidInstruction+0x32c>
    2dbe:	88 ec       	ldi	r24, 0xC8	; 200
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9d 83       	std	Y+5, r25	; 0x05
    2dc4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <LCD_vidInstruction+0x31a>
    2dce:	9d 83       	std	Y+5, r25	; 0x05
    2dd0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	9f 83       	std	Y+7, r25	; 0x07
    2dda:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dde:	9f 81       	ldd	r25, Y+7	; 0x07
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	69 f7       	brne	.-38     	; 0x2dbe <LCD_vidInstruction+0x30e>
    2de4:	24 c0       	rjmp	.+72     	; 0x2e2e <LCD_vidInstruction+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de6:	68 85       	ldd	r22, Y+8	; 0x08
    2de8:	79 85       	ldd	r23, Y+9	; 0x09
    2dea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9f 83       	std	Y+7, r25	; 0x07
    2df8:	8e 83       	std	Y+6, r24	; 0x06
    2dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dfe:	9b 83       	std	Y+3, r25	; 0x03
    2e00:	8a 83       	std	Y+2, r24	; 0x02
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_vidInstruction+0x356>
    2e0a:	9b 83       	std	Y+3, r25	; 0x03
    2e0c:	8a 83       	std	Y+2, r24	; 0x02
    2e0e:	0f c0       	rjmp	.+30     	; 0x2e2e <LCD_vidInstruction+0x37e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e10:	69 89       	ldd	r22, Y+17	; 0x11
    2e12:	7a 89       	ldd	r23, Y+18	; 0x12
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	88 8b       	std	Y+16, r24	; 0x10
    2e22:	88 89       	ldd	r24, Y+16	; 0x10
    2e24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	8a 95       	dec	r24
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_vidInstruction+0x378>
    2e2c:	89 83       	std	Y+1, r24	; 0x01
	// Wait to make enable wide
	_delay_us(10);

	// FORCE Direction of PORT to OUTPUT

	DIO_vidSetPortxDir(LCD_PORT_DATA, 1);
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	61 e0       	ldi	r22, 0x01	; 1
    2e32:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>
}
    2e36:	e3 96       	adiw	r28, 0x33	; 51
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LCD_vidData>:

// Send Data to display
void LCD_vidData(s16 data)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <LCD_vidData+0x6>
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidInstruction(data, write_operation, DR);
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <LCD_String>:

// Display string from user
char LCD_String(char *ch)
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <LCD_String+0x6>
    2e70:	0f 92       	push	r0
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	9b 83       	std	Y+3, r25	; 0x03
    2e78:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;

	// Iterate over string characters
	for(i = 0; ch[i] != '\0'; i++)
    2e7a:	19 82       	std	Y+1, r1	; 0x01
    2e7c:	10 c0       	rjmp	.+32     	; 0x2e9e <LCD_String+0x34>
	{
		LCD_vidData(ch[i]);
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	9b 81       	ldd	r25, Y+3	; 0x03
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e2 0f       	add	r30, r18
    2e8c:	f3 1f       	adc	r31, r19
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 2f       	mov	r24, r24
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_vidData>
char LCD_String(char *ch)
{
	u8 i;

	// Iterate over string characters
	for(i = 0; ch[i] != '\0'; i++)
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	8f 5f       	subi	r24, 0xFF	; 255
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	e2 0f       	add	r30, r18
    2eac:	f3 1f       	adc	r31, r19
    2eae:	80 81       	ld	r24, Z
    2eb0:	88 23       	and	r24, r24
    2eb2:	29 f7       	brne	.-54     	; 0x2e7e <LCD_String+0x14>
	{
		LCD_vidData(ch[i]);
	}

	// Return length of string
	return i;
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <LCD_vidGoTo>:


// Define a location to write to
void LCD_vidGoTo(u8 x, u8 y)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	6d 97       	sbiw	r28, 0x1d	; 29
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	8c 8f       	std	Y+28, r24	; 0x1c
    2ed8:	6d 8f       	std	Y+29, r22	; 0x1d
	// Array with 2 possible lines
	u8 location[] = {0x00, 0x40};
    2eda:	1a 8e       	std	Y+26, r1	; 0x1a
    2edc:	80 e4       	ldi	r24, 0x40	; 64
    2ede:	8b 8f       	std	Y+27, r24	; 0x1b

	// Configuring the instruction for the location acquired
	u8 address = location[y-1] + x - 1;
    2ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee2:	88 2f       	mov	r24, r24
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	21 50       	subi	r18, 0x01	; 1
    2eea:	30 40       	sbci	r19, 0x00	; 0
    2eec:	ce 01       	movw	r24, r28
    2eee:	4a 96       	adiw	r24, 0x1a	; 26
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	e2 0f       	add	r30, r18
    2ef4:	f3 1f       	adc	r31, r19
    2ef6:	90 81       	ld	r25, Z
    2ef8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2efa:	89 0f       	add	r24, r25
    2efc:	81 50       	subi	r24, 0x01	; 1
    2efe:	89 8f       	std	Y+25, r24	; 0x19

	// Just complete the instruction from data_sheet
	address = address + (1<<7);
    2f00:	89 8d       	ldd	r24, Y+25	; 0x19
    2f02:	80 58       	subi	r24, 0x80	; 128
    2f04:	89 8f       	std	Y+25, r24	; 0x19

	// Execute instruction
	LCD_vidInstruction(address, write_operation, IR);
    2f06:	89 8d       	ldd	r24, Y+25	; 0x19
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 ea       	ldi	r26, 0xA0	; 160
    2f16:	b1 e4       	ldi	r27, 0x41	; 65
    2f18:	8d 8b       	std	Y+21, r24	; 0x15
    2f1a:	9e 8b       	std	Y+22, r25	; 0x16
    2f1c:	af 8b       	std	Y+23, r26	; 0x17
    2f1e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f20:	6d 89       	ldd	r22, Y+21	; 0x15
    2f22:	7e 89       	ldd	r23, Y+22	; 0x16
    2f24:	8f 89       	ldd	r24, Y+23	; 0x17
    2f26:	98 8d       	ldd	r25, Y+24	; 0x18
    2f28:	2b ea       	ldi	r18, 0xAB	; 171
    2f2a:	3a ea       	ldi	r19, 0xAA	; 170
    2f2c:	4a e2       	ldi	r20, 0x2A	; 42
    2f2e:	50 e4       	ldi	r21, 0x40	; 64
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	89 8b       	std	Y+17, r24	; 0x11
    2f3a:	9a 8b       	std	Y+18, r25	; 0x12
    2f3c:	ab 8b       	std	Y+19, r26	; 0x13
    2f3e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f40:	69 89       	ldd	r22, Y+17	; 0x11
    2f42:	7a 89       	ldd	r23, Y+18	; 0x12
    2f44:	8b 89       	ldd	r24, Y+19	; 0x13
    2f46:	9c 89       	ldd	r25, Y+20	; 0x14
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	1c f4       	brge	.+6      	; 0x2f5e <LCD_vidGoTo+0x9c>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	88 8b       	std	Y+16, r24	; 0x10
    2f5c:	91 c0       	rjmp	.+290    	; 0x3080 <LCD_vidGoTo+0x1be>
	else if (__tmp > 255)
    2f5e:	69 89       	ldd	r22, Y+17	; 0x11
    2f60:	7a 89       	ldd	r23, Y+18	; 0x12
    2f62:	8b 89       	ldd	r24, Y+19	; 0x13
    2f64:	9c 89       	ldd	r25, Y+20	; 0x14
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4f e7       	ldi	r20, 0x7F	; 127
    2f6c:	53 e4       	ldi	r21, 0x43	; 67
    2f6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f72:	18 16       	cp	r1, r24
    2f74:	0c f0       	brlt	.+2      	; 0x2f78 <LCD_vidGoTo+0xb6>
    2f76:	7b c0       	rjmp	.+246    	; 0x306e <LCD_vidGoTo+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    2f78:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a e7       	ldi	r20, 0x7A	; 122
    2f86:	54 e4       	ldi	r21, 0x44	; 68
    2f88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8c 87       	std	Y+12, r24	; 0x0c
    2f92:	9d 87       	std	Y+13, r25	; 0x0d
    2f94:	ae 87       	std	Y+14, r26	; 0x0e
    2f96:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a ef       	ldi	r20, 0xFA	; 250
    2fa6:	54 e4       	ldi	r21, 0x44	; 68
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	88 87       	std	Y+8, r24	; 0x08
    2fb2:	99 87       	std	Y+9, r25	; 0x09
    2fb4:	aa 87       	std	Y+10, r26	; 0x0a
    2fb6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fb8:	68 85       	ldd	r22, Y+8	; 0x08
    2fba:	79 85       	ldd	r23, Y+9	; 0x09
    2fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <LCD_vidGoTo+0x118>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9f 83       	std	Y+7, r25	; 0x07
    2fd6:	8e 83       	std	Y+6, r24	; 0x06
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <LCD_vidGoTo+0x196>
	else if (__tmp > 65535)
    2fda:	68 85       	ldd	r22, Y+8	; 0x08
    2fdc:	79 85       	ldd	r23, Y+9	; 0x09
    2fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <LCD_vidGoTo+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ff4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ff8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9f 83       	std	Y+7, r25	; 0x07
    3018:	8e 83       	std	Y+6, r24	; 0x06
    301a:	0f c0       	rjmp	.+30     	; 0x303a <LCD_vidGoTo+0x178>
    301c:	88 ec       	ldi	r24, 0xC8	; 200
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9d 83       	std	Y+5, r25	; 0x05
    3022:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3024:	8c 81       	ldd	r24, Y+4	; 0x04
    3026:	9d 81       	ldd	r25, Y+5	; 0x05
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <LCD_vidGoTo+0x166>
    302c:	9d 83       	std	Y+5, r25	; 0x05
    302e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8e 81       	ldd	r24, Y+6	; 0x06
    3032:	9f 81       	ldd	r25, Y+7	; 0x07
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9f 83       	std	Y+7, r25	; 0x07
    3038:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8e 81       	ldd	r24, Y+6	; 0x06
    303c:	9f 81       	ldd	r25, Y+7	; 0x07
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <LCD_vidGoTo+0x15a>
    3042:	24 c0       	rjmp	.+72     	; 0x308c <LCD_vidGoTo+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	68 85       	ldd	r22, Y+8	; 0x08
    3046:	79 85       	ldd	r23, Y+9	; 0x09
    3048:	8a 85       	ldd	r24, Y+10	; 0x0a
    304a:	9b 85       	ldd	r25, Y+11	; 0x0b
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9f 83       	std	Y+7, r25	; 0x07
    3056:	8e 83       	std	Y+6, r24	; 0x06
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	9f 81       	ldd	r25, Y+7	; 0x07
    305c:	9b 83       	std	Y+3, r25	; 0x03
    305e:	8a 83       	std	Y+2, r24	; 0x02
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <LCD_vidGoTo+0x1a2>
    3068:	9b 83       	std	Y+3, r25	; 0x03
    306a:	8a 83       	std	Y+2, r24	; 0x02
    306c:	0f c0       	rjmp	.+30     	; 0x308c <LCD_vidGoTo+0x1ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    306e:	69 89       	ldd	r22, Y+17	; 0x11
    3070:	7a 89       	ldd	r23, Y+18	; 0x12
    3072:	8b 89       	ldd	r24, Y+19	; 0x13
    3074:	9c 89       	ldd	r25, Y+20	; 0x14
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	88 8b       	std	Y+16, r24	; 0x10
    3080:	88 89       	ldd	r24, Y+16	; 0x10
    3082:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	8a 95       	dec	r24
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_vidGoTo+0x1c4>
    308a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20);
}
    308c:	6d 96       	adiw	r28, 0x1d	; 29
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <LCD_u8CurrentLocation_AC>:


u8 LCD_u8CurrentLocation_AC(void)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	0f 92       	push	r0
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
	u8 final_location = 0;
    30a8:	19 82       	std	Y+1, r1	; 0x01

	// READ_FROM IR and assign to GLOBAL VAR. DATA
	LCD_vidInstruction(0, read_operation, IR);
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>

	// to lose the value of BF and get only AC value
	final_location = DATA & 0x7f;
    30b4:	80 91 af 03 	lds	r24, 0x03AF
    30b8:	8f 77       	andi	r24, 0x7F	; 127
    30ba:	89 83       	std	Y+1, r24	; 0x01

	return final_location;
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30be:	0f 90       	pop	r0
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <LCD_vidClearOnDemand>:


// Clear display via start and end locations specified by the user
void LCD_vidClearOnDemand(u8 start, u8 end)
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <LCD_vidClearOnDemand+0x6>
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	6a 83       	std	Y+2, r22	; 0x02

	// Start where the user has provided
	LCD_vidGoTo(start, 1);
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	61 e0       	ldi	r22, 0x01	; 1
    30d8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
    30dc:	14 c0       	rjmp	.+40     	; 0x3106 <LCD_vidClearOnDemand+0x40>

	// Move with addresses to clear the display pixel by pixel
	for(start; start <= end; start ++)
	{
		// Indication for second line in LCD
		if(start > 16)
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	81 31       	cpi	r24, 0x11	; 17
    30e2:	48 f0       	brcs	.+18     	; 0x30f6 <LCD_vidClearOnDemand+0x30>
		{
			start = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidGoTo(start, 2);
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	62 e0       	ldi	r22, 0x02	; 2
    30ec:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			end -= 16;
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	80 51       	subi	r24, 0x10	; 16
    30f4:	8a 83       	std	Y+2, r24	; 0x02
		}
		LCD_vidInstruction(0x20, write_operation, DR);
    30f6:	80 e2       	ldi	r24, 0x20	; 32
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_vidInstruction>

	// Start where the user has provided
	LCD_vidGoTo(start, 1);

	// Move with addresses to clear the display pixel by pixel
	for(start; start <= end; start ++)
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	99 81       	ldd	r25, Y+1	; 0x01
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	89 17       	cp	r24, r25
    310c:	40 f7       	brcc	.-48     	; 0x30de <LCD_vidClearOnDemand+0x18>
			end -= 16;
		}
		LCD_vidInstruction(0x20, write_operation, DR);
	}

	LCD_vidGoTo(1, 1);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>

}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <BOOKS_vidInitialize>:


/********************************* READY *********************************/
// Initialize books list
void BOOKS_vidInitialize(void)
{
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
	root_book = malloc(sizeof(books));
    3128:	88 e0       	ldi	r24, 0x08	; 8
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    3130:	90 93 b7 03 	sts	0x03B7, r25
    3134:	80 93 b6 03 	sts	0x03B6, r24
	
	// Initializing list
	root_book -> NAME_BOOK = NULL;
    3138:	e0 91 b6 03 	lds	r30, 0x03B6
    313c:	f0 91 b7 03 	lds	r31, 0x03B7
    3140:	11 82       	std	Z+1, r1	; 0x01
    3142:	10 82       	st	Z, r1
	root_book -> NEXT_BOOK = NULL;
    3144:	e0 91 b6 03 	lds	r30, 0x03B6
    3148:	f0 91 b7 03 	lds	r31, 0x03B7
    314c:	17 82       	std	Z+7, r1	; 0x07
    314e:	16 82       	std	Z+6, r1	; 0x06
	root_book -> INDEX_BOOK = 0;
    3150:	e0 91 b6 03 	lds	r30, 0x03B6
    3154:	f0 91 b7 03 	lds	r31, 0x03B7
    3158:	12 82       	std	Z+2, r1	; 0x02
	root_book -> SERIAL_NUMBER = NULL;
    315a:	e0 91 b6 03 	lds	r30, 0x03B6
    315e:	f0 91 b7 03 	lds	r31, 0x03B7
    3162:	14 82       	std	Z+4, r1	; 0x04
    3164:	13 82       	std	Z+3, r1	; 0x03
	root_book -> COPIES = 0;
    3166:	e0 91 b6 03 	lds	r30, 0x03B6
    316a:	f0 91 b7 03 	lds	r31, 0x03B7
    316e:	15 82       	std	Z+5, r1	; 0x05
	
	ptr_book = root_book;
    3170:	80 91 b6 03 	lds	r24, 0x03B6
    3174:	90 91 b7 03 	lds	r25, 0x03B7
    3178:	90 93 b9 03 	sts	0x03B9, r25
    317c:	80 93 b8 03 	sts	0x03B8, r24
}
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <BOOKS_vidInsertion>:


/********************************* READY *********************************/
// Insertion for values from user
bool BOOKS_vidInsertion(char *serial, char *name, char copies)			// if still, you can change to u8
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	6b 97       	sbiw	r28, 0x1b	; 27
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	98 8f       	std	Y+24, r25	; 0x18
    319c:	8f 8b       	std	Y+23, r24	; 0x17
    319e:	7a 8f       	std	Y+26, r23	; 0x1a
    31a0:	69 8f       	std	Y+25, r22	; 0x19
    31a2:	4b 8f       	std	Y+27, r20	; 0x1b
	
	int k = 0, i = 0, j = 0;
    31a4:	1e 8a       	std	Y+22, r1	; 0x16
    31a6:	1d 8a       	std	Y+21, r1	; 0x15
    31a8:	1c 8a       	std	Y+20, r1	; 0x14
    31aa:	1b 8a       	std	Y+19, r1	; 0x13
    31ac:	1a 8a       	std	Y+18, r1	; 0x12
    31ae:	19 8a       	std	Y+17, r1	; 0x11
	
	// Inserting sequence initialized
	ptr_book = root_book;
    31b0:	80 91 b6 03 	lds	r24, 0x03B6
    31b4:	90 91 b7 03 	lds	r25, 0x03B7
    31b8:	90 93 b9 03 	sts	0x03B9, r25
    31bc:	80 93 b8 03 	sts	0x03B8, r24
	books *tmp = malloc(sizeof(books));
    31c0:	88 e0       	ldi	r24, 0x08	; 8
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    31c8:	98 8b       	std	Y+16, r25	; 0x10
    31ca:	8f 87       	std	Y+15, r24	; 0x0f
	
	// For future reference
	NoOfBooks++;
    31cc:	80 91 b0 03 	lds	r24, 0x03B0
    31d0:	8f 5f       	subi	r24, 0xFF	; 255
    31d2:	80 93 b0 03 	sts	0x03B0, r24
	INDEX_BOOKS_GLOBAL++;
    31d6:	80 91 b2 03 	lds	r24, 0x03B2
    31da:	8f 5f       	subi	r24, 0xFF	; 255
    31dc:	80 93 b2 03 	sts	0x03B2, r24
    31e0:	05 c0       	rjmp	.+10     	; 0x31ec <BOOKS_vidInsertion+0x66>

	// Get member's name length
	while(name[k] != '\0')
	{
		k++;
    31e2:	8d 89       	ldd	r24, Y+21	; 0x15
    31e4:	9e 89       	ldd	r25, Y+22	; 0x16
    31e6:	01 96       	adiw	r24, 0x01	; 1
    31e8:	9e 8b       	std	Y+22, r25	; 0x16
    31ea:	8d 8b       	std	Y+21, r24	; 0x15
	// For future reference
	NoOfBooks++;
	INDEX_BOOKS_GLOBAL++;

	// Get member's name length
	while(name[k] != '\0')
    31ec:	2d 89       	ldd	r18, Y+21	; 0x15
    31ee:	3e 89       	ldd	r19, Y+22	; 0x16
    31f0:	89 8d       	ldd	r24, Y+25	; 0x19
    31f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	80 81       	ld	r24, Z
    31fc:	88 23       	and	r24, r24
    31fe:	89 f7       	brne	.-30     	; 0x31e2 <BOOKS_vidInsertion+0x5c>
    3200:	05 c0       	rjmp	.+10     	; 0x320c <BOOKS_vidInsertion+0x86>
		k++;
	}
	
	while(serial[i] != '\0')
	{
		i++;
    3202:	8b 89       	ldd	r24, Y+19	; 0x13
    3204:	9c 89       	ldd	r25, Y+20	; 0x14
    3206:	01 96       	adiw	r24, 0x01	; 1
    3208:	9c 8b       	std	Y+20, r25	; 0x14
    320a:	8b 8b       	std	Y+19, r24	; 0x13
	while(name[k] != '\0')
	{
		k++;
	}
	
	while(serial[i] != '\0')
    320c:	2b 89       	ldd	r18, Y+19	; 0x13
    320e:	3c 89       	ldd	r19, Y+20	; 0x14
    3210:	8f 89       	ldd	r24, Y+23	; 0x17
    3212:	98 8d       	ldd	r25, Y+24	; 0x18
    3214:	fc 01       	movw	r30, r24
    3216:	e2 0f       	add	r30, r18
    3218:	f3 1f       	adc	r31, r19
    321a:	80 81       	ld	r24, Z
    321c:	88 23       	and	r24, r24
    321e:	89 f7       	brne	.-30     	; 0x3202 <BOOKS_vidInsertion+0x7c>
	{
		i++;
	}

	tmp -> NAME_BOOK = malloc(k+1 *sizeof(char));
    3220:	8d 89       	ldd	r24, Y+21	; 0x15
    3222:	9e 89       	ldd	r25, Y+22	; 0x16
    3224:	01 96       	adiw	r24, 0x01	; 1
    3226:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    322a:	ef 85       	ldd	r30, Y+15	; 0x0f
    322c:	f8 89       	ldd	r31, Y+16	; 0x10
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	80 83       	st	Z, r24
	tmp -> SERIAL_NUMBER = malloc(i+1 *sizeof(char));
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    323c:	ef 85       	ldd	r30, Y+15	; 0x0f
    323e:	f8 89       	ldd	r31, Y+16	; 0x10
    3240:	94 83       	std	Z+4, r25	; 0x04
    3242:	83 83       	std	Z+3, r24	; 0x03

	// Insert patient details
	tmp -> NEXT_BOOK = ptr_book -> NEXT_BOOK;
    3244:	e0 91 b8 03 	lds	r30, 0x03B8
    3248:	f0 91 b9 03 	lds	r31, 0x03B9
    324c:	86 81       	ldd	r24, Z+6	; 0x06
    324e:	97 81       	ldd	r25, Z+7	; 0x07
    3250:	ef 85       	ldd	r30, Y+15	; 0x0f
    3252:	f8 89       	ldd	r31, Y+16	; 0x10
    3254:	97 83       	std	Z+7, r25	; 0x07
    3256:	86 83       	std	Z+6, r24	; 0x06

	tmp -> INDEX_BOOK = INDEX_BOOKS_GLOBAL;
    3258:	80 91 b2 03 	lds	r24, 0x03B2
    325c:	ef 85       	ldd	r30, Y+15	; 0x0f
    325e:	f8 89       	ldd	r31, Y+16	; 0x10
    3260:	82 83       	std	Z+2, r24	; 0x02
	tmp -> COPIES = copies;
    3262:	ef 85       	ldd	r30, Y+15	; 0x0f
    3264:	f8 89       	ldd	r31, Y+16	; 0x10
    3266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3268:	85 83       	std	Z+5, r24	; 0x05
	
	// Save name
	for(j = 0; j < k ; j++)
    326a:	1a 8a       	std	Y+18, r1	; 0x12
    326c:	19 8a       	std	Y+17, r1	; 0x11
    326e:	17 c0       	rjmp	.+46     	; 0x329e <BOOKS_vidInsertion+0x118>
	{
		tmp ->  NAME_BOOK[j] = name[j];
    3270:	ef 85       	ldd	r30, Y+15	; 0x0f
    3272:	f8 89       	ldd	r31, Y+16	; 0x10
    3274:	20 81       	ld	r18, Z
    3276:	31 81       	ldd	r19, Z+1	; 0x01
    3278:	89 89       	ldd	r24, Y+17	; 0x11
    327a:	9a 89       	ldd	r25, Y+18	; 0x12
    327c:	d9 01       	movw	r26, r18
    327e:	a8 0f       	add	r26, r24
    3280:	b9 1f       	adc	r27, r25
    3282:	29 89       	ldd	r18, Y+17	; 0x11
    3284:	3a 89       	ldd	r19, Y+18	; 0x12
    3286:	89 8d       	ldd	r24, Y+25	; 0x19
    3288:	9a 8d       	ldd	r25, Y+26	; 0x1a
    328a:	fc 01       	movw	r30, r24
    328c:	e2 0f       	add	r30, r18
    328e:	f3 1f       	adc	r31, r19
    3290:	80 81       	ld	r24, Z
    3292:	8c 93       	st	X, r24

	tmp -> INDEX_BOOK = INDEX_BOOKS_GLOBAL;
	tmp -> COPIES = copies;
	
	// Save name
	for(j = 0; j < k ; j++)
    3294:	89 89       	ldd	r24, Y+17	; 0x11
    3296:	9a 89       	ldd	r25, Y+18	; 0x12
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	9a 8b       	std	Y+18, r25	; 0x12
    329c:	89 8b       	std	Y+17, r24	; 0x11
    329e:	29 89       	ldd	r18, Y+17	; 0x11
    32a0:	3a 89       	ldd	r19, Y+18	; 0x12
    32a2:	8d 89       	ldd	r24, Y+21	; 0x15
    32a4:	9e 89       	ldd	r25, Y+22	; 0x16
    32a6:	28 17       	cp	r18, r24
    32a8:	39 07       	cpc	r19, r25
    32aa:	14 f3       	brlt	.-60     	; 0x3270 <BOOKS_vidInsertion+0xea>
	{
		tmp ->  NAME_BOOK[j] = name[j];
	}
	tmp ->  NAME_BOOK[j] = '\0';
    32ac:	ef 85       	ldd	r30, Y+15	; 0x0f
    32ae:	f8 89       	ldd	r31, Y+16	; 0x10
    32b0:	20 81       	ld	r18, Z
    32b2:	31 81       	ldd	r19, Z+1	; 0x01
    32b4:	89 89       	ldd	r24, Y+17	; 0x11
    32b6:	9a 89       	ldd	r25, Y+18	; 0x12
    32b8:	f9 01       	movw	r30, r18
    32ba:	e8 0f       	add	r30, r24
    32bc:	f9 1f       	adc	r31, r25
    32be:	10 82       	st	Z, r1

	// Save serialNumber
	for(j = 0; j < i ; j++)
    32c0:	1a 8a       	std	Y+18, r1	; 0x12
    32c2:	19 8a       	std	Y+17, r1	; 0x11
    32c4:	17 c0       	rjmp	.+46     	; 0x32f4 <BOOKS_vidInsertion+0x16e>
	{
		tmp ->  SERIAL_NUMBER[j] = serial[j];
    32c6:	ef 85       	ldd	r30, Y+15	; 0x0f
    32c8:	f8 89       	ldd	r31, Y+16	; 0x10
    32ca:	23 81       	ldd	r18, Z+3	; 0x03
    32cc:	34 81       	ldd	r19, Z+4	; 0x04
    32ce:	89 89       	ldd	r24, Y+17	; 0x11
    32d0:	9a 89       	ldd	r25, Y+18	; 0x12
    32d2:	d9 01       	movw	r26, r18
    32d4:	a8 0f       	add	r26, r24
    32d6:	b9 1f       	adc	r27, r25
    32d8:	29 89       	ldd	r18, Y+17	; 0x11
    32da:	3a 89       	ldd	r19, Y+18	; 0x12
    32dc:	8f 89       	ldd	r24, Y+23	; 0x17
    32de:	98 8d       	ldd	r25, Y+24	; 0x18
    32e0:	fc 01       	movw	r30, r24
    32e2:	e2 0f       	add	r30, r18
    32e4:	f3 1f       	adc	r31, r19
    32e6:	80 81       	ld	r24, Z
    32e8:	8c 93       	st	X, r24
		tmp ->  NAME_BOOK[j] = name[j];
	}
	tmp ->  NAME_BOOK[j] = '\0';

	// Save serialNumber
	for(j = 0; j < i ; j++)
    32ea:	89 89       	ldd	r24, Y+17	; 0x11
    32ec:	9a 89       	ldd	r25, Y+18	; 0x12
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	9a 8b       	std	Y+18, r25	; 0x12
    32f2:	89 8b       	std	Y+17, r24	; 0x11
    32f4:	29 89       	ldd	r18, Y+17	; 0x11
    32f6:	3a 89       	ldd	r19, Y+18	; 0x12
    32f8:	8b 89       	ldd	r24, Y+19	; 0x13
    32fa:	9c 89       	ldd	r25, Y+20	; 0x14
    32fc:	28 17       	cp	r18, r24
    32fe:	39 07       	cpc	r19, r25
    3300:	14 f3       	brlt	.-60     	; 0x32c6 <BOOKS_vidInsertion+0x140>
	{
		tmp ->  SERIAL_NUMBER[j] = serial[j];
	}
	tmp ->  SERIAL_NUMBER[j] = '\0';
    3302:	ef 85       	ldd	r30, Y+15	; 0x0f
    3304:	f8 89       	ldd	r31, Y+16	; 0x10
    3306:	23 81       	ldd	r18, Z+3	; 0x03
    3308:	34 81       	ldd	r19, Z+4	; 0x04
    330a:	89 89       	ldd	r24, Y+17	; 0x11
    330c:	9a 89       	ldd	r25, Y+18	; 0x12
    330e:	f9 01       	movw	r30, r18
    3310:	e8 0f       	add	r30, r24
    3312:	f9 1f       	adc	r31, r25
    3314:	10 82       	st	Z, r1


	// Update list
	ptr_book -> NEXT_BOOK = tmp;
    3316:	e0 91 b8 03 	lds	r30, 0x03B8
    331a:	f0 91 b9 03 	lds	r31, 0x03B9
    331e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3320:	98 89       	ldd	r25, Y+16	; 0x10
    3322:	97 83       	std	Z+7, r25	; 0x07
    3324:	86 83       	std	Z+6, r24	; 0x06

	// Indicate success
	LCD_String("BOOKS INSERTED");
    3326:	82 ec       	ldi	r24, 0xC2	; 194
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	aa ef       	ldi	r26, 0xFA	; 250
    3334:	b3 e4       	ldi	r27, 0x43	; 67
    3336:	8b 87       	std	Y+11, r24	; 0x0b
    3338:	9c 87       	std	Y+12, r25	; 0x0c
    333a:	ad 87       	std	Y+13, r26	; 0x0d
    333c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3340:	7c 85       	ldd	r23, Y+12	; 0x0c
    3342:	8d 85       	ldd	r24, Y+13	; 0x0d
    3344:	9e 85       	ldd	r25, Y+14	; 0x0e
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	4a ef       	ldi	r20, 0xFA	; 250
    334c:	54 e4       	ldi	r21, 0x44	; 68
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8f 83       	std	Y+7, r24	; 0x07
    3358:	98 87       	std	Y+8, r25	; 0x08
    335a:	a9 87       	std	Y+9, r26	; 0x09
    335c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    335e:	6f 81       	ldd	r22, Y+7	; 0x07
    3360:	78 85       	ldd	r23, Y+8	; 0x08
    3362:	89 85       	ldd	r24, Y+9	; 0x09
    3364:	9a 85       	ldd	r25, Y+10	; 0x0a
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3372:	88 23       	and	r24, r24
    3374:	2c f4       	brge	.+10     	; 0x3380 <BOOKS_vidInsertion+0x1fa>
		__ticks = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
    337e:	3f c0       	rjmp	.+126    	; 0x33fe <BOOKS_vidInsertion+0x278>
	else if (__tmp > 65535)
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	4c f5       	brge	.+82     	; 0x33ea <BOOKS_vidInsertion+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	6b 85       	ldd	r22, Y+11	; 0x0b
    339a:	7c 85       	ldd	r23, Y+12	; 0x0c
    339c:	8d 85       	ldd	r24, Y+13	; 0x0d
    339e:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e2       	ldi	r20, 0x20	; 32
    33a6:	51 e4       	ldi	r21, 0x41	; 65
    33a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	8d 83       	std	Y+5, r24	; 0x05
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <BOOKS_vidInsertion+0x25a>
    33c2:	88 ec       	ldi	r24, 0xC8	; 200
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9c 83       	std	Y+4, r25	; 0x04
    33c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	9c 81       	ldd	r25, Y+4	; 0x04
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <BOOKS_vidInsertion+0x248>
    33d2:	9c 83       	std	Y+4, r25	; 0x04
    33d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d6:	8d 81       	ldd	r24, Y+5	; 0x05
    33d8:	9e 81       	ldd	r25, Y+6	; 0x06
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	9e 83       	std	Y+6, r25	; 0x06
    33de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <BOOKS_vidInsertion+0x23c>
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <BOOKS_vidInsertion+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ea:	6f 81       	ldd	r22, Y+7	; 0x07
    33ec:	78 85       	ldd	r23, Y+8	; 0x08
    33ee:	89 85       	ldd	r24, Y+9	; 0x09
    33f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9e 83       	std	Y+6, r25	; 0x06
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <BOOKS_vidInsertion+0x284>
    340e:	9a 83       	std	Y+2, r25	; 0x02
    3410:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearOnDemand(1, 32);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	60 e2       	ldi	r22, 0x20	; 32
    3416:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
	return true;
    341a:	81 e0       	ldi	r24, 0x01	; 1
}
    341c:	6b 96       	adiw	r28, 0x1b	; 27
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <BOOKS_u8DeleteEntire>:



/********************************* READY *********************************/
char BOOKS_u8DeleteEntire(void)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <BOOKS_u8DeleteEntire+0x6>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
	// Buffer to save the previous condition of ptr
	books *last_before_stack = NULL;
    3438:	1a 82       	std	Y+2, r1	; 0x02
    343a:	19 82       	std	Y+1, r1	; 0x01

	// Checking on the next field
	if(ptr_book -> NEXT_BOOK != NULL)
    343c:	e0 91 b8 03 	lds	r30, 0x03B8
    3440:	f0 91 b9 03 	lds	r31, 0x03B9
    3444:	86 81       	ldd	r24, Z+6	; 0x06
    3446:	97 81       	ldd	r25, Z+7	; 0x07
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	c1 f0       	breq	.+48     	; 0x347c <BOOKS_u8DeleteEntire+0x4e>
	{
		last_before_stack = ptr_book;
    344c:	80 91 b8 03 	lds	r24, 0x03B8
    3450:	90 91 b9 03 	lds	r25, 0x03B9
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
		ptr_book = ptr_book -> NEXT_BOOK;
    3458:	e0 91 b8 03 	lds	r30, 0x03B8
    345c:	f0 91 b9 03 	lds	r31, 0x03B9
    3460:	86 81       	ldd	r24, Z+6	; 0x06
    3462:	97 81       	ldd	r25, Z+7	; 0x07
    3464:	90 93 b9 03 	sts	0x03B9, r25
    3468:	80 93 b8 03 	sts	0x03B8, r24
		BOOKS_u8DeleteEntire();
    346c:	0e 94 17 1a 	call	0x342e	; 0x342e <BOOKS_u8DeleteEntire>
		ptr_book = last_before_stack;
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	90 93 b9 03 	sts	0x03B9, r25
    3478:	80 93 b8 03 	sts	0x03B8, r24
	}

	// free current node and return
	free(ptr_book);
    347c:	80 91 b8 03 	lds	r24, 0x03B8
    3480:	90 91 b9 03 	lds	r25, 0x03B9
    3484:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <free>
	NoOfBooks = 0;
    3488:	10 92 b0 03 	sts	0x03B0, r1
	return 0;
    348c:	80 e0       	ldi	r24, 0x00	; 0
}
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <BOOKS_vidRestart>:



void BOOKS_vidRestart (void)
{
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
	BOOKS_restart_vip();
    34a0:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <BOOKS_restart_vip>
	BOOKS_u8DeleteEntire();
    34a4:	0e 94 17 1a 	call	0x342e	; 0x342e <BOOKS_u8DeleteEntire>
	BOOKS_vidInitialize();
    34a8:	0e 94 90 18 	call	0x3120	; 0x3120 <BOOKS_vidInitialize>
}
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <BOOKS_restart_vip>:

void BOOKS_restart_vip(void)
{
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
	ptr_book = root_book;
    34ba:	80 91 b6 03 	lds	r24, 0x03B6
    34be:	90 91 b7 03 	lds	r25, 0x03B7
    34c2:	90 93 b9 03 	sts	0x03B9, r25
    34c6:	80 93 b8 03 	sts	0x03B8, r24
}
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

000034d0 <BOOKS_search>:

// Search for a book either via ISBN or its location in list
u8 BOOKS_search (char *serial, char index)
{
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	ef 97       	sbiw	r28, 0x3f	; 63
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	9d af       	std	Y+61, r25	; 0x3d
    34e6:	8c af       	std	Y+60, r24	; 0x3c
    34e8:	6e af       	std	Y+62, r22	; 0x3e
	// Start after the root
	ptr_book = root_book -> NEXT_BOOK;
    34ea:	e0 91 b6 03 	lds	r30, 0x03B6
    34ee:	f0 91 b7 03 	lds	r31, 0x03B7
    34f2:	86 81       	ldd	r24, Z+6	; 0x06
    34f4:	97 81       	ldd	r25, Z+7	; 0x07
    34f6:	90 93 b9 03 	sts	0x03B9, r25
    34fa:	80 93 b8 03 	sts	0x03B8, r24
	
	bool found = false;
    34fe:	1b ae       	std	Y+59, r1	; 0x3b


	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfBooks; i++)
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9a af       	std	Y+58, r25	; 0x3a
    3506:	89 af       	std	Y+57, r24	; 0x39
    3508:	c8 c1       	rjmp	.+912    	; 0x389a <BOOKS_search+0x3ca>
	{
		if(CompareString(serial, ptr_book -> SERIAL_NUMBER) || index == ptr_book -> INDEX_BOOK)
    350a:	e0 91 b8 03 	lds	r30, 0x03B8
    350e:	f0 91 b9 03 	lds	r31, 0x03B9
    3512:	23 81       	ldd	r18, Z+3	; 0x03
    3514:	34 81       	ldd	r19, Z+4	; 0x04
    3516:	8c ad       	ldd	r24, Y+60	; 0x3c
    3518:	9d ad       	ldd	r25, Y+61	; 0x3d
    351a:	b9 01       	movw	r22, r18
    351c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <CompareString>
    3520:	88 23       	and	r24, r24
    3522:	49 f4       	brne	.+18     	; 0x3536 <BOOKS_search+0x66>
    3524:	e0 91 b8 03 	lds	r30, 0x03B8
    3528:	f0 91 b9 03 	lds	r31, 0x03B9
    352c:	92 81       	ldd	r25, Z+2	; 0x02
    352e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3530:	98 17       	cp	r25, r24
    3532:	09 f0       	breq	.+2      	; 0x3536 <BOOKS_search+0x66>
    3534:	a3 c1       	rjmp	.+838    	; 0x387c <BOOKS_search+0x3ac>
		{
			found = true;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	8b af       	std	Y+59, r24	; 0x3b
			book_to_decay = ptr_book;
    353a:	80 91 b8 03 	lds	r24, 0x03B8
    353e:	90 91 b9 03 	lds	r25, 0x03B9
    3542:	90 93 bb 03 	sts	0x03BB, r25
    3546:	80 93 ba 03 	sts	0x03BA, r24
			LCD_vidClearOnDemand(1, 32);
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	60 e2       	ldi	r22, 0x20	; 32
    354e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

			LCD_String("BOOK'S INFO:");
    3552:	81 ed       	ldi	r24, 0xD1	; 209
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_vidGoTo(1, 2);
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	62 e0       	ldi	r22, 0x02	; 2
    355e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			LCD_String("wait...");
    3562:	8e ed       	ldi	r24, 0xDE	; 222
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	aa ef       	ldi	r26, 0xFA	; 250
    3570:	b3 e4       	ldi	r27, 0x43	; 67
    3572:	8d ab       	std	Y+53, r24	; 0x35
    3574:	9e ab       	std	Y+54, r25	; 0x36
    3576:	af ab       	std	Y+55, r26	; 0x37
    3578:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357a:	6d a9       	ldd	r22, Y+53	; 0x35
    357c:	7e a9       	ldd	r23, Y+54	; 0x36
    357e:	8f a9       	ldd	r24, Y+55	; 0x37
    3580:	98 ad       	ldd	r25, Y+56	; 0x38
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	4a ef       	ldi	r20, 0xFA	; 250
    3588:	54 e4       	ldi	r21, 0x44	; 68
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	89 ab       	std	Y+49, r24	; 0x31
    3594:	9a ab       	std	Y+50, r25	; 0x32
    3596:	ab ab       	std	Y+51, r26	; 0x33
    3598:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    359a:	69 a9       	ldd	r22, Y+49	; 0x31
    359c:	7a a9       	ldd	r23, Y+50	; 0x32
    359e:	8b a9       	ldd	r24, Y+51	; 0x33
    35a0:	9c a9       	ldd	r25, Y+52	; 0x34
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e8       	ldi	r20, 0x80	; 128
    35a8:	5f e3       	ldi	r21, 0x3F	; 63
    35aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ae:	88 23       	and	r24, r24
    35b0:	2c f4       	brge	.+10     	; 0x35bc <BOOKS_search+0xec>
		__ticks = 1;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	98 ab       	std	Y+48, r25	; 0x30
    35b8:	8f a7       	std	Y+47, r24	; 0x2f
    35ba:	3f c0       	rjmp	.+126    	; 0x363a <BOOKS_search+0x16a>
	else if (__tmp > 65535)
    35bc:	69 a9       	ldd	r22, Y+49	; 0x31
    35be:	7a a9       	ldd	r23, Y+50	; 0x32
    35c0:	8b a9       	ldd	r24, Y+51	; 0x33
    35c2:	9c a9       	ldd	r25, Y+52	; 0x34
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	3f ef       	ldi	r19, 0xFF	; 255
    35c8:	4f e7       	ldi	r20, 0x7F	; 127
    35ca:	57 e4       	ldi	r21, 0x47	; 71
    35cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d0:	18 16       	cp	r1, r24
    35d2:	4c f5       	brge	.+82     	; 0x3626 <BOOKS_search+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d4:	6d a9       	ldd	r22, Y+53	; 0x35
    35d6:	7e a9       	ldd	r23, Y+54	; 0x36
    35d8:	8f a9       	ldd	r24, Y+55	; 0x37
    35da:	98 ad       	ldd	r25, Y+56	; 0x38
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e2       	ldi	r20, 0x20	; 32
    35e2:	51 e4       	ldi	r21, 0x41	; 65
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	98 ab       	std	Y+48, r25	; 0x30
    35fa:	8f a7       	std	Y+47, r24	; 0x2f
    35fc:	0f c0       	rjmp	.+30     	; 0x361c <BOOKS_search+0x14c>
    35fe:	88 ec       	ldi	r24, 0xC8	; 200
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9e a7       	std	Y+46, r25	; 0x2e
    3604:	8d a7       	std	Y+45, r24	; 0x2d
    3606:	8d a5       	ldd	r24, Y+45	; 0x2d
    3608:	9e a5       	ldd	r25, Y+46	; 0x2e
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <BOOKS_search+0x13a>
    360e:	9e a7       	std	Y+46, r25	; 0x2e
    3610:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	8f a5       	ldd	r24, Y+47	; 0x2f
    3614:	98 a9       	ldd	r25, Y+48	; 0x30
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	98 ab       	std	Y+48, r25	; 0x30
    361a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361c:	8f a5       	ldd	r24, Y+47	; 0x2f
    361e:	98 a9       	ldd	r25, Y+48	; 0x30
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	69 f7       	brne	.-38     	; 0x35fe <BOOKS_search+0x12e>
    3624:	14 c0       	rjmp	.+40     	; 0x364e <BOOKS_search+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3626:	69 a9       	ldd	r22, Y+49	; 0x31
    3628:	7a a9       	ldd	r23, Y+50	; 0x32
    362a:	8b a9       	ldd	r24, Y+51	; 0x33
    362c:	9c a9       	ldd	r25, Y+52	; 0x34
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	98 ab       	std	Y+48, r25	; 0x30
    3638:	8f a7       	std	Y+47, r24	; 0x2f
    363a:	8f a5       	ldd	r24, Y+47	; 0x2f
    363c:	98 a9       	ldd	r25, Y+48	; 0x30
    363e:	9c a7       	std	Y+44, r25	; 0x2c
    3640:	8b a7       	std	Y+43, r24	; 0x2b
    3642:	8b a5       	ldd	r24, Y+43	; 0x2b
    3644:	9c a5       	ldd	r25, Y+44	; 0x2c
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <BOOKS_search+0x176>
    364a:	9c a7       	std	Y+44, r25	; 0x2c
    364c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);

			LCD_vidClearOnDemand(1, 32);
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	60 e2       	ldi	r22, 0x20	; 32
    3652:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

			LCD_String("Name:");
    3656:	86 ee       	ldi	r24, 0xE6	; 230
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_vidGoTo(1, 2);
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	62 e0       	ldi	r22, 0x02	; 2
    3662:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			LCD_String(ptr_book -> NAME_BOOK);
    3666:	e0 91 b8 03 	lds	r30, 0x03B8
    366a:	f0 91 b9 03 	lds	r31, 0x03B9
    366e:	80 81       	ld	r24, Z
    3670:	91 81       	ldd	r25, Z+1	; 0x01
    3672:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	aa ef       	ldi	r26, 0xFA	; 250
    367c:	b4 e4       	ldi	r27, 0x44	; 68
    367e:	8f a3       	std	Y+39, r24	; 0x27
    3680:	98 a7       	std	Y+40, r25	; 0x28
    3682:	a9 a7       	std	Y+41, r26	; 0x29
    3684:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3686:	6f a1       	ldd	r22, Y+39	; 0x27
    3688:	78 a5       	ldd	r23, Y+40	; 0x28
    368a:	89 a5       	ldd	r24, Y+41	; 0x29
    368c:	9a a5       	ldd	r25, Y+42	; 0x2a
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	4a ef       	ldi	r20, 0xFA	; 250
    3694:	54 e4       	ldi	r21, 0x44	; 68
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	8b a3       	std	Y+35, r24	; 0x23
    36a0:	9c a3       	std	Y+36, r25	; 0x24
    36a2:	ad a3       	std	Y+37, r26	; 0x25
    36a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36a6:	6b a1       	ldd	r22, Y+35	; 0x23
    36a8:	7c a1       	ldd	r23, Y+36	; 0x24
    36aa:	8d a1       	ldd	r24, Y+37	; 0x25
    36ac:	9e a1       	ldd	r25, Y+38	; 0x26
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 e8       	ldi	r20, 0x80	; 128
    36b4:	5f e3       	ldi	r21, 0x3F	; 63
    36b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ba:	88 23       	and	r24, r24
    36bc:	2c f4       	brge	.+10     	; 0x36c8 <BOOKS_search+0x1f8>
		__ticks = 1;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9a a3       	std	Y+34, r25	; 0x22
    36c4:	89 a3       	std	Y+33, r24	; 0x21
    36c6:	3f c0       	rjmp	.+126    	; 0x3746 <BOOKS_search+0x276>
	else if (__tmp > 65535)
    36c8:	6b a1       	ldd	r22, Y+35	; 0x23
    36ca:	7c a1       	ldd	r23, Y+36	; 0x24
    36cc:	8d a1       	ldd	r24, Y+37	; 0x25
    36ce:	9e a1       	ldd	r25, Y+38	; 0x26
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	3f ef       	ldi	r19, 0xFF	; 255
    36d4:	4f e7       	ldi	r20, 0x7F	; 127
    36d6:	57 e4       	ldi	r21, 0x47	; 71
    36d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36dc:	18 16       	cp	r1, r24
    36de:	4c f5       	brge	.+82     	; 0x3732 <BOOKS_search+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e0:	6f a1       	ldd	r22, Y+39	; 0x27
    36e2:	78 a5       	ldd	r23, Y+40	; 0x28
    36e4:	89 a5       	ldd	r24, Y+41	; 0x29
    36e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e2       	ldi	r20, 0x20	; 32
    36ee:	51 e4       	ldi	r21, 0x41	; 65
    36f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	bc 01       	movw	r22, r24
    36fa:	cd 01       	movw	r24, r26
    36fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	9a a3       	std	Y+34, r25	; 0x22
    3706:	89 a3       	std	Y+33, r24	; 0x21
    3708:	0f c0       	rjmp	.+30     	; 0x3728 <BOOKS_search+0x258>
    370a:	88 ec       	ldi	r24, 0xC8	; 200
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	98 a3       	std	Y+32, r25	; 0x20
    3710:	8f 8f       	std	Y+31, r24	; 0x1f
    3712:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3714:	98 a1       	ldd	r25, Y+32	; 0x20
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	f1 f7       	brne	.-4      	; 0x3716 <BOOKS_search+0x246>
    371a:	98 a3       	std	Y+32, r25	; 0x20
    371c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371e:	89 a1       	ldd	r24, Y+33	; 0x21
    3720:	9a a1       	ldd	r25, Y+34	; 0x22
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	9a a3       	std	Y+34, r25	; 0x22
    3726:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3728:	89 a1       	ldd	r24, Y+33	; 0x21
    372a:	9a a1       	ldd	r25, Y+34	; 0x22
    372c:	00 97       	sbiw	r24, 0x00	; 0
    372e:	69 f7       	brne	.-38     	; 0x370a <BOOKS_search+0x23a>
    3730:	14 c0       	rjmp	.+40     	; 0x375a <BOOKS_search+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3732:	6b a1       	ldd	r22, Y+35	; 0x23
    3734:	7c a1       	ldd	r23, Y+36	; 0x24
    3736:	8d a1       	ldd	r24, Y+37	; 0x25
    3738:	9e a1       	ldd	r25, Y+38	; 0x26
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9a a3       	std	Y+34, r25	; 0x22
    3744:	89 a3       	std	Y+33, r24	; 0x21
    3746:	89 a1       	ldd	r24, Y+33	; 0x21
    3748:	9a a1       	ldd	r25, Y+34	; 0x22
    374a:	9e 8f       	std	Y+30, r25	; 0x1e
    374c:	8d 8f       	std	Y+29, r24	; 0x1d
    374e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3750:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	f1 f7       	brne	.-4      	; 0x3752 <BOOKS_search+0x282>
    3756:	9e 8f       	std	Y+30, r25	; 0x1e
    3758:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	60 e2       	ldi	r22, 0x20	; 32
    375e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

			LCD_String("ISBN:");
    3762:	8c ee       	ldi	r24, 0xEC	; 236
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_vidGoTo(1, 2);
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	62 e0       	ldi	r22, 0x02	; 2
    376e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			LCD_String(ptr_book -> SERIAL_NUMBER);
    3772:	e0 91 b8 03 	lds	r30, 0x03B8
    3776:	f0 91 b9 03 	lds	r31, 0x03B9
    377a:	83 81       	ldd	r24, Z+3	; 0x03
    377c:	94 81       	ldd	r25, Z+4	; 0x04
    377e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	aa ef       	ldi	r26, 0xFA	; 250
    3788:	b4 e4       	ldi	r27, 0x44	; 68
    378a:	89 8f       	std	Y+25, r24	; 0x19
    378c:	9a 8f       	std	Y+26, r25	; 0x1a
    378e:	ab 8f       	std	Y+27, r26	; 0x1b
    3790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3792:	69 8d       	ldd	r22, Y+25	; 0x19
    3794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	4a ef       	ldi	r20, 0xFA	; 250
    37a0:	54 e4       	ldi	r21, 0x44	; 68
    37a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8d 8b       	std	Y+21, r24	; 0x15
    37ac:	9e 8b       	std	Y+22, r25	; 0x16
    37ae:	af 8b       	std	Y+23, r26	; 0x17
    37b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37b2:	6d 89       	ldd	r22, Y+21	; 0x15
    37b4:	7e 89       	ldd	r23, Y+22	; 0x16
    37b6:	8f 89       	ldd	r24, Y+23	; 0x17
    37b8:	98 8d       	ldd	r25, Y+24	; 0x18
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e8       	ldi	r20, 0x80	; 128
    37c0:	5f e3       	ldi	r21, 0x3F	; 63
    37c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c6:	88 23       	and	r24, r24
    37c8:	2c f4       	brge	.+10     	; 0x37d4 <BOOKS_search+0x304>
		__ticks = 1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9c 8b       	std	Y+20, r25	; 0x14
    37d0:	8b 8b       	std	Y+19, r24	; 0x13
    37d2:	3f c0       	rjmp	.+126    	; 0x3852 <BOOKS_search+0x382>
	else if (__tmp > 65535)
    37d4:	6d 89       	ldd	r22, Y+21	; 0x15
    37d6:	7e 89       	ldd	r23, Y+22	; 0x16
    37d8:	8f 89       	ldd	r24, Y+23	; 0x17
    37da:	98 8d       	ldd	r25, Y+24	; 0x18
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	3f ef       	ldi	r19, 0xFF	; 255
    37e0:	4f e7       	ldi	r20, 0x7F	; 127
    37e2:	57 e4       	ldi	r21, 0x47	; 71
    37e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e8:	18 16       	cp	r1, r24
    37ea:	4c f5       	brge	.+82     	; 0x383e <BOOKS_search+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ec:	69 8d       	ldd	r22, Y+25	; 0x19
    37ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e2       	ldi	r20, 0x20	; 32
    37fa:	51 e4       	ldi	r21, 0x41	; 65
    37fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9c 8b       	std	Y+20, r25	; 0x14
    3812:	8b 8b       	std	Y+19, r24	; 0x13
    3814:	0f c0       	rjmp	.+30     	; 0x3834 <BOOKS_search+0x364>
    3816:	88 ec       	ldi	r24, 0xC8	; 200
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9a 8b       	std	Y+18, r25	; 0x12
    381c:	89 8b       	std	Y+17, r24	; 0x11
    381e:	89 89       	ldd	r24, Y+17	; 0x11
    3820:	9a 89       	ldd	r25, Y+18	; 0x12
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	f1 f7       	brne	.-4      	; 0x3822 <BOOKS_search+0x352>
    3826:	9a 8b       	std	Y+18, r25	; 0x12
    3828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382a:	8b 89       	ldd	r24, Y+19	; 0x13
    382c:	9c 89       	ldd	r25, Y+20	; 0x14
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	9c 8b       	std	Y+20, r25	; 0x14
    3832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3834:	8b 89       	ldd	r24, Y+19	; 0x13
    3836:	9c 89       	ldd	r25, Y+20	; 0x14
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	69 f7       	brne	.-38     	; 0x3816 <BOOKS_search+0x346>
    383c:	14 c0       	rjmp	.+40     	; 0x3866 <BOOKS_search+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383e:	6d 89       	ldd	r22, Y+21	; 0x15
    3840:	7e 89       	ldd	r23, Y+22	; 0x16
    3842:	8f 89       	ldd	r24, Y+23	; 0x17
    3844:	98 8d       	ldd	r25, Y+24	; 0x18
    3846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	9c 8b       	std	Y+20, r25	; 0x14
    3850:	8b 8b       	std	Y+19, r24	; 0x13
    3852:	8b 89       	ldd	r24, Y+19	; 0x13
    3854:	9c 89       	ldd	r25, Y+20	; 0x14
    3856:	98 8b       	std	Y+16, r25	; 0x10
    3858:	8f 87       	std	Y+15, r24	; 0x0f
    385a:	8f 85       	ldd	r24, Y+15	; 0x0f
    385c:	98 89       	ldd	r25, Y+16	; 0x10
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <BOOKS_search+0x38e>
    3862:	98 8b       	std	Y+16, r25	; 0x10
    3864:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	60 e2       	ldi	r22, 0x20	; 32
    386a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

			// Update buffer incase of borrowing			
			return ptr_book -> INDEX_BOOK;
    386e:	e0 91 b8 03 	lds	r30, 0x03B8
    3872:	f0 91 b9 03 	lds	r31, 0x03B9
    3876:	82 81       	ldd	r24, Z+2	; 0x02
    3878:	8f af       	std	Y+63, r24	; 0x3f
    387a:	b2 c0       	rjmp	.+356    	; 0x39e0 <BOOKS_search+0x510>
		}
		ptr_book = ptr_book -> NEXT_BOOK;
    387c:	e0 91 b8 03 	lds	r30, 0x03B8
    3880:	f0 91 b9 03 	lds	r31, 0x03B9
    3884:	86 81       	ldd	r24, Z+6	; 0x06
    3886:	97 81       	ldd	r25, Z+7	; 0x07
    3888:	90 93 b9 03 	sts	0x03B9, r25
    388c:	80 93 b8 03 	sts	0x03B8, r24
	
	bool found = false;


	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfBooks; i++)
    3890:	89 ad       	ldd	r24, Y+57	; 0x39
    3892:	9a ad       	ldd	r25, Y+58	; 0x3a
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	9a af       	std	Y+58, r25	; 0x3a
    3898:	89 af       	std	Y+57, r24	; 0x39
    389a:	80 91 b0 03 	lds	r24, 0x03B0
    389e:	28 2f       	mov	r18, r24
    38a0:	33 27       	eor	r19, r19
    38a2:	27 fd       	sbrc	r18, 7
    38a4:	30 95       	com	r19
    38a6:	89 ad       	ldd	r24, Y+57	; 0x39
    38a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    38aa:	28 17       	cp	r18, r24
    38ac:	39 07       	cpc	r19, r25
    38ae:	0c f0       	brlt	.+2      	; 0x38b2 <BOOKS_search+0x3e2>
    38b0:	2c ce       	rjmp	.-936    	; 0x350a <BOOKS_search+0x3a>
			return ptr_book -> INDEX_BOOK;
		}
		ptr_book = ptr_book -> NEXT_BOOK;
	}

	if(!found)
    38b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    38b4:	91 e0       	ldi	r25, 0x01	; 1
    38b6:	89 27       	eor	r24, r25
    38b8:	88 23       	and	r24, r24
    38ba:	09 f4       	brne	.+2      	; 0x38be <BOOKS_search+0x3ee>
    38bc:	88 c0       	rjmp	.+272    	; 0x39ce <BOOKS_search+0x4fe>
	{
		LCD_vidGoTo(1, 1);
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	61 e0       	ldi	r22, 0x01	; 1
    38c2:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
		LCD_String("NO BOOK found");
    38c6:	82 ef       	ldi	r24, 0xF2	; 242
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	aa ef       	ldi	r26, 0xFA	; 250
    38d4:	b4 e4       	ldi	r27, 0x44	; 68
    38d6:	8b 87       	std	Y+11, r24	; 0x0b
    38d8:	9c 87       	std	Y+12, r25	; 0x0c
    38da:	ad 87       	std	Y+13, r26	; 0x0d
    38dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a ef       	ldi	r20, 0xFA	; 250
    38ec:	54 e4       	ldi	r21, 0x44	; 68
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	8f 83       	std	Y+7, r24	; 0x07
    38f8:	98 87       	std	Y+8, r25	; 0x08
    38fa:	a9 87       	std	Y+9, r26	; 0x09
    38fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3900:	78 85       	ldd	r23, Y+8	; 0x08
    3902:	89 85       	ldd	r24, Y+9	; 0x09
    3904:	9a 85       	ldd	r25, Y+10	; 0x0a
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <BOOKS_search+0x450>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	3f c0       	rjmp	.+126    	; 0x399e <BOOKS_search+0x4ce>
	else if (__tmp > 65535)
    3920:	6f 81       	ldd	r22, Y+7	; 0x07
    3922:	78 85       	ldd	r23, Y+8	; 0x08
    3924:	89 85       	ldd	r24, Y+9	; 0x09
    3926:	9a 85       	ldd	r25, Y+10	; 0x0a
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <BOOKS_search+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	6b 85       	ldd	r22, Y+11	; 0x0b
    393a:	7c 85       	ldd	r23, Y+12	; 0x0c
    393c:	8d 85       	ldd	r24, Y+13	; 0x0d
    393e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <BOOKS_search+0x4b0>
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9c 83       	std	Y+4, r25	; 0x04
    3968:	8b 83       	std	Y+3, r24	; 0x03
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <BOOKS_search+0x49e>
    3972:	9c 83       	std	Y+4, r25	; 0x04
    3974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	9e 83       	std	Y+6, r25	; 0x06
    397e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8d 81       	ldd	r24, Y+5	; 0x05
    3982:	9e 81       	ldd	r25, Y+6	; 0x06
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <BOOKS_search+0x492>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <BOOKS_search+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	6f 81       	ldd	r22, Y+7	; 0x07
    398c:	78 85       	ldd	r23, Y+8	; 0x08
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	9a 83       	std	Y+2, r25	; 0x02
    39a4:	89 83       	std	Y+1, r24	; 0x01
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <BOOKS_search+0x4da>
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	60 e2       	ldi	r22, 0x20	; 32
    39b6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		ptr_book = root_book;
    39ba:	80 91 b6 03 	lds	r24, 0x03B6
    39be:	90 91 b7 03 	lds	r25, 0x03B7
    39c2:	90 93 b9 03 	sts	0x03B9, r25
    39c6:	80 93 b8 03 	sts	0x03B8, r24
		return DoesNot_exist;
    39ca:	1f ae       	std	Y+63, r1	; 0x3f
    39cc:	09 c0       	rjmp	.+18     	; 0x39e0 <BOOKS_search+0x510>
	}

	ptr_book = root_book;
    39ce:	80 91 b6 03 	lds	r24, 0x03B6
    39d2:	90 91 b7 03 	lds	r25, 0x03B7
    39d6:	90 93 b9 03 	sts	0x03B9, r25
    39da:	80 93 b8 03 	sts	0x03B8, r24
	return 0;
    39de:	1f ae       	std	Y+63, r1	; 0x3f
    39e0:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    39e2:	ef 96       	adiw	r28, 0x3f	; 63
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <BOOKS_show>:
*/


// Shows all Books in the library
bool BOOKS_show(void)
{
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62
    39fc:	ab 97       	sbiw	r28, 0x2b	; 43
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
	LCD_vidClearOnDemand(1, 32);
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	60 e2       	ldi	r22, 0x20	; 32
    3a0c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

	ptr_book = root_book -> NEXT_BOOK;
    3a10:	e0 91 b6 03 	lds	r30, 0x03B6
    3a14:	f0 91 b7 03 	lds	r31, 0x03B7
    3a18:	86 81       	ldd	r24, Z+6	; 0x06
    3a1a:	97 81       	ldd	r25, Z+7	; 0x07
    3a1c:	90 93 b9 03 	sts	0x03B9, r25
    3a20:	80 93 b8 03 	sts	0x03B8, r24

	// Only root is no valid list
	if(!ptr_book)
    3a24:	80 91 b8 03 	lds	r24, 0x03B8
    3a28:	90 91 b9 03 	lds	r25, 0x03B9
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	09 f0       	breq	.+2      	; 0x3a32 <BOOKS_show+0x3e>
    3a30:	80 c0       	rjmp	.+256    	; 0x3b32 <BOOKS_show+0x13e>
	{
		LCD_String("NO BOOKS");
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	91 e0       	ldi	r25, 0x01	; 1
    3a36:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	aa e7       	ldi	r26, 0x7A	; 122
    3a40:	b4 e4       	ldi	r27, 0x44	; 68
    3a42:	8f a3       	std	Y+39, r24	; 0x27
    3a44:	98 a7       	std	Y+40, r25	; 0x28
    3a46:	a9 a7       	std	Y+41, r26	; 0x29
    3a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	4a ef       	ldi	r20, 0xFA	; 250
    3a58:	54 e4       	ldi	r21, 0x44	; 68
    3a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	8b a3       	std	Y+35, r24	; 0x23
    3a64:	9c a3       	std	Y+36, r25	; 0x24
    3a66:	ad a3       	std	Y+37, r26	; 0x25
    3a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a70:	9e a1       	ldd	r25, Y+38	; 0x26
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e8       	ldi	r20, 0x80	; 128
    3a78:	5f e3       	ldi	r21, 0x3F	; 63
    3a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a7e:	88 23       	and	r24, r24
    3a80:	2c f4       	brge	.+10     	; 0x3a8c <BOOKS_show+0x98>
		__ticks = 1;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	9a a3       	std	Y+34, r25	; 0x22
    3a88:	89 a3       	std	Y+33, r24	; 0x21
    3a8a:	3f c0       	rjmp	.+126    	; 0x3b0a <BOOKS_show+0x116>
	else if (__tmp > 65535)
    3a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a90:	8d a1       	ldd	r24, Y+37	; 0x25
    3a92:	9e a1       	ldd	r25, Y+38	; 0x26
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	3f ef       	ldi	r19, 0xFF	; 255
    3a98:	4f e7       	ldi	r20, 0x7F	; 127
    3a9a:	57 e4       	ldi	r21, 0x47	; 71
    3a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa0:	18 16       	cp	r1, r24
    3aa2:	4c f5       	brge	.+82     	; 0x3af6 <BOOKS_show+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    3aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    3aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    3aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
    3acc:	0f c0       	rjmp	.+30     	; 0x3aec <BOOKS_show+0xf8>
    3ace:	88 ec       	ldi	r24, 0xC8	; 200
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	98 a3       	std	Y+32, r25	; 0x20
    3ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <BOOKS_show+0xe6>
    3ade:	98 a3       	std	Y+32, r25	; 0x20
    3ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	9a a3       	std	Y+34, r25	; 0x22
    3aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aec:	89 a1       	ldd	r24, Y+33	; 0x21
    3aee:	9a a1       	ldd	r25, Y+34	; 0x22
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	69 f7       	brne	.-38     	; 0x3ace <BOOKS_show+0xda>
    3af4:	14 c0       	rjmp	.+40     	; 0x3b1e <BOOKS_show+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af6:	6b a1       	ldd	r22, Y+35	; 0x23
    3af8:	7c a1       	ldd	r23, Y+36	; 0x24
    3afa:	8d a1       	ldd	r24, Y+37	; 0x25
    3afc:	9e a1       	ldd	r25, Y+38	; 0x26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9a a3       	std	Y+34, r25	; 0x22
    3b08:	89 a3       	std	Y+33, r24	; 0x21
    3b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b10:	8d 8f       	std	Y+29, r24	; 0x1d
    3b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <BOOKS_show+0x122>
    3b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b1c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		ptr_book = root_book;
    3b1e:	80 91 b6 03 	lds	r24, 0x03B6
    3b22:	90 91 b7 03 	lds	r25, 0x03B7
    3b26:	90 93 b9 03 	sts	0x03B9, r25
    3b2a:	80 93 b8 03 	sts	0x03B8, r24
		return false;
    3b2e:	1b a6       	std	Y+43, r1	; 0x2b
    3b30:	34 c1       	rjmp	.+616    	; 0x3d9a <BOOKS_show+0x3a6>
	}

	do
	{
		LCD_vidGoTo(1, 2);
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	62 e0       	ldi	r22, 0x02	; 2
    3b36:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
		LCD_String(ptr_book -> SERIAL_NUMBER);
    3b3a:	e0 91 b8 03 	lds	r30, 0x03B8
    3b3e:	f0 91 b9 03 	lds	r31, 0x03B9
    3b42:	83 81       	ldd	r24, Z+3	; 0x03
    3b44:	94 81       	ldd	r25, Z+4	; 0x04
    3b46:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		LCD_vidGoTo(1, 1);
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	61 e0       	ldi	r22, 0x01	; 1
    3b4e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
		LCD_String("-");
    3b52:	89 e0       	ldi	r24, 0x09	; 9
    3b54:	91 e0       	ldi	r25, 0x01	; 1
    3b56:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		LCD_String(ptr_book -> NAME_BOOK);
    3b5a:	e0 91 b8 03 	lds	r30, 0x03B8
    3b5e:	f0 91 b9 03 	lds	r31, 0x03B9
    3b62:	80 81       	ld	r24, Z
    3b64:	91 81       	ldd	r25, Z+1	; 0x01
    3b66:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	aa e7       	ldi	r26, 0x7A	; 122
    3b70:	b4 e4       	ldi	r27, 0x44	; 68
    3b72:	89 8f       	std	Y+25, r24	; 0x19
    3b74:	9a 8f       	std	Y+26, r25	; 0x1a
    3b76:	ab 8f       	std	Y+27, r26	; 0x1b
    3b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	4a ef       	ldi	r20, 0xFA	; 250
    3b88:	54 e4       	ldi	r21, 0x44	; 68
    3b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	8d 8b       	std	Y+21, r24	; 0x15
    3b94:	9e 8b       	std	Y+22, r25	; 0x16
    3b96:	af 8b       	std	Y+23, r26	; 0x17
    3b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e8       	ldi	r20, 0x80	; 128
    3ba8:	5f e3       	ldi	r21, 0x3F	; 63
    3baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bae:	88 23       	and	r24, r24
    3bb0:	2c f4       	brge	.+10     	; 0x3bbc <BOOKS_show+0x1c8>
		__ticks = 1;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	9c 8b       	std	Y+20, r25	; 0x14
    3bb8:	8b 8b       	std	Y+19, r24	; 0x13
    3bba:	3f c0       	rjmp	.+126    	; 0x3c3a <BOOKS_show+0x246>
	else if (__tmp > 65535)
    3bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	3f ef       	ldi	r19, 0xFF	; 255
    3bc8:	4f e7       	ldi	r20, 0x7F	; 127
    3bca:	57 e4       	ldi	r21, 0x47	; 71
    3bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd0:	18 16       	cp	r1, r24
    3bd2:	4c f5       	brge	.+82     	; 0x3c26 <BOOKS_show+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e2       	ldi	r20, 0x20	; 32
    3be2:	51 e4       	ldi	r21, 0x41	; 65
    3be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9c 8b       	std	Y+20, r25	; 0x14
    3bfa:	8b 8b       	std	Y+19, r24	; 0x13
    3bfc:	0f c0       	rjmp	.+30     	; 0x3c1c <BOOKS_show+0x228>
    3bfe:	88 ec       	ldi	r24, 0xC8	; 200
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	9a 8b       	std	Y+18, r25	; 0x12
    3c04:	89 8b       	std	Y+17, r24	; 0x11
    3c06:	89 89       	ldd	r24, Y+17	; 0x11
    3c08:	9a 89       	ldd	r25, Y+18	; 0x12
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <BOOKS_show+0x216>
    3c0e:	9a 8b       	std	Y+18, r25	; 0x12
    3c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c12:	8b 89       	ldd	r24, Y+19	; 0x13
    3c14:	9c 89       	ldd	r25, Y+20	; 0x14
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	9c 8b       	std	Y+20, r25	; 0x14
    3c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	69 f7       	brne	.-38     	; 0x3bfe <BOOKS_show+0x20a>
    3c24:	14 c0       	rjmp	.+40     	; 0x3c4e <BOOKS_show+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c26:	6d 89       	ldd	r22, Y+21	; 0x15
    3c28:	7e 89       	ldd	r23, Y+22	; 0x16
    3c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	9c 8b       	std	Y+20, r25	; 0x14
    3c38:	8b 8b       	std	Y+19, r24	; 0x13
    3c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3e:	98 8b       	std	Y+16, r25	; 0x10
    3c40:	8f 87       	std	Y+15, r24	; 0x0f
    3c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c44:	98 89       	ldd	r25, Y+16	; 0x10
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f1 f7       	brne	.-4      	; 0x3c46 <BOOKS_show+0x252>
    3c4a:	98 8b       	std	Y+16, r25	; 0x10
    3c4c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_vidClearOnDemand(17, 32);
    3c4e:	81 e1       	ldi	r24, 0x11	; 17
    3c50:	60 e2       	ldi	r22, 0x20	; 32
    3c52:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		LCD_vidGoTo(1, 2);
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	62 e0       	ldi	r22, 0x02	; 2
    3c5a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
		LCD_String("Copies: ");
    3c5e:	8b e0       	ldi	r24, 0x0B	; 11
    3c60:	91 e0       	ldi	r25, 0x01	; 1
    3c62:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		LinkedList_vidCompanion(ptr_book -> COPIES);
    3c66:	e0 91 b8 03 	lds	r30, 0x03B8
    3c6a:	f0 91 b9 03 	lds	r31, 0x03B9
    3c6e:	85 81       	ldd	r24, Z+5	; 0x05
    3c70:	88 2f       	mov	r24, r24
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	0e 94 41 2a 	call	0x5482	; 0x5482 <LinkedList_vidCompanion>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	aa e7       	ldi	r26, 0x7A	; 122
    3c7e:	b4 e4       	ldi	r27, 0x44	; 68
    3c80:	8b 87       	std	Y+11, r24	; 0x0b
    3c82:	9c 87       	std	Y+12, r25	; 0x0c
    3c84:	ad 87       	std	Y+13, r26	; 0x0d
    3c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	4a ef       	ldi	r20, 0xFA	; 250
    3c96:	54 e4       	ldi	r21, 0x44	; 68
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	8f 83       	std	Y+7, r24	; 0x07
    3ca2:	98 87       	std	Y+8, r25	; 0x08
    3ca4:	a9 87       	std	Y+9, r26	; 0x09
    3ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    3caa:	78 85       	ldd	r23, Y+8	; 0x08
    3cac:	89 85       	ldd	r24, Y+9	; 0x09
    3cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	5f e3       	ldi	r21, 0x3F	; 63
    3cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cbc:	88 23       	and	r24, r24
    3cbe:	2c f4       	brge	.+10     	; 0x3cca <BOOKS_show+0x2d6>
		__ticks = 1;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	3f c0       	rjmp	.+126    	; 0x3d48 <BOOKS_show+0x354>
	else if (__tmp > 65535)
    3cca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ccc:	78 85       	ldd	r23, Y+8	; 0x08
    3cce:	89 85       	ldd	r24, Y+9	; 0x09
    3cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	4c f5       	brge	.+82     	; 0x3d34 <BOOKS_show+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e2       	ldi	r20, 0x20	; 32
    3cf0:	51 e4       	ldi	r21, 0x41	; 65
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	9e 83       	std	Y+6, r25	; 0x06
    3d08:	8d 83       	std	Y+5, r24	; 0x05
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <BOOKS_show+0x336>
    3d0c:	88 ec       	ldi	r24, 0xC8	; 200
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	9c 83       	std	Y+4, r25	; 0x04
    3d12:	8b 83       	std	Y+3, r24	; 0x03
    3d14:	8b 81       	ldd	r24, Y+3	; 0x03
    3d16:	9c 81       	ldd	r25, Y+4	; 0x04
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	f1 f7       	brne	.-4      	; 0x3d18 <BOOKS_show+0x324>
    3d1c:	9c 83       	std	Y+4, r25	; 0x04
    3d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d20:	8d 81       	ldd	r24, Y+5	; 0x05
    3d22:	9e 81       	ldd	r25, Y+6	; 0x06
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	69 f7       	brne	.-38     	; 0x3d0c <BOOKS_show+0x318>
    3d32:	14 c0       	rjmp	.+40     	; 0x3d5c <BOOKS_show+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d34:	6f 81       	ldd	r22, Y+7	; 0x07
    3d36:	78 85       	ldd	r23, Y+8	; 0x08
    3d38:	89 85       	ldd	r24, Y+9	; 0x09
    3d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9e 83       	std	Y+6, r25	; 0x06
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4c:	9a 83       	std	Y+2, r25	; 0x02
    3d4e:	89 83       	std	Y+1, r24	; 0x01
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	9a 81       	ldd	r25, Y+2	; 0x02
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <BOOKS_show+0x360>
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_vidClearOnDemand(1, 32);
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	60 e2       	ldi	r22, 0x20	; 32
    3d60:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		
		ptr_book = ptr_book -> NEXT_BOOK;
    3d64:	e0 91 b8 03 	lds	r30, 0x03B8
    3d68:	f0 91 b9 03 	lds	r31, 0x03B9
    3d6c:	86 81       	ldd	r24, Z+6	; 0x06
    3d6e:	97 81       	ldd	r25, Z+7	; 0x07
    3d70:	90 93 b9 03 	sts	0x03B9, r25
    3d74:	80 93 b8 03 	sts	0x03B8, r24
	}
	while(ptr_book != NULL);
    3d78:	80 91 b8 03 	lds	r24, 0x03B8
    3d7c:	90 91 b9 03 	lds	r25, 0x03B9
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	09 f0       	breq	.+2      	; 0x3d86 <BOOKS_show+0x392>
    3d84:	d6 ce       	rjmp	.-596    	; 0x3b32 <BOOKS_show+0x13e>
	
	
	ptr_book = root_book;
    3d86:	80 91 b6 03 	lds	r24, 0x03B6
    3d8a:	90 91 b7 03 	lds	r25, 0x03B7
    3d8e:	90 93 b9 03 	sts	0x03B9, r25
    3d92:	80 93 b8 03 	sts	0x03B8, r24

	return true;
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	8b a7       	std	Y+43, r24	; 0x2b
    3d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    3d9c:	ab 96       	adiw	r28, 0x2b	; 43
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	08 95       	ret

00003dae <BOOKS_COPIES_DECAY>:


// Incase of borrow state
bool BOOKS_COPIES_DECAY(void)
{
    3dae:	df 93       	push	r29
    3db0:	cf 93       	push	r28
    3db2:	0f 92       	push	r0
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
	if(book_to_decay -> COPIES > 0)
    3db8:	e0 91 ba 03 	lds	r30, 0x03BA
    3dbc:	f0 91 bb 03 	lds	r31, 0x03BB
    3dc0:	85 81       	ldd	r24, Z+5	; 0x05
    3dc2:	88 23       	and	r24, r24
    3dc4:	81 f0       	breq	.+32     	; 0x3de6 <BOOKS_COPIES_DECAY+0x38>
	{
		// Indication for success
		book_to_decay -> COPIES = book_to_decay -> COPIES - 1;
    3dc6:	a0 91 ba 03 	lds	r26, 0x03BA
    3dca:	b0 91 bb 03 	lds	r27, 0x03BB
    3dce:	e0 91 ba 03 	lds	r30, 0x03BA
    3dd2:	f0 91 bb 03 	lds	r31, 0x03BB
    3dd6:	85 81       	ldd	r24, Z+5	; 0x05
    3dd8:	81 50       	subi	r24, 0x01	; 1
    3dda:	15 96       	adiw	r26, 0x05	; 5
    3ddc:	8c 93       	st	X, r24
    3dde:	15 97       	sbiw	r26, 0x05	; 5
		return 1;
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	89 83       	std	Y+1, r24	; 0x01
    3de4:	01 c0       	rjmp	.+2      	; 0x3de8 <BOOKS_COPIES_DECAY+0x3a>
	}
	
	else
	{
		// INvalid number of copies
		return 0;
    3de6:	19 82       	std	Y+1, r1	; 0x01
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
	}

	return 0;

}
    3dea:	0f 90       	pop	r0
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	08 95       	ret

00003df2 <BOOKS_COPIES_INCREASE>:

// Incase of return state
bool BOOKS_COPIES_INCREASE(void)
{
    3df2:	df 93       	push	r29
    3df4:	cf 93       	push	r28
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
	book_to_decay -> COPIES = book_to_decay -> COPIES + 1;
    3dfa:	a0 91 ba 03 	lds	r26, 0x03BA
    3dfe:	b0 91 bb 03 	lds	r27, 0x03BB
    3e02:	e0 91 ba 03 	lds	r30, 0x03BA
    3e06:	f0 91 bb 03 	lds	r31, 0x03BB
    3e0a:	85 81       	ldd	r24, Z+5	; 0x05
    3e0c:	8f 5f       	subi	r24, 0xFF	; 255
    3e0e:	15 96       	adiw	r26, 0x05	; 5
    3e10:	8c 93       	st	X, r24
    3e12:	15 97       	sbiw	r26, 0x05	; 5
	return 1;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
}
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <CompareString>:


bool CompareString(char *str1, char* str2)
{
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	27 97       	sbiw	r28, 0x07	; 7
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	9c 83       	std	Y+4, r25	; 0x04
    3e32:	8b 83       	std	Y+3, r24	; 0x03
    3e34:	7e 83       	std	Y+6, r23	; 0x06
    3e36:	6d 83       	std	Y+5, r22	; 0x05
	u8 equal = 0;
    3e38:	1a 82       	std	Y+2, r1	; 0x02
	equal = LengthString(str1, str2);
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3e:	2d 81       	ldd	r18, Y+5	; 0x05
    3e40:	3e 81       	ldd	r19, Y+6	; 0x06
    3e42:	b9 01       	movw	r22, r18
    3e44:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <LengthString>
    3e48:	8a 83       	std	Y+2, r24	; 0x02
	if(equal)
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	88 23       	and	r24, r24
    3e4e:	49 f1       	breq	.+82     	; 0x3ea2 <CompareString+0x86>
	{
		for(u8 i = 0; str1[i] != '\0'; i++)
    3e50:	19 82       	std	Y+1, r1	; 0x01
    3e52:	19 c0       	rjmp	.+50     	; 0x3e86 <CompareString+0x6a>
		{
			if(str1[i] != str2[i])
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	28 2f       	mov	r18, r24
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5e:	fc 01       	movw	r30, r24
    3e60:	e2 0f       	add	r30, r18
    3e62:	f3 1f       	adc	r31, r19
    3e64:	40 81       	ld	r20, Z
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	28 2f       	mov	r18, r24
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e70:	fc 01       	movw	r30, r24
    3e72:	e2 0f       	add	r30, r18
    3e74:	f3 1f       	adc	r31, r19
    3e76:	80 81       	ld	r24, Z
    3e78:	48 17       	cp	r20, r24
    3e7a:	11 f0       	breq	.+4      	; 0x3e80 <CompareString+0x64>
				return false;
    3e7c:	1f 82       	std	Y+7, r1	; 0x07
    3e7e:	12 c0       	rjmp	.+36     	; 0x3ea4 <CompareString+0x88>
{
	u8 equal = 0;
	equal = LengthString(str1, str2);
	if(equal)
	{
		for(u8 i = 0; str1[i] != '\0'; i++)
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	8f 5f       	subi	r24, 0xFF	; 255
    3e84:	89 83       	std	Y+1, r24	; 0x01
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e90:	fc 01       	movw	r30, r24
    3e92:	e2 0f       	add	r30, r18
    3e94:	f3 1f       	adc	r31, r19
    3e96:	80 81       	ld	r24, Z
    3e98:	88 23       	and	r24, r24
    3e9a:	e1 f6       	brne	.-72     	; 0x3e54 <CompareString+0x38>
		{
			if(str1[i] != str2[i])
				return false;
		}
		return true;
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	8f 83       	std	Y+7, r24	; 0x07
    3ea0:	01 c0       	rjmp	.+2      	; 0x3ea4 <CompareString+0x88>
	}
	return false;
    3ea2:	1f 82       	std	Y+7, r1	; 0x07
    3ea4:	8f 81       	ldd	r24, Y+7	; 0x07

}
    3ea6:	27 96       	adiw	r28, 0x07	; 7
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	cf 91       	pop	r28
    3eb4:	df 91       	pop	r29
    3eb6:	08 95       	ret

00003eb8 <LengthString>:


u8 LengthString(char *str1, char *str2)
{
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	27 97       	sbiw	r28, 0x07	; 7
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	9c 83       	std	Y+4, r25	; 0x04
    3ece:	8b 83       	std	Y+3, r24	; 0x03
    3ed0:	7e 83       	std	Y+6, r23	; 0x06
    3ed2:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, k = 0;
    3ed4:	1a 82       	std	Y+2, r1	; 0x02
    3ed6:	19 82       	std	Y+1, r1	; 0x01
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <LengthString+0x28>
	while(str1[i] != '\0')
	{
		i++;
    3eda:	8a 81       	ldd	r24, Y+2	; 0x02
    3edc:	8f 5f       	subi	r24, 0xFF	; 255
    3ede:	8a 83       	std	Y+2, r24	; 0x02


u8 LengthString(char *str1, char *str2)
{
	u8 i = 0, k = 0;
	while(str1[i] != '\0')
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	28 2f       	mov	r18, r24
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eea:	fc 01       	movw	r30, r24
    3eec:	e2 0f       	add	r30, r18
    3eee:	f3 1f       	adc	r31, r19
    3ef0:	80 81       	ld	r24, Z
    3ef2:	88 23       	and	r24, r24
    3ef4:	91 f7       	brne	.-28     	; 0x3eda <LengthString+0x22>
    3ef6:	03 c0       	rjmp	.+6      	; 0x3efe <LengthString+0x46>
	{
		i++;
	}
	while(str2[k] != '\0')
	{
		k++;
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	8f 5f       	subi	r24, 0xFF	; 255
    3efc:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0, k = 0;
	while(str1[i] != '\0')
	{
		i++;
	}
	while(str2[k] != '\0')
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	28 2f       	mov	r18, r24
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	8d 81       	ldd	r24, Y+5	; 0x05
    3f06:	9e 81       	ldd	r25, Y+6	; 0x06
    3f08:	fc 01       	movw	r30, r24
    3f0a:	e2 0f       	add	r30, r18
    3f0c:	f3 1f       	adc	r31, r19
    3f0e:	80 81       	ld	r24, Z
    3f10:	88 23       	and	r24, r24
    3f12:	91 f7       	brne	.-28     	; 0x3ef8 <LengthString+0x40>
	{
		k++;
	}

	if(k == i)
    3f14:	99 81       	ldd	r25, Y+1	; 0x01
    3f16:	8a 81       	ldd	r24, Y+2	; 0x02
    3f18:	98 17       	cp	r25, r24
    3f1a:	19 f4       	brne	.+6      	; 0x3f22 <LengthString+0x6a>
	{
		return true;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	8f 83       	std	Y+7, r24	; 0x07
    3f20:	01 c0       	rjmp	.+2      	; 0x3f24 <LengthString+0x6c>
	}
	return false;
    3f22:	1f 82       	std	Y+7, r1	; 0x07
    3f24:	8f 81       	ldd	r24, Y+7	; 0x07

}
    3f26:	27 96       	adiw	r28, 0x07	; 7
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	cd bf       	out	0x3d, r28	; 61
    3f32:	cf 91       	pop	r28
    3f34:	df 91       	pop	r29
    3f36:	08 95       	ret

00003f38 <LinkedList_vidInitialize>:


/********************************* READY *********************************/
// Initialize members list
void LinkedList_vidInitialize(void)
{
    3f38:	df 93       	push	r29
    3f3a:	cf 93       	push	r28
    3f3c:	00 d0       	rcall	.+0      	; 0x3f3e <LinkedList_vidInitialize+0x6>
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
	// Initializing list
	root_member = malloc(sizeof(members));
    3f42:	8c e0       	ldi	r24, 0x0C	; 12
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    3f4a:	90 93 bf 03 	sts	0x03BF, r25
    3f4e:	80 93 be 03 	sts	0x03BE, r24
	root_member -> NAME_STRUCT = NULL;
    3f52:	e0 91 be 03 	lds	r30, 0x03BE
    3f56:	f0 91 bf 03 	lds	r31, 0x03BF
    3f5a:	11 82       	std	Z+1, r1	; 0x01
    3f5c:	10 82       	st	Z, r1
	root_member -> NEXT_STRUCT	= NULL;
    3f5e:	e0 91 be 03 	lds	r30, 0x03BE
    3f62:	f0 91 bf 03 	lds	r31, 0x03BF
    3f66:	13 86       	std	Z+11, r1	; 0x0b
    3f68:	12 86       	std	Z+10, r1	; 0x0a
	root_member -> ID_STRUCT = NULL;
    3f6a:	e0 91 be 03 	lds	r30, 0x03BE
    3f6e:	f0 91 bf 03 	lds	r31, 0x03BF
    3f72:	14 82       	std	Z+4, r1	; 0x04
    3f74:	13 82       	std	Z+3, r1	; 0x03
	root_member -> INDEX_STRUCT = 0;
    3f76:	e0 91 be 03 	lds	r30, 0x03BE
    3f7a:	f0 91 bf 03 	lds	r31, 0x03BF
    3f7e:	12 82       	std	Z+2, r1	; 0x02
	for(int i = 0; i < AVAILABLE_SHARES; i++)
    3f80:	1a 82       	std	Y+2, r1	; 0x02
    3f82:	19 82       	std	Y+1, r1	; 0x01
    3f84:	10 c0       	rjmp	.+32     	; 0x3fa6 <LinkedList_vidInitialize+0x6e>
	{
		root_member -> MEMBER_CARD_BOOKS[i] = 0;
    3f86:	20 91 be 03 	lds	r18, 0x03BE
    3f8a:	30 91 bf 03 	lds	r19, 0x03BF
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	82 0f       	add	r24, r18
    3f94:	93 1f       	adc	r25, r19
    3f96:	fc 01       	movw	r30, r24
    3f98:	35 96       	adiw	r30, 0x05	; 5
    3f9a:	10 82       	st	Z, r1
	root_member = malloc(sizeof(members));
	root_member -> NAME_STRUCT = NULL;
	root_member -> NEXT_STRUCT	= NULL;
	root_member -> ID_STRUCT = NULL;
	root_member -> INDEX_STRUCT = 0;
	for(int i = 0; i < AVAILABLE_SHARES; i++)
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa0:	01 96       	adiw	r24, 0x01	; 1
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3faa:	85 30       	cpi	r24, 0x05	; 5
    3fac:	91 05       	cpc	r25, r1
    3fae:	5c f3       	brlt	.-42     	; 0x3f86 <LinkedList_vidInitialize+0x4e>
	{
		root_member -> MEMBER_CARD_BOOKS[i] = 0;
	}
	
	ptr_member = root_member;
    3fb0:	80 91 be 03 	lds	r24, 0x03BE
    3fb4:	90 91 bf 03 	lds	r25, 0x03BF
    3fb8:	90 93 bd 03 	sts	0x03BD, r25
    3fbc:	80 93 bc 03 	sts	0x03BC, r24
}
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <LinkedList_vidInsertion>:


/********************************* READY *********************************/
// Insertion for values from user
bool LinkedList_vidInsertion(char *id, char *name)			// if still, you can change to u8
{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	6d 97       	sbiw	r28, 0x1d	; 29
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	9a 8f       	std	Y+26, r25	; 0x1a
    3fe0:	89 8f       	std	Y+25, r24	; 0x19
    3fe2:	7c 8f       	std	Y+28, r23	; 0x1c
    3fe4:	6b 8f       	std	Y+27, r22	; 0x1b
	int k = 0, i = 0, j = 0;
    3fe6:	18 8e       	std	Y+24, r1	; 0x18
    3fe8:	1f 8a       	std	Y+23, r1	; 0x17
    3fea:	1e 8a       	std	Y+22, r1	; 0x16
    3fec:	1d 8a       	std	Y+21, r1	; 0x15
    3fee:	1c 8a       	std	Y+20, r1	; 0x14
    3ff0:	1b 8a       	std	Y+19, r1	; 0x13
	
	// Pointer to check for repeated IDs
	members *tmp_detect = NULL;
    3ff2:	1a 8a       	std	Y+18, r1	; 0x12
    3ff4:	19 8a       	std	Y+17, r1	; 0x11
	tmp_detect = search(id, 0);
    3ff6:	89 8d       	ldd	r24, Y+25	; 0x19
    3ff8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	0e 94 c4 21 	call	0x4388	; 0x4388 <search>
    4000:	9a 8b       	std	Y+18, r25	; 0x12
    4002:	89 8b       	std	Y+17, r24	; 0x11
	
	// Invalid ID
	if(tmp_detect)
    4004:	89 89       	ldd	r24, Y+17	; 0x11
    4006:	9a 89       	ldd	r25, Y+18	; 0x12
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	31 f0       	breq	.+12     	; 0x4018 <LinkedList_vidInsertion+0x4e>
	{
		LCD_String("ERROR_INSERTION!");
    400c:	84 e1       	ldi	r24, 0x14	; 20
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		return false;
    4014:	1d 8e       	std	Y+29, r1	; 0x1d
    4016:	49 c1       	rjmp	.+658    	; 0x42aa <LinkedList_vidInsertion+0x2e0>
	}
	
	
	// Inserting sequence initialized
	ptr_member = root_member;
    4018:	80 91 be 03 	lds	r24, 0x03BE
    401c:	90 91 bf 03 	lds	r25, 0x03BF
    4020:	90 93 bd 03 	sts	0x03BD, r25
    4024:	80 93 bc 03 	sts	0x03BC, r24
	members *tmp = malloc(sizeof(members));
    4028:	8c e0       	ldi	r24, 0x0C	; 12
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    4030:	98 8b       	std	Y+16, r25	; 0x10
    4032:	8f 87       	std	Y+15, r24	; 0x0f
	
	// For future reference
	NoOfMembers++;
    4034:	80 91 b3 03 	lds	r24, 0x03B3
    4038:	8f 5f       	subi	r24, 0xFF	; 255
    403a:	80 93 b3 03 	sts	0x03B3, r24
	INDEX_MEMBERS_GLOBAL++;
    403e:	80 91 b5 03 	lds	r24, 0x03B5
    4042:	8f 5f       	subi	r24, 0xFF	; 255
    4044:	80 93 b5 03 	sts	0x03B5, r24
    4048:	05 c0       	rjmp	.+10     	; 0x4054 <LinkedList_vidInsertion+0x8a>
	

	// Get member's name length
	while(name[k] != '\0')
	{
		k++;
    404a:	8f 89       	ldd	r24, Y+23	; 0x17
    404c:	98 8d       	ldd	r25, Y+24	; 0x18
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	98 8f       	std	Y+24, r25	; 0x18
    4052:	8f 8b       	std	Y+23, r24	; 0x17
	INDEX_MEMBERS_GLOBAL++;

	

	// Get member's name length
	while(name[k] != '\0')
    4054:	2f 89       	ldd	r18, Y+23	; 0x17
    4056:	38 8d       	ldd	r19, Y+24	; 0x18
    4058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    405a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    405c:	fc 01       	movw	r30, r24
    405e:	e2 0f       	add	r30, r18
    4060:	f3 1f       	adc	r31, r19
    4062:	80 81       	ld	r24, Z
    4064:	88 23       	and	r24, r24
    4066:	89 f7       	brne	.-30     	; 0x404a <LinkedList_vidInsertion+0x80>
	{
		k++;
	}
	
	tmp -> NAME_STRUCT = malloc(k+1 *sizeof(char));
    4068:	8f 89       	ldd	r24, Y+23	; 0x17
    406a:	98 8d       	ldd	r25, Y+24	; 0x18
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    4072:	ef 85       	ldd	r30, Y+15	; 0x0f
    4074:	f8 89       	ldd	r31, Y+16	; 0x10
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	80 83       	st	Z, r24
    407a:	05 c0       	rjmp	.+10     	; 0x4086 <LinkedList_vidInsertion+0xbc>


	// Get member's id length
	while(id[j] != '\0')
	{
		j++;
    407c:	8b 89       	ldd	r24, Y+19	; 0x13
    407e:	9c 89       	ldd	r25, Y+20	; 0x14
    4080:	01 96       	adiw	r24, 0x01	; 1
    4082:	9c 8b       	std	Y+20, r25	; 0x14
    4084:	8b 8b       	std	Y+19, r24	; 0x13
	
	tmp -> NAME_STRUCT = malloc(k+1 *sizeof(char));


	// Get member's id length
	while(id[j] != '\0')
    4086:	2b 89       	ldd	r18, Y+19	; 0x13
    4088:	3c 89       	ldd	r19, Y+20	; 0x14
    408a:	89 8d       	ldd	r24, Y+25	; 0x19
    408c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    408e:	fc 01       	movw	r30, r24
    4090:	e2 0f       	add	r30, r18
    4092:	f3 1f       	adc	r31, r19
    4094:	80 81       	ld	r24, Z
    4096:	88 23       	and	r24, r24
    4098:	89 f7       	brne	.-30     	; 0x407c <LinkedList_vidInsertion+0xb2>
	{
		j++;
	}

	tmp -> ID_STRUCT = malloc(j+1 *sizeof(char));
    409a:	8b 89       	ldd	r24, Y+19	; 0x13
    409c:	9c 89       	ldd	r25, Y+20	; 0x14
    409e:	01 96       	adiw	r24, 0x01	; 1
    40a0:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    40a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    40a6:	f8 89       	ldd	r31, Y+16	; 0x10
    40a8:	94 83       	std	Z+4, r25	; 0x04
    40aa:	83 83       	std	Z+3, r24	; 0x03


	// Insert patient details
	tmp -> NEXT_STRUCT = ptr_member -> NEXT_STRUCT;
    40ac:	e0 91 bc 03 	lds	r30, 0x03BC
    40b0:	f0 91 bd 03 	lds	r31, 0x03BD
    40b4:	82 85       	ldd	r24, Z+10	; 0x0a
    40b6:	93 85       	ldd	r25, Z+11	; 0x0b
    40b8:	ef 85       	ldd	r30, Y+15	; 0x0f
    40ba:	f8 89       	ldd	r31, Y+16	; 0x10
    40bc:	93 87       	std	Z+11, r25	; 0x0b
    40be:	82 87       	std	Z+10, r24	; 0x0a

	tmp -> INDEX_STRUCT = INDEX_MEMBERS_GLOBAL;
    40c0:	80 91 b5 03 	lds	r24, 0x03B5
    40c4:	ef 85       	ldd	r30, Y+15	; 0x0f
    40c6:	f8 89       	ldd	r31, Y+16	; 0x10
    40c8:	82 83       	std	Z+2, r24	; 0x02
	


	for(i = 0; i < k ; i++)
    40ca:	1e 8a       	std	Y+22, r1	; 0x16
    40cc:	1d 8a       	std	Y+21, r1	; 0x15
    40ce:	17 c0       	rjmp	.+46     	; 0x40fe <LinkedList_vidInsertion+0x134>
	{
		tmp ->  NAME_STRUCT[i] = name[i];
    40d0:	ef 85       	ldd	r30, Y+15	; 0x0f
    40d2:	f8 89       	ldd	r31, Y+16	; 0x10
    40d4:	20 81       	ld	r18, Z
    40d6:	31 81       	ldd	r19, Z+1	; 0x01
    40d8:	8d 89       	ldd	r24, Y+21	; 0x15
    40da:	9e 89       	ldd	r25, Y+22	; 0x16
    40dc:	d9 01       	movw	r26, r18
    40de:	a8 0f       	add	r26, r24
    40e0:	b9 1f       	adc	r27, r25
    40e2:	2d 89       	ldd	r18, Y+21	; 0x15
    40e4:	3e 89       	ldd	r19, Y+22	; 0x16
    40e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40ea:	fc 01       	movw	r30, r24
    40ec:	e2 0f       	add	r30, r18
    40ee:	f3 1f       	adc	r31, r19
    40f0:	80 81       	ld	r24, Z
    40f2:	8c 93       	st	X, r24

	tmp -> INDEX_STRUCT = INDEX_MEMBERS_GLOBAL;
	


	for(i = 0; i < k ; i++)
    40f4:	8d 89       	ldd	r24, Y+21	; 0x15
    40f6:	9e 89       	ldd	r25, Y+22	; 0x16
    40f8:	01 96       	adiw	r24, 0x01	; 1
    40fa:	9e 8b       	std	Y+22, r25	; 0x16
    40fc:	8d 8b       	std	Y+21, r24	; 0x15
    40fe:	2d 89       	ldd	r18, Y+21	; 0x15
    4100:	3e 89       	ldd	r19, Y+22	; 0x16
    4102:	8f 89       	ldd	r24, Y+23	; 0x17
    4104:	98 8d       	ldd	r25, Y+24	; 0x18
    4106:	28 17       	cp	r18, r24
    4108:	39 07       	cpc	r19, r25
    410a:	14 f3       	brlt	.-60     	; 0x40d0 <LinkedList_vidInsertion+0x106>
	{
		tmp ->  NAME_STRUCT[i] = name[i];
	}
	tmp ->  NAME_STRUCT[i] = '\0';
    410c:	ef 85       	ldd	r30, Y+15	; 0x0f
    410e:	f8 89       	ldd	r31, Y+16	; 0x10
    4110:	20 81       	ld	r18, Z
    4112:	31 81       	ldd	r19, Z+1	; 0x01
    4114:	8d 89       	ldd	r24, Y+21	; 0x15
    4116:	9e 89       	ldd	r25, Y+22	; 0x16
    4118:	f9 01       	movw	r30, r18
    411a:	e8 0f       	add	r30, r24
    411c:	f9 1f       	adc	r31, r25
    411e:	10 82       	st	Z, r1
	

	for(i = 0; i < j ; i++)
    4120:	1e 8a       	std	Y+22, r1	; 0x16
    4122:	1d 8a       	std	Y+21, r1	; 0x15
    4124:	17 c0       	rjmp	.+46     	; 0x4154 <LinkedList_vidInsertion+0x18a>
	{
		tmp ->  ID_STRUCT[i] = id[i];
    4126:	ef 85       	ldd	r30, Y+15	; 0x0f
    4128:	f8 89       	ldd	r31, Y+16	; 0x10
    412a:	23 81       	ldd	r18, Z+3	; 0x03
    412c:	34 81       	ldd	r19, Z+4	; 0x04
    412e:	8d 89       	ldd	r24, Y+21	; 0x15
    4130:	9e 89       	ldd	r25, Y+22	; 0x16
    4132:	d9 01       	movw	r26, r18
    4134:	a8 0f       	add	r26, r24
    4136:	b9 1f       	adc	r27, r25
    4138:	2d 89       	ldd	r18, Y+21	; 0x15
    413a:	3e 89       	ldd	r19, Y+22	; 0x16
    413c:	89 8d       	ldd	r24, Y+25	; 0x19
    413e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4140:	fc 01       	movw	r30, r24
    4142:	e2 0f       	add	r30, r18
    4144:	f3 1f       	adc	r31, r19
    4146:	80 81       	ld	r24, Z
    4148:	8c 93       	st	X, r24
		tmp ->  NAME_STRUCT[i] = name[i];
	}
	tmp ->  NAME_STRUCT[i] = '\0';
	

	for(i = 0; i < j ; i++)
    414a:	8d 89       	ldd	r24, Y+21	; 0x15
    414c:	9e 89       	ldd	r25, Y+22	; 0x16
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	9e 8b       	std	Y+22, r25	; 0x16
    4152:	8d 8b       	std	Y+21, r24	; 0x15
    4154:	2d 89       	ldd	r18, Y+21	; 0x15
    4156:	3e 89       	ldd	r19, Y+22	; 0x16
    4158:	8b 89       	ldd	r24, Y+19	; 0x13
    415a:	9c 89       	ldd	r25, Y+20	; 0x14
    415c:	28 17       	cp	r18, r24
    415e:	39 07       	cpc	r19, r25
    4160:	14 f3       	brlt	.-60     	; 0x4126 <LinkedList_vidInsertion+0x15c>
	{
		tmp ->  ID_STRUCT[i] = id[i];
	}
	tmp ->  ID_STRUCT[i] = '\0';
    4162:	ef 85       	ldd	r30, Y+15	; 0x0f
    4164:	f8 89       	ldd	r31, Y+16	; 0x10
    4166:	23 81       	ldd	r18, Z+3	; 0x03
    4168:	34 81       	ldd	r19, Z+4	; 0x04
    416a:	8d 89       	ldd	r24, Y+21	; 0x15
    416c:	9e 89       	ldd	r25, Y+22	; 0x16
    416e:	f9 01       	movw	r30, r18
    4170:	e8 0f       	add	r30, r24
    4172:	f9 1f       	adc	r31, r25
    4174:	10 82       	st	Z, r1


	for(i = 0; i < AVAILABLE_SHARES; i++)
    4176:	1e 8a       	std	Y+22, r1	; 0x16
    4178:	1d 8a       	std	Y+21, r1	; 0x15
    417a:	0e c0       	rjmp	.+28     	; 0x4198 <LinkedList_vidInsertion+0x1ce>
	{
		tmp -> MEMBER_CARD_BOOKS[i] = 0;
    417c:	2d 89       	ldd	r18, Y+21	; 0x15
    417e:	3e 89       	ldd	r19, Y+22	; 0x16
    4180:	8f 85       	ldd	r24, Y+15	; 0x0f
    4182:	98 89       	ldd	r25, Y+16	; 0x10
    4184:	82 0f       	add	r24, r18
    4186:	93 1f       	adc	r25, r19
    4188:	fc 01       	movw	r30, r24
    418a:	35 96       	adiw	r30, 0x05	; 5
    418c:	10 82       	st	Z, r1
		tmp ->  ID_STRUCT[i] = id[i];
	}
	tmp ->  ID_STRUCT[i] = '\0';


	for(i = 0; i < AVAILABLE_SHARES; i++)
    418e:	8d 89       	ldd	r24, Y+21	; 0x15
    4190:	9e 89       	ldd	r25, Y+22	; 0x16
    4192:	01 96       	adiw	r24, 0x01	; 1
    4194:	9e 8b       	std	Y+22, r25	; 0x16
    4196:	8d 8b       	std	Y+21, r24	; 0x15
    4198:	8d 89       	ldd	r24, Y+21	; 0x15
    419a:	9e 89       	ldd	r25, Y+22	; 0x16
    419c:	85 30       	cpi	r24, 0x05	; 5
    419e:	91 05       	cpc	r25, r1
    41a0:	6c f3       	brlt	.-38     	; 0x417c <LinkedList_vidInsertion+0x1b2>
		tmp -> MEMBER_CARD_BOOKS[i] = 0;
	}
	

	// Update list
	ptr_member -> NEXT_STRUCT = tmp;
    41a2:	e0 91 bc 03 	lds	r30, 0x03BC
    41a6:	f0 91 bd 03 	lds	r31, 0x03BD
    41aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ac:	98 89       	ldd	r25, Y+16	; 0x10
    41ae:	93 87       	std	Z+11, r25	; 0x0b
    41b0:	82 87       	std	Z+10, r24	; 0x0a

	// Indicate success
	LCD_String("MEMBER INSERTED");
    41b2:	85 e2       	ldi	r24, 0x25	; 37
    41b4:	91 e0       	ldi	r25, 0x01	; 1
    41b6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	aa ef       	ldi	r26, 0xFA	; 250
    41c0:	b3 e4       	ldi	r27, 0x43	; 67
    41c2:	8b 87       	std	Y+11, r24	; 0x0b
    41c4:	9c 87       	std	Y+12, r25	; 0x0c
    41c6:	ad 87       	std	Y+13, r26	; 0x0d
    41c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    41cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	4a ef       	ldi	r20, 0xFA	; 250
    41d8:	54 e4       	ldi	r21, 0x44	; 68
    41da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8f 83       	std	Y+7, r24	; 0x07
    41e4:	98 87       	std	Y+8, r25	; 0x08
    41e6:	a9 87       	std	Y+9, r26	; 0x09
    41e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41ea:	6f 81       	ldd	r22, Y+7	; 0x07
    41ec:	78 85       	ldd	r23, Y+8	; 0x08
    41ee:	89 85       	ldd	r24, Y+9	; 0x09
    41f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	40 e8       	ldi	r20, 0x80	; 128
    41f8:	5f e3       	ldi	r21, 0x3F	; 63
    41fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41fe:	88 23       	and	r24, r24
    4200:	2c f4       	brge	.+10     	; 0x420c <LinkedList_vidInsertion+0x242>
		__ticks = 1;
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	9e 83       	std	Y+6, r25	; 0x06
    4208:	8d 83       	std	Y+5, r24	; 0x05
    420a:	3f c0       	rjmp	.+126    	; 0x428a <LinkedList_vidInsertion+0x2c0>
	else if (__tmp > 65535)
    420c:	6f 81       	ldd	r22, Y+7	; 0x07
    420e:	78 85       	ldd	r23, Y+8	; 0x08
    4210:	89 85       	ldd	r24, Y+9	; 0x09
    4212:	9a 85       	ldd	r25, Y+10	; 0x0a
    4214:	20 e0       	ldi	r18, 0x00	; 0
    4216:	3f ef       	ldi	r19, 0xFF	; 255
    4218:	4f e7       	ldi	r20, 0x7F	; 127
    421a:	57 e4       	ldi	r21, 0x47	; 71
    421c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4220:	18 16       	cp	r1, r24
    4222:	4c f5       	brge	.+82     	; 0x4276 <LinkedList_vidInsertion+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4224:	6b 85       	ldd	r22, Y+11	; 0x0b
    4226:	7c 85       	ldd	r23, Y+12	; 0x0c
    4228:	8d 85       	ldd	r24, Y+13	; 0x0d
    422a:	9e 85       	ldd	r25, Y+14	; 0x0e
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e2       	ldi	r20, 0x20	; 32
    4232:	51 e4       	ldi	r21, 0x41	; 65
    4234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	bc 01       	movw	r22, r24
    423e:	cd 01       	movw	r24, r26
    4240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	9e 83       	std	Y+6, r25	; 0x06
    424a:	8d 83       	std	Y+5, r24	; 0x05
    424c:	0f c0       	rjmp	.+30     	; 0x426c <LinkedList_vidInsertion+0x2a2>
    424e:	88 ec       	ldi	r24, 0xC8	; 200
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	9c 83       	std	Y+4, r25	; 0x04
    4254:	8b 83       	std	Y+3, r24	; 0x03
    4256:	8b 81       	ldd	r24, Y+3	; 0x03
    4258:	9c 81       	ldd	r25, Y+4	; 0x04
    425a:	01 97       	sbiw	r24, 0x01	; 1
    425c:	f1 f7       	brne	.-4      	; 0x425a <LinkedList_vidInsertion+0x290>
    425e:	9c 83       	std	Y+4, r25	; 0x04
    4260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4262:	8d 81       	ldd	r24, Y+5	; 0x05
    4264:	9e 81       	ldd	r25, Y+6	; 0x06
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	9e 83       	std	Y+6, r25	; 0x06
    426a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	00 97       	sbiw	r24, 0x00	; 0
    4272:	69 f7       	brne	.-38     	; 0x424e <LinkedList_vidInsertion+0x284>
    4274:	14 c0       	rjmp	.+40     	; 0x429e <LinkedList_vidInsertion+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4276:	6f 81       	ldd	r22, Y+7	; 0x07
    4278:	78 85       	ldd	r23, Y+8	; 0x08
    427a:	89 85       	ldd	r24, Y+9	; 0x09
    427c:	9a 85       	ldd	r25, Y+10	; 0x0a
    427e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4282:	dc 01       	movw	r26, r24
    4284:	cb 01       	movw	r24, r22
    4286:	9e 83       	std	Y+6, r25	; 0x06
    4288:	8d 83       	std	Y+5, r24	; 0x05
    428a:	8d 81       	ldd	r24, Y+5	; 0x05
    428c:	9e 81       	ldd	r25, Y+6	; 0x06
    428e:	9a 83       	std	Y+2, r25	; 0x02
    4290:	89 83       	std	Y+1, r24	; 0x01
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	9a 81       	ldd	r25, Y+2	; 0x02
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	f1 f7       	brne	.-4      	; 0x4296 <LinkedList_vidInsertion+0x2cc>
    429a:	9a 83       	std	Y+2, r25	; 0x02
    429c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearOnDemand(1, 32);
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	60 e2       	ldi	r22, 0x20	; 32
    42a2:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
	return true;
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	8d 8f       	std	Y+29, r24	; 0x1d
    42aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    42ac:	6d 96       	adiw	r28, 0x1d	; 29
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	f8 94       	cli
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	cd bf       	out	0x3d, r28	; 61
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <LinkedList_u8DeleteEntire>:



/********************************* READY *********************************/
char LinkedList_u8DeleteEntire(void)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <LinkedList_u8DeleteEntire+0x6>
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
	// Buffer to save the previous condition of ptr
	members *last_before_stack = NULL;
    42c8:	1a 82       	std	Y+2, r1	; 0x02
    42ca:	19 82       	std	Y+1, r1	; 0x01

	// Checking on the next field
	if(ptr_member -> NEXT_STRUCT != NULL)
    42cc:	e0 91 bc 03 	lds	r30, 0x03BC
    42d0:	f0 91 bd 03 	lds	r31, 0x03BD
    42d4:	82 85       	ldd	r24, Z+10	; 0x0a
    42d6:	93 85       	ldd	r25, Z+11	; 0x0b
    42d8:	00 97       	sbiw	r24, 0x00	; 0
    42da:	c1 f0       	breq	.+48     	; 0x430c <LinkedList_u8DeleteEntire+0x4e>
	{
		last_before_stack = ptr_member;
    42dc:	80 91 bc 03 	lds	r24, 0x03BC
    42e0:	90 91 bd 03 	lds	r25, 0x03BD
    42e4:	9a 83       	std	Y+2, r25	; 0x02
    42e6:	89 83       	std	Y+1, r24	; 0x01
		ptr_member = ptr_member -> NEXT_STRUCT;
    42e8:	e0 91 bc 03 	lds	r30, 0x03BC
    42ec:	f0 91 bd 03 	lds	r31, 0x03BD
    42f0:	82 85       	ldd	r24, Z+10	; 0x0a
    42f2:	93 85       	ldd	r25, Z+11	; 0x0b
    42f4:	90 93 bd 03 	sts	0x03BD, r25
    42f8:	80 93 bc 03 	sts	0x03BC, r24
		LinkedList_u8DeleteEntire();
    42fc:	0e 94 5f 21 	call	0x42be	; 0x42be <LinkedList_u8DeleteEntire>
		ptr_member = last_before_stack;
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	90 93 bd 03 	sts	0x03BD, r25
    4308:	80 93 bc 03 	sts	0x03BC, r24
	}

	// free current node and return
	free(ptr_member);
    430c:	80 91 bc 03 	lds	r24, 0x03BC
    4310:	90 91 bd 03 	lds	r25, 0x03BD
    4314:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <free>
	NoOfMembers = 0;
    4318:	10 92 b3 03 	sts	0x03B3, r1
	return 0;
    431c:	80 e0       	ldi	r24, 0x00	; 0
}
    431e:	0f 90       	pop	r0
    4320:	0f 90       	pop	r0
    4322:	cf 91       	pop	r28
    4324:	df 91       	pop	r29
    4326:	08 95       	ret

00004328 <LinkedList_vidRestart>:



void LinkedList_vidRestart (void)
{
    4328:	df 93       	push	r29
    432a:	cf 93       	push	r28
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
	restart_vip();
    4330:	0e 94 a1 21 	call	0x4342	; 0x4342 <restart_vip>
	LinkedList_u8DeleteEntire();
    4334:	0e 94 5f 21 	call	0x42be	; 0x42be <LinkedList_u8DeleteEntire>
	LinkedList_vidInitialize();
    4338:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <LinkedList_vidInitialize>
}
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <restart_vip>:


void restart_vip(void)
{
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
	ptr_member = root_member;
    434a:	80 91 be 03 	lds	r24, 0x03BE
    434e:	90 91 bf 03 	lds	r25, 0x03BF
    4352:	90 93 bd 03 	sts	0x03BD, r25
    4356:	80 93 bc 03 	sts	0x03BC, r24
}
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	08 95       	ret

00004360 <LinkedList_vidSearch>:

void LinkedList_vidSearch(char *ptr, char show)
{
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	00 d0       	rcall	.+0      	; 0x4366 <LinkedList_vidSearch+0x6>
    4366:	0f 92       	push	r0
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    436c:	9a 83       	std	Y+2, r25	; 0x02
    436e:	89 83       	std	Y+1, r24	; 0x01
    4370:	6b 83       	std	Y+3, r22	; 0x03
	search(ptr, show);
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	9a 81       	ldd	r25, Y+2	; 0x02
    4376:	6b 81       	ldd	r22, Y+3	; 0x03
    4378:	0e 94 c4 21 	call	0x4388	; 0x4388 <search>
}
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	cf 91       	pop	r28
    4384:	df 91       	pop	r29
    4386:	08 95       	ret

00004388 <search>:

// To search for a member
members *search (char *id, char OLD_BOOKS)
{
    4388:	df 93       	push	r29
    438a:	cf 93       	push	r28
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	69 97       	sbiw	r28, 0x19	; 25
    4392:	0f b6       	in	r0, 0x3f	; 63
    4394:	f8 94       	cli
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	cd bf       	out	0x3d, r28	; 61
    439c:	9e 8b       	std	Y+22, r25	; 0x16
    439e:	8d 8b       	std	Y+21, r24	; 0x15
    43a0:	6f 8b       	std	Y+23, r22	; 0x17
	// Start after the root
	ptr_member = root_member -> NEXT_STRUCT;
    43a2:	e0 91 be 03 	lds	r30, 0x03BE
    43a6:	f0 91 bf 03 	lds	r31, 0x03BF
    43aa:	82 85       	ldd	r24, Z+10	; 0x0a
    43ac:	93 85       	ldd	r25, Z+11	; 0x0b
    43ae:	90 93 bd 03 	sts	0x03BD, r25
    43b2:	80 93 bc 03 	sts	0x03BC, r24

	bool found = false;
    43b6:	1c 8a       	std	Y+20, r1	; 0x14
	
	members *tmp = NULL;
    43b8:	1b 8a       	std	Y+19, r1	; 0x13
    43ba:	1a 8a       	std	Y+18, r1	; 0x12
	

	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfMembers; i++)
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	99 8b       	std	Y+17, r25	; 0x11
    43c2:	88 8b       	std	Y+16, r24	; 0x10
    43c4:	f7 c0       	rjmp	.+494    	; 0x45b4 <search+0x22c>
	{
		if(CompareString(id, ptr_member -> ID_STRUCT))
    43c6:	e0 91 bc 03 	lds	r30, 0x03BC
    43ca:	f0 91 bd 03 	lds	r31, 0x03BD
    43ce:	23 81       	ldd	r18, Z+3	; 0x03
    43d0:	34 81       	ldd	r19, Z+4	; 0x04
    43d2:	8d 89       	ldd	r24, Y+21	; 0x15
    43d4:	9e 89       	ldd	r25, Y+22	; 0x16
    43d6:	b9 01       	movw	r22, r18
    43d8:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <CompareString>
    43dc:	88 23       	and	r24, r24
    43de:	09 f4       	brne	.+2      	; 0x43e2 <search+0x5a>
    43e0:	da c0       	rjmp	.+436    	; 0x4596 <search+0x20e>
		{
			// Write Member Name on LCD
			LCD_vidClearOnDemand(1, 32);
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	60 e2       	ldi	r22, 0x20	; 32
    43e6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
			LCD_String("NAME: ");
    43ea:	85 e3       	ldi	r24, 0x35	; 53
    43ec:	91 e0       	ldi	r25, 0x01	; 1
    43ee:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_String(ptr_member -> NAME_STRUCT);
    43f2:	e0 91 bc 03 	lds	r30, 0x03BC
    43f6:	f0 91 bd 03 	lds	r31, 0x03BD
    43fa:	80 81       	ld	r24, Z
    43fc:	91 81       	ldd	r25, Z+1	; 0x01
    43fe:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>

			// Write Member ID on LCD
			LCD_vidGoTo(1, 2);
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	62 e0       	ldi	r22, 0x02	; 2
    4406:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			LCD_String("ID: ");
    440a:	8c e3       	ldi	r24, 0x3C	; 60
    440c:	91 e0       	ldi	r25, 0x01	; 1
    440e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_String(ptr_member -> ID_STRUCT);
    4412:	e0 91 bc 03 	lds	r30, 0x03BC
    4416:	f0 91 bd 03 	lds	r31, 0x03BD
    441a:	83 81       	ldd	r24, Z+3	; 0x03
    441c:	94 81       	ldd	r25, Z+4	; 0x04
    441e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	aa ef       	ldi	r26, 0xFA	; 250
    4428:	b4 e4       	ldi	r27, 0x44	; 68
    442a:	8b 87       	std	Y+11, r24	; 0x0b
    442c:	9c 87       	std	Y+12, r25	; 0x0c
    442e:	ad 87       	std	Y+13, r26	; 0x0d
    4430:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4432:	6b 85       	ldd	r22, Y+11	; 0x0b
    4434:	7c 85       	ldd	r23, Y+12	; 0x0c
    4436:	8d 85       	ldd	r24, Y+13	; 0x0d
    4438:	9e 85       	ldd	r25, Y+14	; 0x0e
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	4a ef       	ldi	r20, 0xFA	; 250
    4440:	54 e4       	ldi	r21, 0x44	; 68
    4442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	8f 83       	std	Y+7, r24	; 0x07
    444c:	98 87       	std	Y+8, r25	; 0x08
    444e:	a9 87       	std	Y+9, r26	; 0x09
    4450:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4452:	6f 81       	ldd	r22, Y+7	; 0x07
    4454:	78 85       	ldd	r23, Y+8	; 0x08
    4456:	89 85       	ldd	r24, Y+9	; 0x09
    4458:	9a 85       	ldd	r25, Y+10	; 0x0a
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	40 e8       	ldi	r20, 0x80	; 128
    4460:	5f e3       	ldi	r21, 0x3F	; 63
    4462:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4466:	88 23       	and	r24, r24
    4468:	2c f4       	brge	.+10     	; 0x4474 <search+0xec>
		__ticks = 1;
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	9e 83       	std	Y+6, r25	; 0x06
    4470:	8d 83       	std	Y+5, r24	; 0x05
    4472:	3f c0       	rjmp	.+126    	; 0x44f2 <search+0x16a>
	else if (__tmp > 65535)
    4474:	6f 81       	ldd	r22, Y+7	; 0x07
    4476:	78 85       	ldd	r23, Y+8	; 0x08
    4478:	89 85       	ldd	r24, Y+9	; 0x09
    447a:	9a 85       	ldd	r25, Y+10	; 0x0a
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	3f ef       	ldi	r19, 0xFF	; 255
    4480:	4f e7       	ldi	r20, 0x7F	; 127
    4482:	57 e4       	ldi	r21, 0x47	; 71
    4484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4488:	18 16       	cp	r1, r24
    448a:	4c f5       	brge	.+82     	; 0x44de <search+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    448c:	6b 85       	ldd	r22, Y+11	; 0x0b
    448e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4490:	8d 85       	ldd	r24, Y+13	; 0x0d
    4492:	9e 85       	ldd	r25, Y+14	; 0x0e
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e2       	ldi	r20, 0x20	; 32
    449a:	51 e4       	ldi	r21, 0x41	; 65
    449c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	9e 83       	std	Y+6, r25	; 0x06
    44b2:	8d 83       	std	Y+5, r24	; 0x05
    44b4:	0f c0       	rjmp	.+30     	; 0x44d4 <search+0x14c>
    44b6:	88 ec       	ldi	r24, 0xC8	; 200
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	9c 83       	std	Y+4, r25	; 0x04
    44bc:	8b 83       	std	Y+3, r24	; 0x03
    44be:	8b 81       	ldd	r24, Y+3	; 0x03
    44c0:	9c 81       	ldd	r25, Y+4	; 0x04
    44c2:	01 97       	sbiw	r24, 0x01	; 1
    44c4:	f1 f7       	brne	.-4      	; 0x44c2 <search+0x13a>
    44c6:	9c 83       	std	Y+4, r25	; 0x04
    44c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ca:	8d 81       	ldd	r24, Y+5	; 0x05
    44cc:	9e 81       	ldd	r25, Y+6	; 0x06
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	9e 83       	std	Y+6, r25	; 0x06
    44d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d4:	8d 81       	ldd	r24, Y+5	; 0x05
    44d6:	9e 81       	ldd	r25, Y+6	; 0x06
    44d8:	00 97       	sbiw	r24, 0x00	; 0
    44da:	69 f7       	brne	.-38     	; 0x44b6 <search+0x12e>
    44dc:	14 c0       	rjmp	.+40     	; 0x4506 <search+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44de:	6f 81       	ldd	r22, Y+7	; 0x07
    44e0:	78 85       	ldd	r23, Y+8	; 0x08
    44e2:	89 85       	ldd	r24, Y+9	; 0x09
    44e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	9e 83       	std	Y+6, r25	; 0x06
    44f0:	8d 83       	std	Y+5, r24	; 0x05
    44f2:	8d 81       	ldd	r24, Y+5	; 0x05
    44f4:	9e 81       	ldd	r25, Y+6	; 0x06
    44f6:	9a 83       	std	Y+2, r25	; 0x02
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	9a 81       	ldd	r25, Y+2	; 0x02
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <search+0x176>
    4502:	9a 83       	std	Y+2, r25	; 0x02
    4504:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);

			// Write Member BOOK's on LCD
			LCD_vidClearOnDemand(1, 32);
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	60 e2       	ldi	r22, 0x20	; 32
    450a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

			// Don't show the books
			if(!OLD_BOOKS);
    450e:	8f 89       	ldd	r24, Y+23	; 0x17
    4510:	88 23       	and	r24, r24
    4512:	a1 f1       	breq	.+104    	; 0x457c <search+0x1f4>
			else
			{
				LCD_vidGoTo(1, 1);
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	61 e0       	ldi	r22, 0x01	; 1
    4518:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
				LCD_String("Borrowed BOOKS:");
    451c:	81 e4       	ldi	r24, 0x41	; 65
    451e:	91 e0       	ldi	r25, 0x01	; 1
    4520:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
				for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4524:	1f 86       	std	Y+15, r1	; 0x0f
    4526:	27 c0       	rjmp	.+78     	; 0x4576 <search+0x1ee>
				{
					LCD_vidGoTo(i + 1, 2);
    4528:	8f 85       	ldd	r24, Y+15	; 0x0f
    452a:	8f 5f       	subi	r24, 0xFF	; 255
    452c:	62 e0       	ldi	r22, 0x02	; 2
    452e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>

					if(!ptr_member -> MEMBER_CARD_BOOKS[i]);
    4532:	20 91 bc 03 	lds	r18, 0x03BC
    4536:	30 91 bd 03 	lds	r19, 0x03BD
    453a:	8f 85       	ldd	r24, Y+15	; 0x0f
    453c:	88 2f       	mov	r24, r24
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	82 0f       	add	r24, r18
    4542:	93 1f       	adc	r25, r19
    4544:	fc 01       	movw	r30, r24
    4546:	35 96       	adiw	r30, 0x05	; 5
    4548:	80 81       	ld	r24, Z
    454a:	88 23       	and	r24, r24
    454c:	89 f0       	breq	.+34     	; 0x4570 <search+0x1e8>
					else
					{
						BOOKS_search(0, ptr_member -> MEMBER_CARD_BOOKS[i]);
    454e:	20 91 bc 03 	lds	r18, 0x03BC
    4552:	30 91 bd 03 	lds	r19, 0x03BD
    4556:	8f 85       	ldd	r24, Y+15	; 0x0f
    4558:	88 2f       	mov	r24, r24
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	82 0f       	add	r24, r18
    455e:	93 1f       	adc	r25, r19
    4560:	fc 01       	movw	r30, r24
    4562:	35 96       	adiw	r30, 0x05	; 5
    4564:	20 81       	ld	r18, Z
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	62 2f       	mov	r22, r18
    456c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <BOOKS_search>
			if(!OLD_BOOKS);
			else
			{
				LCD_vidGoTo(1, 1);
				LCD_String("Borrowed BOOKS:");
				for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4570:	8f 85       	ldd	r24, Y+15	; 0x0f
    4572:	8f 5f       	subi	r24, 0xFF	; 255
    4574:	8f 87       	std	Y+15, r24	; 0x0f
    4576:	8f 85       	ldd	r24, Y+15	; 0x0f
    4578:	85 30       	cpi	r24, 0x05	; 5
    457a:	b0 f2       	brcs	.-84     	; 0x4528 <search+0x1a0>
						BOOKS_search(0, ptr_member -> MEMBER_CARD_BOOKS[i]);
					}
				}
			}

			LCD_vidClearOnDemand(1, 32);
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	60 e2       	ldi	r22, 0x20	; 32
    4580:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
			found = true;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	8c 8b       	std	Y+20, r24	; 0x14
			return  ptr_member;
    4588:	80 91 bc 03 	lds	r24, 0x03BC
    458c:	90 91 bd 03 	lds	r25, 0x03BD
    4590:	99 8f       	std	Y+25, r25	; 0x19
    4592:	88 8f       	std	Y+24, r24	; 0x18
    4594:	37 c0       	rjmp	.+110    	; 0x4604 <search+0x27c>

		}
		ptr_member = ptr_member -> NEXT_STRUCT;
    4596:	e0 91 bc 03 	lds	r30, 0x03BC
    459a:	f0 91 bd 03 	lds	r31, 0x03BD
    459e:	82 85       	ldd	r24, Z+10	; 0x0a
    45a0:	93 85       	ldd	r25, Z+11	; 0x0b
    45a2:	90 93 bd 03 	sts	0x03BD, r25
    45a6:	80 93 bc 03 	sts	0x03BC, r24
	
	members *tmp = NULL;
	

	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfMembers; i++)
    45aa:	88 89       	ldd	r24, Y+16	; 0x10
    45ac:	99 89       	ldd	r25, Y+17	; 0x11
    45ae:	01 96       	adiw	r24, 0x01	; 1
    45b0:	99 8b       	std	Y+17, r25	; 0x11
    45b2:	88 8b       	std	Y+16, r24	; 0x10
    45b4:	80 91 b3 03 	lds	r24, 0x03B3
    45b8:	28 2f       	mov	r18, r24
    45ba:	33 27       	eor	r19, r19
    45bc:	27 fd       	sbrc	r18, 7
    45be:	30 95       	com	r19
    45c0:	88 89       	ldd	r24, Y+16	; 0x10
    45c2:	99 89       	ldd	r25, Y+17	; 0x11
    45c4:	28 17       	cp	r18, r24
    45c6:	39 07       	cpc	r19, r25
    45c8:	0c f0       	brlt	.+2      	; 0x45cc <search+0x244>
    45ca:	fd ce       	rjmp	.-518    	; 0x43c6 <search+0x3e>

		}
		ptr_member = ptr_member -> NEXT_STRUCT;
	}

	if(!found)
    45cc:	8c 89       	ldd	r24, Y+20	; 0x14
    45ce:	91 e0       	ldi	r25, 0x01	; 1
    45d0:	89 27       	eor	r24, r25
    45d2:	88 23       	and	r24, r24
    45d4:	59 f0       	breq	.+22     	; 0x45ec <search+0x264>
	{
		ptr_member = root_member;
    45d6:	80 91 be 03 	lds	r24, 0x03BE
    45da:	90 91 bf 03 	lds	r25, 0x03BF
    45de:	90 93 bd 03 	sts	0x03BD, r25
    45e2:	80 93 bc 03 	sts	0x03BC, r24
		return NULL;
    45e6:	19 8e       	std	Y+25, r1	; 0x19
    45e8:	18 8e       	std	Y+24, r1	; 0x18
    45ea:	0c c0       	rjmp	.+24     	; 0x4604 <search+0x27c>
	}

	ptr_member = root_member;
    45ec:	80 91 be 03 	lds	r24, 0x03BE
    45f0:	90 91 bf 03 	lds	r25, 0x03BF
    45f4:	90 93 bd 03 	sts	0x03BD, r25
    45f8:	80 93 bc 03 	sts	0x03BC, r24
	return tmp;
    45fc:	8a 89       	ldd	r24, Y+18	; 0x12
    45fe:	9b 89       	ldd	r25, Y+19	; 0x13
    4600:	99 8f       	std	Y+25, r25	; 0x19
    4602:	88 8f       	std	Y+24, r24	; 0x18
    4604:	88 8d       	ldd	r24, Y+24	; 0x18
    4606:	99 8d       	ldd	r25, Y+25	; 0x19
}
    4608:	69 96       	adiw	r28, 0x19	; 25
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	cd bf       	out	0x3d, r28	; 61
    4614:	cf 91       	pop	r28
    4616:	df 91       	pop	r29
    4618:	08 95       	ret

0000461a <Borrow_vid>:


// Borrow from books
void Borrow_vid(char *id, char *serial)
{
    461a:	df 93       	push	r29
    461c:	cf 93       	push	r28
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
    4622:	c2 54       	subi	r28, 0x42	; 66
    4624:	d0 40       	sbci	r29, 0x00	; 0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	cd bf       	out	0x3d, r28	; 61
    4630:	fe 01       	movw	r30, r28
    4632:	ff 96       	adiw	r30, 0x3f	; 63
    4634:	91 83       	std	Z+1, r25	; 0x01
    4636:	80 83       	st	Z, r24
    4638:	fe 01       	movw	r30, r28
    463a:	ef 5b       	subi	r30, 0xBF	; 191
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	71 83       	std	Z+1, r23	; 0x01
    4640:	60 83       	st	Z, r22
	u8 B_flag = 0;
    4642:	1e ae       	std	Y+62, r1	; 0x3e
	u8 index = 0;
    4644:	1d ae       	std	Y+61, r1	; 0x3d
	bool valid_copies = false;
    4646:	1c ae       	std	Y+60, r1	; 0x3c
	
	// Search for member and don't show the old books
	members *tmp = search(id, 0);
    4648:	fe 01       	movw	r30, r28
    464a:	ff 96       	adiw	r30, 0x3f	; 63
    464c:	80 81       	ld	r24, Z
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	0e 94 c4 21 	call	0x4388	; 0x4388 <search>
    4656:	9b af       	std	Y+59, r25	; 0x3b
    4658:	8a af       	std	Y+58, r24	; 0x3a
	
	// Search for the book via serial
	index = BOOKS_search(serial, 0);
    465a:	fe 01       	movw	r30, r28
    465c:	ef 5b       	subi	r30, 0xBF	; 191
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	91 81       	ldd	r25, Z+1	; 0x01
    4664:	60 e0       	ldi	r22, 0x00	; 0
    4666:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <BOOKS_search>
    466a:	8d af       	std	Y+61, r24	; 0x3d
	
	if(!tmp)
    466c:	8a ad       	ldd	r24, Y+58	; 0x3a
    466e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	29 f4       	brne	.+10     	; 0x467e <Borrow_vid+0x64>
	{
		// Invalid ID
		LCD_String("ERROR_ID!");
    4674:	81 e5       	ldi	r24, 0x51	; 81
    4676:	91 e0       	ldi	r25, 0x01	; 1
    4678:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    467c:	28 c2       	rjmp	.+1104   	; 0x4ace <Borrow_vid+0x4b4>
	}
	else
	{
		// Valid Serial 
		if( index != DoesNot_exist)
    467e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4680:	88 23       	and	r24, r24
    4682:	09 f4       	brne	.+2      	; 0x4686 <Borrow_vid+0x6c>
    4684:	2a c1       	rjmp	.+596    	; 0x48da <Borrow_vid+0x2c0>
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    4686:	19 ae       	std	Y+57, r1	; 0x39
    4688:	23 c1       	rjmp	.+582    	; 0x48d0 <Borrow_vid+0x2b6>
			{
				if(tmp -> MEMBER_CARD_BOOKS[j] == 0)
    468a:	89 ad       	ldd	r24, Y+57	; 0x39
    468c:	28 2f       	mov	r18, r24
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	8a ad       	ldd	r24, Y+58	; 0x3a
    4692:	9b ad       	ldd	r25, Y+59	; 0x3b
    4694:	82 0f       	add	r24, r18
    4696:	93 1f       	adc	r25, r19
    4698:	fc 01       	movw	r30, r24
    469a:	35 96       	adiw	r30, 0x05	; 5
    469c:	80 81       	ld	r24, Z
    469e:	88 23       	and	r24, r24
    46a0:	09 f0       	breq	.+2      	; 0x46a4 <Borrow_vid+0x8a>
    46a2:	13 c1       	rjmp	.+550    	; 0x48ca <Borrow_vid+0x2b0>
				{		
					valid_copies = BOOKS_COPIES_DECAY();
    46a4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <BOOKS_COPIES_DECAY>
    46a8:	8c af       	std	Y+60, r24	; 0x3c
					if(valid_copies)
    46aa:	8c ad       	ldd	r24, Y+60	; 0x3c
    46ac:	88 23       	and	r24, r24
    46ae:	09 f4       	brne	.+2      	; 0x46b2 <Borrow_vid+0x98>
    46b0:	92 c0       	rjmp	.+292    	; 0x47d6 <Borrow_vid+0x1bc>
					{
						// Borrow and submit in MEMBER_CARD_BOOKS[] with Book index in BOOKS list
						tmp -> MEMBER_CARD_BOOKS[j] = index;
    46b2:	89 ad       	ldd	r24, Y+57	; 0x39
    46b4:	28 2f       	mov	r18, r24
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    46ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    46bc:	82 0f       	add	r24, r18
    46be:	93 1f       	adc	r25, r19
    46c0:	fc 01       	movw	r30, r24
    46c2:	35 96       	adiw	r30, 0x05	; 5
    46c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    46c6:	80 83       	st	Z, r24

						LCD_String("BORROW -> SUCCESS:");
    46c8:	8b e5       	ldi	r24, 0x5B	; 91
    46ca:	91 e0       	ldi	r25, 0x01	; 1
    46cc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
						LCD_vidGoTo(1, 2);
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	62 e0       	ldi	r22, 0x02	; 2
    46d4:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
						LCD_String("Copies - 1.");
    46d8:	8e e6       	ldi	r24, 0x6E	; 110
    46da:	91 e0       	ldi	r25, 0x01	; 1
    46dc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	aa ef       	ldi	r26, 0xFA	; 250
    46e6:	b4 e4       	ldi	r27, 0x44	; 68
    46e8:	8d ab       	std	Y+53, r24	; 0x35
    46ea:	9e ab       	std	Y+54, r25	; 0x36
    46ec:	af ab       	std	Y+55, r26	; 0x37
    46ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46f0:	6d a9       	ldd	r22, Y+53	; 0x35
    46f2:	7e a9       	ldd	r23, Y+54	; 0x36
    46f4:	8f a9       	ldd	r24, Y+55	; 0x37
    46f6:	98 ad       	ldd	r25, Y+56	; 0x38
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	4a ef       	ldi	r20, 0xFA	; 250
    46fe:	54 e4       	ldi	r21, 0x44	; 68
    4700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	89 ab       	std	Y+49, r24	; 0x31
    470a:	9a ab       	std	Y+50, r25	; 0x32
    470c:	ab ab       	std	Y+51, r26	; 0x33
    470e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4710:	69 a9       	ldd	r22, Y+49	; 0x31
    4712:	7a a9       	ldd	r23, Y+50	; 0x32
    4714:	8b a9       	ldd	r24, Y+51	; 0x33
    4716:	9c a9       	ldd	r25, Y+52	; 0x34
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	40 e8       	ldi	r20, 0x80	; 128
    471e:	5f e3       	ldi	r21, 0x3F	; 63
    4720:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4724:	88 23       	and	r24, r24
    4726:	2c f4       	brge	.+10     	; 0x4732 <Borrow_vid+0x118>
		__ticks = 1;
    4728:	81 e0       	ldi	r24, 0x01	; 1
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	98 ab       	std	Y+48, r25	; 0x30
    472e:	8f a7       	std	Y+47, r24	; 0x2f
    4730:	3f c0       	rjmp	.+126    	; 0x47b0 <Borrow_vid+0x196>
	else if (__tmp > 65535)
    4732:	69 a9       	ldd	r22, Y+49	; 0x31
    4734:	7a a9       	ldd	r23, Y+50	; 0x32
    4736:	8b a9       	ldd	r24, Y+51	; 0x33
    4738:	9c a9       	ldd	r25, Y+52	; 0x34
    473a:	20 e0       	ldi	r18, 0x00	; 0
    473c:	3f ef       	ldi	r19, 0xFF	; 255
    473e:	4f e7       	ldi	r20, 0x7F	; 127
    4740:	57 e4       	ldi	r21, 0x47	; 71
    4742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4746:	18 16       	cp	r1, r24
    4748:	4c f5       	brge	.+82     	; 0x479c <Borrow_vid+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474a:	6d a9       	ldd	r22, Y+53	; 0x35
    474c:	7e a9       	ldd	r23, Y+54	; 0x36
    474e:	8f a9       	ldd	r24, Y+55	; 0x37
    4750:	98 ad       	ldd	r25, Y+56	; 0x38
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	40 e2       	ldi	r20, 0x20	; 32
    4758:	51 e4       	ldi	r21, 0x41	; 65
    475a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475e:	dc 01       	movw	r26, r24
    4760:	cb 01       	movw	r24, r22
    4762:	bc 01       	movw	r22, r24
    4764:	cd 01       	movw	r24, r26
    4766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	98 ab       	std	Y+48, r25	; 0x30
    4770:	8f a7       	std	Y+47, r24	; 0x2f
    4772:	0f c0       	rjmp	.+30     	; 0x4792 <Borrow_vid+0x178>
    4774:	88 ec       	ldi	r24, 0xC8	; 200
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	9e a7       	std	Y+46, r25	; 0x2e
    477a:	8d a7       	std	Y+45, r24	; 0x2d
    477c:	8d a5       	ldd	r24, Y+45	; 0x2d
    477e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4780:	01 97       	sbiw	r24, 0x01	; 1
    4782:	f1 f7       	brne	.-4      	; 0x4780 <Borrow_vid+0x166>
    4784:	9e a7       	std	Y+46, r25	; 0x2e
    4786:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4788:	8f a5       	ldd	r24, Y+47	; 0x2f
    478a:	98 a9       	ldd	r25, Y+48	; 0x30
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	98 ab       	std	Y+48, r25	; 0x30
    4790:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4792:	8f a5       	ldd	r24, Y+47	; 0x2f
    4794:	98 a9       	ldd	r25, Y+48	; 0x30
    4796:	00 97       	sbiw	r24, 0x00	; 0
    4798:	69 f7       	brne	.-38     	; 0x4774 <Borrow_vid+0x15a>
    479a:	14 c0       	rjmp	.+40     	; 0x47c4 <Borrow_vid+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    479c:	69 a9       	ldd	r22, Y+49	; 0x31
    479e:	7a a9       	ldd	r23, Y+50	; 0x32
    47a0:	8b a9       	ldd	r24, Y+51	; 0x33
    47a2:	9c a9       	ldd	r25, Y+52	; 0x34
    47a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	98 ab       	std	Y+48, r25	; 0x30
    47ae:	8f a7       	std	Y+47, r24	; 0x2f
    47b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    47b2:	98 a9       	ldd	r25, Y+48	; 0x30
    47b4:	9c a7       	std	Y+44, r25	; 0x2c
    47b6:	8b a7       	std	Y+43, r24	; 0x2b
    47b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    47ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	f1 f7       	brne	.-4      	; 0x47bc <Borrow_vid+0x1a2>
    47c0:	9c a7       	std	Y+44, r25	; 0x2c
    47c2:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);
						LCD_vidClearOnDemand(1, 32);
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	60 e2       	ldi	r22, 0x20	; 32
    47c8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

						B_flag = 1;
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	8e af       	std	Y+62, r24	; 0x3e
						j = AVAILABLE_SHARES;					
    47d0:	85 e0       	ldi	r24, 0x05	; 5
    47d2:	89 af       	std	Y+57, r24	; 0x39
    47d4:	7a c0       	rjmp	.+244    	; 0x48ca <Borrow_vid+0x2b0>
					}
					else
					{
						LCD_String("Out of copies!");
    47d6:	8a e7       	ldi	r24, 0x7A	; 122
    47d8:	91 e0       	ldi	r25, 0x01	; 1
    47da:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	aa ef       	ldi	r26, 0xFA	; 250
    47e4:	b4 e4       	ldi	r27, 0x44	; 68
    47e6:	8f a3       	std	Y+39, r24	; 0x27
    47e8:	98 a7       	std	Y+40, r25	; 0x28
    47ea:	a9 a7       	std	Y+41, r26	; 0x29
    47ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ee:	6f a1       	ldd	r22, Y+39	; 0x27
    47f0:	78 a5       	ldd	r23, Y+40	; 0x28
    47f2:	89 a5       	ldd	r24, Y+41	; 0x29
    47f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	4a ef       	ldi	r20, 0xFA	; 250
    47fc:	54 e4       	ldi	r21, 0x44	; 68
    47fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4802:	dc 01       	movw	r26, r24
    4804:	cb 01       	movw	r24, r22
    4806:	8b a3       	std	Y+35, r24	; 0x23
    4808:	9c a3       	std	Y+36, r25	; 0x24
    480a:	ad a3       	std	Y+37, r26	; 0x25
    480c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    480e:	6b a1       	ldd	r22, Y+35	; 0x23
    4810:	7c a1       	ldd	r23, Y+36	; 0x24
    4812:	8d a1       	ldd	r24, Y+37	; 0x25
    4814:	9e a1       	ldd	r25, Y+38	; 0x26
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	40 e8       	ldi	r20, 0x80	; 128
    481c:	5f e3       	ldi	r21, 0x3F	; 63
    481e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4822:	88 23       	and	r24, r24
    4824:	2c f4       	brge	.+10     	; 0x4830 <Borrow_vid+0x216>
		__ticks = 1;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	9a a3       	std	Y+34, r25	; 0x22
    482c:	89 a3       	std	Y+33, r24	; 0x21
    482e:	3f c0       	rjmp	.+126    	; 0x48ae <Borrow_vid+0x294>
	else if (__tmp > 65535)
    4830:	6b a1       	ldd	r22, Y+35	; 0x23
    4832:	7c a1       	ldd	r23, Y+36	; 0x24
    4834:	8d a1       	ldd	r24, Y+37	; 0x25
    4836:	9e a1       	ldd	r25, Y+38	; 0x26
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	3f ef       	ldi	r19, 0xFF	; 255
    483c:	4f e7       	ldi	r20, 0x7F	; 127
    483e:	57 e4       	ldi	r21, 0x47	; 71
    4840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4844:	18 16       	cp	r1, r24
    4846:	4c f5       	brge	.+82     	; 0x489a <Borrow_vid+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4848:	6f a1       	ldd	r22, Y+39	; 0x27
    484a:	78 a5       	ldd	r23, Y+40	; 0x28
    484c:	89 a5       	ldd	r24, Y+41	; 0x29
    484e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	40 e2       	ldi	r20, 0x20	; 32
    4856:	51 e4       	ldi	r21, 0x41	; 65
    4858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	bc 01       	movw	r22, r24
    4862:	cd 01       	movw	r24, r26
    4864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	9a a3       	std	Y+34, r25	; 0x22
    486e:	89 a3       	std	Y+33, r24	; 0x21
    4870:	0f c0       	rjmp	.+30     	; 0x4890 <Borrow_vid+0x276>
    4872:	88 ec       	ldi	r24, 0xC8	; 200
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	98 a3       	std	Y+32, r25	; 0x20
    4878:	8f 8f       	std	Y+31, r24	; 0x1f
    487a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    487c:	98 a1       	ldd	r25, Y+32	; 0x20
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	f1 f7       	brne	.-4      	; 0x487e <Borrow_vid+0x264>
    4882:	98 a3       	std	Y+32, r25	; 0x20
    4884:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4886:	89 a1       	ldd	r24, Y+33	; 0x21
    4888:	9a a1       	ldd	r25, Y+34	; 0x22
    488a:	01 97       	sbiw	r24, 0x01	; 1
    488c:	9a a3       	std	Y+34, r25	; 0x22
    488e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4890:	89 a1       	ldd	r24, Y+33	; 0x21
    4892:	9a a1       	ldd	r25, Y+34	; 0x22
    4894:	00 97       	sbiw	r24, 0x00	; 0
    4896:	69 f7       	brne	.-38     	; 0x4872 <Borrow_vid+0x258>
    4898:	14 c0       	rjmp	.+40     	; 0x48c2 <Borrow_vid+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489a:	6b a1       	ldd	r22, Y+35	; 0x23
    489c:	7c a1       	ldd	r23, Y+36	; 0x24
    489e:	8d a1       	ldd	r24, Y+37	; 0x25
    48a0:	9e a1       	ldd	r25, Y+38	; 0x26
    48a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	9a a3       	std	Y+34, r25	; 0x22
    48ac:	89 a3       	std	Y+33, r24	; 0x21
    48ae:	89 a1       	ldd	r24, Y+33	; 0x21
    48b0:	9a a1       	ldd	r25, Y+34	; 0x22
    48b2:	9e 8f       	std	Y+30, r25	; 0x1e
    48b4:	8d 8f       	std	Y+29, r24	; 0x1d
    48b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48ba:	01 97       	sbiw	r24, 0x01	; 1
    48bc:	f1 f7       	brne	.-4      	; 0x48ba <Borrow_vid+0x2a0>
    48be:	9e 8f       	std	Y+30, r25	; 0x1e
    48c0:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						LCD_vidClearOnDemand(1, 32);
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	60 e2       	ldi	r22, 0x20	; 32
    48c6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
	{
		// Valid Serial 
		if( index != DoesNot_exist)
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    48ca:	89 ad       	ldd	r24, Y+57	; 0x39
    48cc:	8f 5f       	subi	r24, 0xFF	; 255
    48ce:	89 af       	std	Y+57, r24	; 0x39
    48d0:	89 ad       	ldd	r24, Y+57	; 0x39
    48d2:	85 30       	cpi	r24, 0x05	; 5
    48d4:	08 f4       	brcc	.+2      	; 0x48d8 <Borrow_vid+0x2be>
    48d6:	d9 ce       	rjmp	.-590    	; 0x468a <Borrow_vid+0x70>
    48d8:	7c c0       	rjmp	.+248    	; 0x49d2 <Borrow_vid+0x3b8>
				else;
			}
		}
		else
		{
			LCD_String("Invalid ISBN");
    48da:	89 e8       	ldi	r24, 0x89	; 137
    48dc:	91 e0       	ldi	r25, 0x01	; 1
    48de:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	aa ef       	ldi	r26, 0xFA	; 250
    48e8:	b4 e4       	ldi	r27, 0x44	; 68
    48ea:	89 8f       	std	Y+25, r24	; 0x19
    48ec:	9a 8f       	std	Y+26, r25	; 0x1a
    48ee:	ab 8f       	std	Y+27, r26	; 0x1b
    48f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f2:	69 8d       	ldd	r22, Y+25	; 0x19
    48f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	4a ef       	ldi	r20, 0xFA	; 250
    4900:	54 e4       	ldi	r21, 0x44	; 68
    4902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	8d 8b       	std	Y+21, r24	; 0x15
    490c:	9e 8b       	std	Y+22, r25	; 0x16
    490e:	af 8b       	std	Y+23, r26	; 0x17
    4910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4912:	6d 89       	ldd	r22, Y+21	; 0x15
    4914:	7e 89       	ldd	r23, Y+22	; 0x16
    4916:	8f 89       	ldd	r24, Y+23	; 0x17
    4918:	98 8d       	ldd	r25, Y+24	; 0x18
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	40 e8       	ldi	r20, 0x80	; 128
    4920:	5f e3       	ldi	r21, 0x3F	; 63
    4922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4926:	88 23       	and	r24, r24
    4928:	2c f4       	brge	.+10     	; 0x4934 <Borrow_vid+0x31a>
		__ticks = 1;
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	9c 8b       	std	Y+20, r25	; 0x14
    4930:	8b 8b       	std	Y+19, r24	; 0x13
    4932:	3f c0       	rjmp	.+126    	; 0x49b2 <Borrow_vid+0x398>
	else if (__tmp > 65535)
    4934:	6d 89       	ldd	r22, Y+21	; 0x15
    4936:	7e 89       	ldd	r23, Y+22	; 0x16
    4938:	8f 89       	ldd	r24, Y+23	; 0x17
    493a:	98 8d       	ldd	r25, Y+24	; 0x18
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	3f ef       	ldi	r19, 0xFF	; 255
    4940:	4f e7       	ldi	r20, 0x7F	; 127
    4942:	57 e4       	ldi	r21, 0x47	; 71
    4944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4948:	18 16       	cp	r1, r24
    494a:	4c f5       	brge	.+82     	; 0x499e <Borrow_vid+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494c:	69 8d       	ldd	r22, Y+25	; 0x19
    494e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	40 e2       	ldi	r20, 0x20	; 32
    495a:	51 e4       	ldi	r21, 0x41	; 65
    495c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	9c 8b       	std	Y+20, r25	; 0x14
    4972:	8b 8b       	std	Y+19, r24	; 0x13
    4974:	0f c0       	rjmp	.+30     	; 0x4994 <Borrow_vid+0x37a>
    4976:	88 ec       	ldi	r24, 0xC8	; 200
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	9a 8b       	std	Y+18, r25	; 0x12
    497c:	89 8b       	std	Y+17, r24	; 0x11
    497e:	89 89       	ldd	r24, Y+17	; 0x11
    4980:	9a 89       	ldd	r25, Y+18	; 0x12
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <Borrow_vid+0x368>
    4986:	9a 8b       	std	Y+18, r25	; 0x12
    4988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498a:	8b 89       	ldd	r24, Y+19	; 0x13
    498c:	9c 89       	ldd	r25, Y+20	; 0x14
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	9c 8b       	std	Y+20, r25	; 0x14
    4992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4994:	8b 89       	ldd	r24, Y+19	; 0x13
    4996:	9c 89       	ldd	r25, Y+20	; 0x14
    4998:	00 97       	sbiw	r24, 0x00	; 0
    499a:	69 f7       	brne	.-38     	; 0x4976 <Borrow_vid+0x35c>
    499c:	14 c0       	rjmp	.+40     	; 0x49c6 <Borrow_vid+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    499e:	6d 89       	ldd	r22, Y+21	; 0x15
    49a0:	7e 89       	ldd	r23, Y+22	; 0x16
    49a2:	8f 89       	ldd	r24, Y+23	; 0x17
    49a4:	98 8d       	ldd	r25, Y+24	; 0x18
    49a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	9c 8b       	std	Y+20, r25	; 0x14
    49b0:	8b 8b       	std	Y+19, r24	; 0x13
    49b2:	8b 89       	ldd	r24, Y+19	; 0x13
    49b4:	9c 89       	ldd	r25, Y+20	; 0x14
    49b6:	98 8b       	std	Y+16, r25	; 0x10
    49b8:	8f 87       	std	Y+15, r24	; 0x0f
    49ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    49bc:	98 89       	ldd	r25, Y+16	; 0x10
    49be:	01 97       	sbiw	r24, 0x01	; 1
    49c0:	f1 f7       	brne	.-4      	; 0x49be <Borrow_vid+0x3a4>
    49c2:	98 8b       	std	Y+16, r25	; 0x10
    49c4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	60 e2       	ldi	r22, 0x20	; 32
    49ca:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
			B_flag = 1;
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	8e af       	std	Y+62, r24	; 0x3e
		}
		
		if(!B_flag)
    49d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    49d4:	88 23       	and	r24, r24
    49d6:	09 f0       	breq	.+2      	; 0x49da <Borrow_vid+0x3c0>
    49d8:	7a c0       	rjmp	.+244    	; 0x4ace <Borrow_vid+0x4b4>
		{
			LCD_String("Card_full");
    49da:	86 e9       	ldi	r24, 0x96	; 150
    49dc:	91 e0       	ldi	r25, 0x01	; 1
    49de:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    49e2:	80 e0       	ldi	r24, 0x00	; 0
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	aa ef       	ldi	r26, 0xFA	; 250
    49e8:	b4 e4       	ldi	r27, 0x44	; 68
    49ea:	8b 87       	std	Y+11, r24	; 0x0b
    49ec:	9c 87       	std	Y+12, r25	; 0x0c
    49ee:	ad 87       	std	Y+13, r26	; 0x0d
    49f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    49f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    49f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	4a ef       	ldi	r20, 0xFA	; 250
    4a00:	54 e4       	ldi	r21, 0x44	; 68
    4a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	8f 83       	std	Y+7, r24	; 0x07
    4a0c:	98 87       	std	Y+8, r25	; 0x08
    4a0e:	a9 87       	std	Y+9, r26	; 0x09
    4a10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a12:	6f 81       	ldd	r22, Y+7	; 0x07
    4a14:	78 85       	ldd	r23, Y+8	; 0x08
    4a16:	89 85       	ldd	r24, Y+9	; 0x09
    4a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e8       	ldi	r20, 0x80	; 128
    4a20:	5f e3       	ldi	r21, 0x3F	; 63
    4a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a26:	88 23       	and	r24, r24
    4a28:	2c f4       	brge	.+10     	; 0x4a34 <Borrow_vid+0x41a>
		__ticks = 1;
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	9e 83       	std	Y+6, r25	; 0x06
    4a30:	8d 83       	std	Y+5, r24	; 0x05
    4a32:	3f c0       	rjmp	.+126    	; 0x4ab2 <Borrow_vid+0x498>
	else if (__tmp > 65535)
    4a34:	6f 81       	ldd	r22, Y+7	; 0x07
    4a36:	78 85       	ldd	r23, Y+8	; 0x08
    4a38:	89 85       	ldd	r24, Y+9	; 0x09
    4a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	3f ef       	ldi	r19, 0xFF	; 255
    4a40:	4f e7       	ldi	r20, 0x7F	; 127
    4a42:	57 e4       	ldi	r21, 0x47	; 71
    4a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a48:	18 16       	cp	r1, r24
    4a4a:	4c f5       	brge	.+82     	; 0x4a9e <Borrow_vid+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	40 e2       	ldi	r20, 0x20	; 32
    4a5a:	51 e4       	ldi	r21, 0x41	; 65
    4a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	bc 01       	movw	r22, r24
    4a66:	cd 01       	movw	r24, r26
    4a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	9e 83       	std	Y+6, r25	; 0x06
    4a72:	8d 83       	std	Y+5, r24	; 0x05
    4a74:	0f c0       	rjmp	.+30     	; 0x4a94 <Borrow_vid+0x47a>
    4a76:	88 ec       	ldi	r24, 0xC8	; 200
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	9c 83       	std	Y+4, r25	; 0x04
    4a7c:	8b 83       	std	Y+3, r24	; 0x03
    4a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a80:	9c 81       	ldd	r25, Y+4	; 0x04
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	f1 f7       	brne	.-4      	; 0x4a82 <Borrow_vid+0x468>
    4a86:	9c 83       	std	Y+4, r25	; 0x04
    4a88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	9e 83       	std	Y+6, r25	; 0x06
    4a92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a94:	8d 81       	ldd	r24, Y+5	; 0x05
    4a96:	9e 81       	ldd	r25, Y+6	; 0x06
    4a98:	00 97       	sbiw	r24, 0x00	; 0
    4a9a:	69 f7       	brne	.-38     	; 0x4a76 <Borrow_vid+0x45c>
    4a9c:	14 c0       	rjmp	.+40     	; 0x4ac6 <Borrow_vid+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4aa0:	78 85       	ldd	r23, Y+8	; 0x08
    4aa2:	89 85       	ldd	r24, Y+9	; 0x09
    4aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	9e 83       	std	Y+6, r25	; 0x06
    4ab0:	8d 83       	std	Y+5, r24	; 0x05
    4ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab6:	9a 83       	std	Y+2, r25	; 0x02
    4ab8:	89 83       	std	Y+1, r24	; 0x01
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	9a 81       	ldd	r25, Y+2	; 0x02
    4abe:	01 97       	sbiw	r24, 0x01	; 1
    4ac0:	f1 f7       	brne	.-4      	; 0x4abe <Borrow_vid+0x4a4>
    4ac2:	9a 83       	std	Y+2, r25	; 0x02
    4ac4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	60 e2       	ldi	r22, 0x20	; 32
    4aca:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		}
	}
}
    4ace:	ce 5b       	subi	r28, 0xBE	; 190
    4ad0:	df 4f       	sbci	r29, 0xFF	; 255
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	cf 91       	pop	r28
    4ade:	df 91       	pop	r29
    4ae0:	08 95       	ret

00004ae2 <LinkedList_show>:


// Show all members
bool LinkedList_show(void)
{
    4ae2:	df 93       	push	r29
    4ae4:	cf 93       	push	r28
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	ea 97       	sbiw	r28, 0x3a	; 58
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
	ptr_member = root_member -> NEXT_STRUCT;
    4af6:	e0 91 be 03 	lds	r30, 0x03BE
    4afa:	f0 91 bf 03 	lds	r31, 0x03BF
    4afe:	82 85       	ldd	r24, Z+10	; 0x0a
    4b00:	93 85       	ldd	r25, Z+11	; 0x0b
    4b02:	90 93 bd 03 	sts	0x03BD, r25
    4b06:	80 93 bc 03 	sts	0x03BC, r24

	LCD_vidGoTo(1, 1);
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	61 e0       	ldi	r22, 0x01	; 1
    4b0e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
	LCD_String("NoOfMembers are:");
    4b12:	80 ea       	ldi	r24, 0xA0	; 160
    4b14:	91 e0       	ldi	r25, 0x01	; 1
    4b16:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
	LCD_vidGoTo(1, 2);
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	62 e0       	ldi	r22, 0x02	; 2
    4b1e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
	LinkedList_vidCompanion(NoOfMembers);
    4b22:	80 91 b3 03 	lds	r24, 0x03B3
    4b26:	99 27       	eor	r25, r25
    4b28:	87 fd       	sbrc	r24, 7
    4b2a:	90 95       	com	r25
    4b2c:	0e 94 41 2a 	call	0x5482	; 0x5482 <LinkedList_vidCompanion>
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	aa e7       	ldi	r26, 0x7A	; 122
    4b36:	b4 e4       	ldi	r27, 0x44	; 68
    4b38:	8d ab       	std	Y+53, r24	; 0x35
    4b3a:	9e ab       	std	Y+54, r25	; 0x36
    4b3c:	af ab       	std	Y+55, r26	; 0x37
    4b3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b40:	6d a9       	ldd	r22, Y+53	; 0x35
    4b42:	7e a9       	ldd	r23, Y+54	; 0x36
    4b44:	8f a9       	ldd	r24, Y+55	; 0x37
    4b46:	98 ad       	ldd	r25, Y+56	; 0x38
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	4a ef       	ldi	r20, 0xFA	; 250
    4b4e:	54 e4       	ldi	r21, 0x44	; 68
    4b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	89 ab       	std	Y+49, r24	; 0x31
    4b5a:	9a ab       	std	Y+50, r25	; 0x32
    4b5c:	ab ab       	std	Y+51, r26	; 0x33
    4b5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b60:	69 a9       	ldd	r22, Y+49	; 0x31
    4b62:	7a a9       	ldd	r23, Y+50	; 0x32
    4b64:	8b a9       	ldd	r24, Y+51	; 0x33
    4b66:	9c a9       	ldd	r25, Y+52	; 0x34
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	40 e8       	ldi	r20, 0x80	; 128
    4b6e:	5f e3       	ldi	r21, 0x3F	; 63
    4b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b74:	88 23       	and	r24, r24
    4b76:	2c f4       	brge	.+10     	; 0x4b82 <LinkedList_show+0xa0>
		__ticks = 1;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	98 ab       	std	Y+48, r25	; 0x30
    4b7e:	8f a7       	std	Y+47, r24	; 0x2f
    4b80:	3f c0       	rjmp	.+126    	; 0x4c00 <LinkedList_show+0x11e>
	else if (__tmp > 65535)
    4b82:	69 a9       	ldd	r22, Y+49	; 0x31
    4b84:	7a a9       	ldd	r23, Y+50	; 0x32
    4b86:	8b a9       	ldd	r24, Y+51	; 0x33
    4b88:	9c a9       	ldd	r25, Y+52	; 0x34
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	3f ef       	ldi	r19, 0xFF	; 255
    4b8e:	4f e7       	ldi	r20, 0x7F	; 127
    4b90:	57 e4       	ldi	r21, 0x47	; 71
    4b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b96:	18 16       	cp	r1, r24
    4b98:	4c f5       	brge	.+82     	; 0x4bec <LinkedList_show+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b9a:	6d a9       	ldd	r22, Y+53	; 0x35
    4b9c:	7e a9       	ldd	r23, Y+54	; 0x36
    4b9e:	8f a9       	ldd	r24, Y+55	; 0x37
    4ba0:	98 ad       	ldd	r25, Y+56	; 0x38
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	40 e2       	ldi	r20, 0x20	; 32
    4ba8:	51 e4       	ldi	r21, 0x41	; 65
    4baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	bc 01       	movw	r22, r24
    4bb4:	cd 01       	movw	r24, r26
    4bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	98 ab       	std	Y+48, r25	; 0x30
    4bc0:	8f a7       	std	Y+47, r24	; 0x2f
    4bc2:	0f c0       	rjmp	.+30     	; 0x4be2 <LinkedList_show+0x100>
    4bc4:	88 ec       	ldi	r24, 0xC8	; 200
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	9e a7       	std	Y+46, r25	; 0x2e
    4bca:	8d a7       	std	Y+45, r24	; 0x2d
    4bcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    4bce:	9e a5       	ldd	r25, Y+46	; 0x2e
    4bd0:	01 97       	sbiw	r24, 0x01	; 1
    4bd2:	f1 f7       	brne	.-4      	; 0x4bd0 <LinkedList_show+0xee>
    4bd4:	9e a7       	std	Y+46, r25	; 0x2e
    4bd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bda:	98 a9       	ldd	r25, Y+48	; 0x30
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	98 ab       	std	Y+48, r25	; 0x30
    4be0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4be4:	98 a9       	ldd	r25, Y+48	; 0x30
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	69 f7       	brne	.-38     	; 0x4bc4 <LinkedList_show+0xe2>
    4bea:	14 c0       	rjmp	.+40     	; 0x4c14 <LinkedList_show+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bec:	69 a9       	ldd	r22, Y+49	; 0x31
    4bee:	7a a9       	ldd	r23, Y+50	; 0x32
    4bf0:	8b a9       	ldd	r24, Y+51	; 0x33
    4bf2:	9c a9       	ldd	r25, Y+52	; 0x34
    4bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	98 ab       	std	Y+48, r25	; 0x30
    4bfe:	8f a7       	std	Y+47, r24	; 0x2f
    4c00:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c02:	98 a9       	ldd	r25, Y+48	; 0x30
    4c04:	9c a7       	std	Y+44, r25	; 0x2c
    4c06:	8b a7       	std	Y+43, r24	; 0x2b
    4c08:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	f1 f7       	brne	.-4      	; 0x4c0c <LinkedList_show+0x12a>
    4c10:	9c a7       	std	Y+44, r25	; 0x2c
    4c12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_vidClearOnDemand(1, 32);
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	60 e2       	ldi	r22, 0x20	; 32
    4c18:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>


	// Only root is no valid list
	if(!ptr_member)
    4c1c:	80 91 bc 03 	lds	r24, 0x03BC
    4c20:	90 91 bd 03 	lds	r25, 0x03BD
    4c24:	00 97       	sbiw	r24, 0x00	; 0
    4c26:	09 f0       	breq	.+2      	; 0x4c2a <LinkedList_show+0x148>
    4c28:	84 c0       	rjmp	.+264    	; 0x4d32 <LinkedList_show+0x250>
	{
		LCD_String("NO Members");
    4c2a:	81 eb       	ldi	r24, 0xB1	; 177
    4c2c:	91 e0       	ldi	r25, 0x01	; 1
    4c2e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	aa ef       	ldi	r26, 0xFA	; 250
    4c38:	b4 e4       	ldi	r27, 0x44	; 68
    4c3a:	8f a3       	std	Y+39, r24	; 0x27
    4c3c:	98 a7       	std	Y+40, r25	; 0x28
    4c3e:	a9 a7       	std	Y+41, r26	; 0x29
    4c40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c42:	6f a1       	ldd	r22, Y+39	; 0x27
    4c44:	78 a5       	ldd	r23, Y+40	; 0x28
    4c46:	89 a5       	ldd	r24, Y+41	; 0x29
    4c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	4a ef       	ldi	r20, 0xFA	; 250
    4c50:	54 e4       	ldi	r21, 0x44	; 68
    4c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	8b a3       	std	Y+35, r24	; 0x23
    4c5c:	9c a3       	std	Y+36, r25	; 0x24
    4c5e:	ad a3       	std	Y+37, r26	; 0x25
    4c60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c62:	6b a1       	ldd	r22, Y+35	; 0x23
    4c64:	7c a1       	ldd	r23, Y+36	; 0x24
    4c66:	8d a1       	ldd	r24, Y+37	; 0x25
    4c68:	9e a1       	ldd	r25, Y+38	; 0x26
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e8       	ldi	r20, 0x80	; 128
    4c70:	5f e3       	ldi	r21, 0x3F	; 63
    4c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c76:	88 23       	and	r24, r24
    4c78:	2c f4       	brge	.+10     	; 0x4c84 <LinkedList_show+0x1a2>
		__ticks = 1;
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	9a a3       	std	Y+34, r25	; 0x22
    4c80:	89 a3       	std	Y+33, r24	; 0x21
    4c82:	3f c0       	rjmp	.+126    	; 0x4d02 <LinkedList_show+0x220>
	else if (__tmp > 65535)
    4c84:	6b a1       	ldd	r22, Y+35	; 0x23
    4c86:	7c a1       	ldd	r23, Y+36	; 0x24
    4c88:	8d a1       	ldd	r24, Y+37	; 0x25
    4c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	3f ef       	ldi	r19, 0xFF	; 255
    4c90:	4f e7       	ldi	r20, 0x7F	; 127
    4c92:	57 e4       	ldi	r21, 0x47	; 71
    4c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c98:	18 16       	cp	r1, r24
    4c9a:	4c f5       	brge	.+82     	; 0x4cee <LinkedList_show+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    4ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    4ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	40 e2       	ldi	r20, 0x20	; 32
    4caa:	51 e4       	ldi	r21, 0x41	; 65
    4cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	bc 01       	movw	r22, r24
    4cb6:	cd 01       	movw	r24, r26
    4cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	9a a3       	std	Y+34, r25	; 0x22
    4cc2:	89 a3       	std	Y+33, r24	; 0x21
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <LinkedList_show+0x202>
    4cc6:	88 ec       	ldi	r24, 0xC8	; 200
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	98 a3       	std	Y+32, r25	; 0x20
    4ccc:	8f 8f       	std	Y+31, r24	; 0x1f
    4cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4cd0:	98 a1       	ldd	r25, Y+32	; 0x20
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	f1 f7       	brne	.-4      	; 0x4cd2 <LinkedList_show+0x1f0>
    4cd6:	98 a3       	std	Y+32, r25	; 0x20
    4cd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cda:	89 a1       	ldd	r24, Y+33	; 0x21
    4cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	9a a3       	std	Y+34, r25	; 0x22
    4ce2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    4ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    4ce8:	00 97       	sbiw	r24, 0x00	; 0
    4cea:	69 f7       	brne	.-38     	; 0x4cc6 <LinkedList_show+0x1e4>
    4cec:	14 c0       	rjmp	.+40     	; 0x4d16 <LinkedList_show+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cee:	6b a1       	ldd	r22, Y+35	; 0x23
    4cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    4cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    4cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    4cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	9a a3       	std	Y+34, r25	; 0x22
    4d00:	89 a3       	std	Y+33, r24	; 0x21
    4d02:	89 a1       	ldd	r24, Y+33	; 0x21
    4d04:	9a a1       	ldd	r25, Y+34	; 0x22
    4d06:	9e 8f       	std	Y+30, r25	; 0x1e
    4d08:	8d 8f       	std	Y+29, r24	; 0x1d
    4d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <LinkedList_show+0x22c>
    4d12:	9e 8f       	std	Y+30, r25	; 0x1e
    4d14:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	60 e2       	ldi	r22, 0x20	; 32
    4d1a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		ptr_member = root_member;
    4d1e:	80 91 be 03 	lds	r24, 0x03BE
    4d22:	90 91 bf 03 	lds	r25, 0x03BF
    4d26:	90 93 bd 03 	sts	0x03BD, r25
    4d2a:	80 93 bc 03 	sts	0x03BC, r24
		return false;
    4d2e:	1a ae       	std	Y+58, r1	; 0x3a
    4d30:	48 c1       	rjmp	.+656    	; 0x4fc2 <LinkedList_show+0x4e0>
	}


	do
	{
		LCD_vidGoTo(1, 2);
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	62 e0       	ldi	r22, 0x02	; 2
    4d36:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
		LCD_String("MEMB_ID:");
    4d3a:	8c eb       	ldi	r24, 0xBC	; 188
    4d3c:	91 e0       	ldi	r25, 0x01	; 1
    4d3e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		LCD_String(ptr_member -> ID_STRUCT);
    4d42:	e0 91 bc 03 	lds	r30, 0x03BC
    4d46:	f0 91 bd 03 	lds	r31, 0x03BD
    4d4a:	83 81       	ldd	r24, Z+3	; 0x03
    4d4c:	94 81       	ldd	r25, Z+4	; 0x04
    4d4e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>

		LCD_vidGoTo(1, 1);
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
		LCD_String("MEMB_NAME:");
    4d5a:	85 ec       	ldi	r24, 0xC5	; 197
    4d5c:	91 e0       	ldi	r25, 0x01	; 1
    4d5e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		LCD_String(ptr_member -> NAME_STRUCT);
    4d62:	e0 91 bc 03 	lds	r30, 0x03BC
    4d66:	f0 91 bd 03 	lds	r31, 0x03BD
    4d6a:	80 81       	ld	r24, Z
    4d6c:	91 81       	ldd	r25, Z+1	; 0x01
    4d6e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    4d72:	80 e0       	ldi	r24, 0x00	; 0
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	aa ef       	ldi	r26, 0xFA	; 250
    4d78:	b4 e4       	ldi	r27, 0x44	; 68
    4d7a:	89 8f       	std	Y+25, r24	; 0x19
    4d7c:	9a 8f       	std	Y+26, r25	; 0x1a
    4d7e:	ab 8f       	std	Y+27, r26	; 0x1b
    4d80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d82:	69 8d       	ldd	r22, Y+25	; 0x19
    4d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	4a ef       	ldi	r20, 0xFA	; 250
    4d90:	54 e4       	ldi	r21, 0x44	; 68
    4d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	8d 8b       	std	Y+21, r24	; 0x15
    4d9c:	9e 8b       	std	Y+22, r25	; 0x16
    4d9e:	af 8b       	std	Y+23, r26	; 0x17
    4da0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4da2:	6d 89       	ldd	r22, Y+21	; 0x15
    4da4:	7e 89       	ldd	r23, Y+22	; 0x16
    4da6:	8f 89       	ldd	r24, Y+23	; 0x17
    4da8:	98 8d       	ldd	r25, Y+24	; 0x18
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e8       	ldi	r20, 0x80	; 128
    4db0:	5f e3       	ldi	r21, 0x3F	; 63
    4db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4db6:	88 23       	and	r24, r24
    4db8:	2c f4       	brge	.+10     	; 0x4dc4 <LinkedList_show+0x2e2>
		__ticks = 1;
    4dba:	81 e0       	ldi	r24, 0x01	; 1
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	9c 8b       	std	Y+20, r25	; 0x14
    4dc0:	8b 8b       	std	Y+19, r24	; 0x13
    4dc2:	3f c0       	rjmp	.+126    	; 0x4e42 <LinkedList_show+0x360>
	else if (__tmp > 65535)
    4dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    4dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4dca:	98 8d       	ldd	r25, Y+24	; 0x18
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	3f ef       	ldi	r19, 0xFF	; 255
    4dd0:	4f e7       	ldi	r20, 0x7F	; 127
    4dd2:	57 e4       	ldi	r21, 0x47	; 71
    4dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dd8:	18 16       	cp	r1, r24
    4dda:	4c f5       	brge	.+82     	; 0x4e2e <LinkedList_show+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    4dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	40 e2       	ldi	r20, 0x20	; 32
    4dea:	51 e4       	ldi	r21, 0x41	; 65
    4dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	bc 01       	movw	r22, r24
    4df6:	cd 01       	movw	r24, r26
    4df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	cb 01       	movw	r24, r22
    4e00:	9c 8b       	std	Y+20, r25	; 0x14
    4e02:	8b 8b       	std	Y+19, r24	; 0x13
    4e04:	0f c0       	rjmp	.+30     	; 0x4e24 <LinkedList_show+0x342>
    4e06:	88 ec       	ldi	r24, 0xC8	; 200
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	9a 8b       	std	Y+18, r25	; 0x12
    4e0c:	89 8b       	std	Y+17, r24	; 0x11
    4e0e:	89 89       	ldd	r24, Y+17	; 0x11
    4e10:	9a 89       	ldd	r25, Y+18	; 0x12
    4e12:	01 97       	sbiw	r24, 0x01	; 1
    4e14:	f1 f7       	brne	.-4      	; 0x4e12 <LinkedList_show+0x330>
    4e16:	9a 8b       	std	Y+18, r25	; 0x12
    4e18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e1e:	01 97       	sbiw	r24, 0x01	; 1
    4e20:	9c 8b       	std	Y+20, r25	; 0x14
    4e22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e24:	8b 89       	ldd	r24, Y+19	; 0x13
    4e26:	9c 89       	ldd	r25, Y+20	; 0x14
    4e28:	00 97       	sbiw	r24, 0x00	; 0
    4e2a:	69 f7       	brne	.-38     	; 0x4e06 <LinkedList_show+0x324>
    4e2c:	14 c0       	rjmp	.+40     	; 0x4e56 <LinkedList_show+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4e30:	7e 89       	ldd	r23, Y+22	; 0x16
    4e32:	8f 89       	ldd	r24, Y+23	; 0x17
    4e34:	98 8d       	ldd	r25, Y+24	; 0x18
    4e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3a:	dc 01       	movw	r26, r24
    4e3c:	cb 01       	movw	r24, r22
    4e3e:	9c 8b       	std	Y+20, r25	; 0x14
    4e40:	8b 8b       	std	Y+19, r24	; 0x13
    4e42:	8b 89       	ldd	r24, Y+19	; 0x13
    4e44:	9c 89       	ldd	r25, Y+20	; 0x14
    4e46:	98 8b       	std	Y+16, r25	; 0x10
    4e48:	8f 87       	std	Y+15, r24	; 0x0f
    4e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e4c:	98 89       	ldd	r25, Y+16	; 0x10
    4e4e:	01 97       	sbiw	r24, 0x01	; 1
    4e50:	f1 f7       	brne	.-4      	; 0x4e4e <LinkedList_show+0x36c>
    4e52:	98 8b       	std	Y+16, r25	; 0x10
    4e54:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	60 e2       	ldi	r22, 0x20	; 32
    4e5a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

		LCD_String("ID_BOOKS:");
    4e5e:	80 ed       	ldi	r24, 0xD0	; 208
    4e60:	91 e0       	ldi	r25, 0x01	; 1
    4e62:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4e66:	19 ae       	std	Y+57, r1	; 0x39
    4e68:	18 c0       	rjmp	.+48     	; 0x4e9a <LinkedList_show+0x3b8>
		{
			LCD_vidGoTo(i + 1, 2);
    4e6a:	89 ad       	ldd	r24, Y+57	; 0x39
    4e6c:	8f 5f       	subi	r24, 0xFF	; 255
    4e6e:	62 e0       	ldi	r22, 0x02	; 2
    4e70:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			LinkedList_vidCompanion(ptr_member -> MEMBER_CARD_BOOKS[i]);
    4e74:	20 91 bc 03 	lds	r18, 0x03BC
    4e78:	30 91 bd 03 	lds	r19, 0x03BD
    4e7c:	89 ad       	ldd	r24, Y+57	; 0x39
    4e7e:	88 2f       	mov	r24, r24
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	82 0f       	add	r24, r18
    4e84:	93 1f       	adc	r25, r19
    4e86:	fc 01       	movw	r30, r24
    4e88:	35 96       	adiw	r30, 0x05	; 5
    4e8a:	80 81       	ld	r24, Z
    4e8c:	88 2f       	mov	r24, r24
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	0e 94 41 2a 	call	0x5482	; 0x5482 <LinkedList_vidCompanion>

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);

		LCD_String("ID_BOOKS:");
		for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4e94:	89 ad       	ldd	r24, Y+57	; 0x39
    4e96:	8f 5f       	subi	r24, 0xFF	; 255
    4e98:	89 af       	std	Y+57, r24	; 0x39
    4e9a:	89 ad       	ldd	r24, Y+57	; 0x39
    4e9c:	85 30       	cpi	r24, 0x05	; 5
    4e9e:	28 f3       	brcs	.-54     	; 0x4e6a <LinkedList_show+0x388>
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	aa ef       	ldi	r26, 0xFA	; 250
    4ea6:	b4 e4       	ldi	r27, 0x44	; 68
    4ea8:	8b 87       	std	Y+11, r24	; 0x0b
    4eaa:	9c 87       	std	Y+12, r25	; 0x0c
    4eac:	ad 87       	std	Y+13, r26	; 0x0d
    4eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	4a ef       	ldi	r20, 0xFA	; 250
    4ebe:	54 e4       	ldi	r21, 0x44	; 68
    4ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	8f 83       	std	Y+7, r24	; 0x07
    4eca:	98 87       	std	Y+8, r25	; 0x08
    4ecc:	a9 87       	std	Y+9, r26	; 0x09
    4ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ed2:	78 85       	ldd	r23, Y+8	; 0x08
    4ed4:	89 85       	ldd	r24, Y+9	; 0x09
    4ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ed8:	20 e0       	ldi	r18, 0x00	; 0
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	40 e8       	ldi	r20, 0x80	; 128
    4ede:	5f e3       	ldi	r21, 0x3F	; 63
    4ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ee4:	88 23       	and	r24, r24
    4ee6:	2c f4       	brge	.+10     	; 0x4ef2 <LinkedList_show+0x410>
		__ticks = 1;
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	9e 83       	std	Y+6, r25	; 0x06
    4eee:	8d 83       	std	Y+5, r24	; 0x05
    4ef0:	3f c0       	rjmp	.+126    	; 0x4f70 <LinkedList_show+0x48e>
	else if (__tmp > 65535)
    4ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ef4:	78 85       	ldd	r23, Y+8	; 0x08
    4ef6:	89 85       	ldd	r24, Y+9	; 0x09
    4ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	3f ef       	ldi	r19, 0xFF	; 255
    4efe:	4f e7       	ldi	r20, 0x7F	; 127
    4f00:	57 e4       	ldi	r21, 0x47	; 71
    4f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f06:	18 16       	cp	r1, r24
    4f08:	4c f5       	brge	.+82     	; 0x4f5c <LinkedList_show+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	40 e2       	ldi	r20, 0x20	; 32
    4f18:	51 e4       	ldi	r21, 0x41	; 65
    4f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	bc 01       	movw	r22, r24
    4f24:	cd 01       	movw	r24, r26
    4f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	cb 01       	movw	r24, r22
    4f2e:	9e 83       	std	Y+6, r25	; 0x06
    4f30:	8d 83       	std	Y+5, r24	; 0x05
    4f32:	0f c0       	rjmp	.+30     	; 0x4f52 <LinkedList_show+0x470>
    4f34:	88 ec       	ldi	r24, 0xC8	; 200
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	9c 83       	std	Y+4, r25	; 0x04
    4f3a:	8b 83       	std	Y+3, r24	; 0x03
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	f1 f7       	brne	.-4      	; 0x4f40 <LinkedList_show+0x45e>
    4f44:	9c 83       	std	Y+4, r25	; 0x04
    4f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f48:	8d 81       	ldd	r24, Y+5	; 0x05
    4f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f4c:	01 97       	sbiw	r24, 0x01	; 1
    4f4e:	9e 83       	std	Y+6, r25	; 0x06
    4f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f52:	8d 81       	ldd	r24, Y+5	; 0x05
    4f54:	9e 81       	ldd	r25, Y+6	; 0x06
    4f56:	00 97       	sbiw	r24, 0x00	; 0
    4f58:	69 f7       	brne	.-38     	; 0x4f34 <LinkedList_show+0x452>
    4f5a:	14 c0       	rjmp	.+40     	; 0x4f84 <LinkedList_show+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f5e:	78 85       	ldd	r23, Y+8	; 0x08
    4f60:	89 85       	ldd	r24, Y+9	; 0x09
    4f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	9e 83       	std	Y+6, r25	; 0x06
    4f6e:	8d 83       	std	Y+5, r24	; 0x05
    4f70:	8d 81       	ldd	r24, Y+5	; 0x05
    4f72:	9e 81       	ldd	r25, Y+6	; 0x06
    4f74:	9a 83       	std	Y+2, r25	; 0x02
    4f76:	89 83       	std	Y+1, r24	; 0x01
    4f78:	89 81       	ldd	r24, Y+1	; 0x01
    4f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	f1 f7       	brne	.-4      	; 0x4f7c <LinkedList_show+0x49a>
    4f80:	9a 83       	std	Y+2, r25	; 0x02
    4f82:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidGoTo(i + 1, 2);
			LinkedList_vidCompanion(ptr_member -> MEMBER_CARD_BOOKS[i]);
		}

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	60 e2       	ldi	r22, 0x20	; 32
    4f88:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		ptr_member = ptr_member -> NEXT_STRUCT;
    4f8c:	e0 91 bc 03 	lds	r30, 0x03BC
    4f90:	f0 91 bd 03 	lds	r31, 0x03BD
    4f94:	82 85       	ldd	r24, Z+10	; 0x0a
    4f96:	93 85       	ldd	r25, Z+11	; 0x0b
    4f98:	90 93 bd 03 	sts	0x03BD, r25
    4f9c:	80 93 bc 03 	sts	0x03BC, r24
	}
	while(ptr_member != NULL);
    4fa0:	80 91 bc 03 	lds	r24, 0x03BC
    4fa4:	90 91 bd 03 	lds	r25, 0x03BD
    4fa8:	00 97       	sbiw	r24, 0x00	; 0
    4faa:	09 f0       	breq	.+2      	; 0x4fae <LinkedList_show+0x4cc>
    4fac:	c2 ce       	rjmp	.-636    	; 0x4d32 <LinkedList_show+0x250>
	
	ptr_member = root_member;
    4fae:	80 91 be 03 	lds	r24, 0x03BE
    4fb2:	90 91 bf 03 	lds	r25, 0x03BF
    4fb6:	90 93 bd 03 	sts	0x03BD, r25
    4fba:	80 93 bc 03 	sts	0x03BC, r24

	return true;
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	8a af       	std	Y+58, r24	; 0x3a
    4fc2:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    4fc4:	ea 96       	adiw	r28, 0x3a	; 58
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	de bf       	out	0x3e, r29	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	cd bf       	out	0x3d, r28	; 61
    4fd0:	cf 91       	pop	r28
    4fd2:	df 91       	pop	r29
    4fd4:	08 95       	ret

00004fd6 <RETURN_vid>:



// RETURN from books
void RETURN_vid(char *id, char *serial)
{
    4fd6:	df 93       	push	r29
    4fd8:	cf 93       	push	r28
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
    4fde:	c1 54       	subi	r28, 0x41	; 65
    4fe0:	d0 40       	sbci	r29, 0x00	; 0
    4fe2:	0f b6       	in	r0, 0x3f	; 63
    4fe4:	f8 94       	cli
    4fe6:	de bf       	out	0x3e, r29	; 62
    4fe8:	0f be       	out	0x3f, r0	; 63
    4fea:	cd bf       	out	0x3d, r28	; 61
    4fec:	9f af       	std	Y+63, r25	; 0x3f
    4fee:	8e af       	std	Y+62, r24	; 0x3e
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	e0 5c       	subi	r30, 0xC0	; 192
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	71 83       	std	Z+1, r23	; 0x01
    4ff8:	60 83       	st	Z, r22
	char R_flag = 0;
    4ffa:	1d ae       	std	Y+61, r1	; 0x3d
	u8 index = 0;
    4ffc:	1c ae       	std	Y+60, r1	; 0x3c
	

	// Search for member and don't show old books
	members *tmp = search(id, 0);
    4ffe:	8e ad       	ldd	r24, Y+62	; 0x3e
    5000:	9f ad       	ldd	r25, Y+63	; 0x3f
    5002:	60 e0       	ldi	r22, 0x00	; 0
    5004:	0e 94 c4 21 	call	0x4388	; 0x4388 <search>
    5008:	9b af       	std	Y+59, r25	; 0x3b
    500a:	8a af       	std	Y+58, r24	; 0x3a
	
	// Search for the book via ISBN
	index = BOOKS_search(serial, 0);
    500c:	fe 01       	movw	r30, r28
    500e:	e0 5c       	subi	r30, 0xC0	; 192
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	80 81       	ld	r24, Z
    5014:	91 81       	ldd	r25, Z+1	; 0x01
    5016:	60 e0       	ldi	r22, 0x00	; 0
    5018:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <BOOKS_search>
    501c:	8c af       	std	Y+60, r24	; 0x3c
	
	if(!tmp)
    501e:	8a ad       	ldd	r24, Y+58	; 0x3a
    5020:	9b ad       	ldd	r25, Y+59	; 0x3b
    5022:	00 97       	sbiw	r24, 0x00	; 0
    5024:	09 f0       	breq	.+2      	; 0x5028 <RETURN_vid+0x52>
    5026:	7b c0       	rjmp	.+246    	; 0x511e <RETURN_vid+0x148>
	{
		// Invalid ID
		LCD_String("ERROR:Inv_ID");
    5028:	8a ed       	ldi	r24, 0xDA	; 218
    502a:	91 e0       	ldi	r25, 0x01	; 1
    502c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    5030:	80 e0       	ldi	r24, 0x00	; 0
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	aa ef       	ldi	r26, 0xFA	; 250
    5036:	b4 e4       	ldi	r27, 0x44	; 68
    5038:	8d ab       	std	Y+53, r24	; 0x35
    503a:	9e ab       	std	Y+54, r25	; 0x36
    503c:	af ab       	std	Y+55, r26	; 0x37
    503e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5040:	6d a9       	ldd	r22, Y+53	; 0x35
    5042:	7e a9       	ldd	r23, Y+54	; 0x36
    5044:	8f a9       	ldd	r24, Y+55	; 0x37
    5046:	98 ad       	ldd	r25, Y+56	; 0x38
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	4a ef       	ldi	r20, 0xFA	; 250
    504e:	54 e4       	ldi	r21, 0x44	; 68
    5050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	89 ab       	std	Y+49, r24	; 0x31
    505a:	9a ab       	std	Y+50, r25	; 0x32
    505c:	ab ab       	std	Y+51, r26	; 0x33
    505e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5060:	69 a9       	ldd	r22, Y+49	; 0x31
    5062:	7a a9       	ldd	r23, Y+50	; 0x32
    5064:	8b a9       	ldd	r24, Y+51	; 0x33
    5066:	9c a9       	ldd	r25, Y+52	; 0x34
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	40 e8       	ldi	r20, 0x80	; 128
    506e:	5f e3       	ldi	r21, 0x3F	; 63
    5070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5074:	88 23       	and	r24, r24
    5076:	2c f4       	brge	.+10     	; 0x5082 <RETURN_vid+0xac>
		__ticks = 1;
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	98 ab       	std	Y+48, r25	; 0x30
    507e:	8f a7       	std	Y+47, r24	; 0x2f
    5080:	3f c0       	rjmp	.+126    	; 0x5100 <RETURN_vid+0x12a>
	else if (__tmp > 65535)
    5082:	69 a9       	ldd	r22, Y+49	; 0x31
    5084:	7a a9       	ldd	r23, Y+50	; 0x32
    5086:	8b a9       	ldd	r24, Y+51	; 0x33
    5088:	9c a9       	ldd	r25, Y+52	; 0x34
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	3f ef       	ldi	r19, 0xFF	; 255
    508e:	4f e7       	ldi	r20, 0x7F	; 127
    5090:	57 e4       	ldi	r21, 0x47	; 71
    5092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5096:	18 16       	cp	r1, r24
    5098:	4c f5       	brge	.+82     	; 0x50ec <RETURN_vid+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    509a:	6d a9       	ldd	r22, Y+53	; 0x35
    509c:	7e a9       	ldd	r23, Y+54	; 0x36
    509e:	8f a9       	ldd	r24, Y+55	; 0x37
    50a0:	98 ad       	ldd	r25, Y+56	; 0x38
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	30 e0       	ldi	r19, 0x00	; 0
    50a6:	40 e2       	ldi	r20, 0x20	; 32
    50a8:	51 e4       	ldi	r21, 0x41	; 65
    50aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	bc 01       	movw	r22, r24
    50b4:	cd 01       	movw	r24, r26
    50b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	98 ab       	std	Y+48, r25	; 0x30
    50c0:	8f a7       	std	Y+47, r24	; 0x2f
    50c2:	0f c0       	rjmp	.+30     	; 0x50e2 <RETURN_vid+0x10c>
    50c4:	88 ec       	ldi	r24, 0xC8	; 200
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	9e a7       	std	Y+46, r25	; 0x2e
    50ca:	8d a7       	std	Y+45, r24	; 0x2d
    50cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    50ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    50d0:	01 97       	sbiw	r24, 0x01	; 1
    50d2:	f1 f7       	brne	.-4      	; 0x50d0 <RETURN_vid+0xfa>
    50d4:	9e a7       	std	Y+46, r25	; 0x2e
    50d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    50da:	98 a9       	ldd	r25, Y+48	; 0x30
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	98 ab       	std	Y+48, r25	; 0x30
    50e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    50e4:	98 a9       	ldd	r25, Y+48	; 0x30
    50e6:	00 97       	sbiw	r24, 0x00	; 0
    50e8:	69 f7       	brne	.-38     	; 0x50c4 <RETURN_vid+0xee>
    50ea:	14 c0       	rjmp	.+40     	; 0x5114 <RETURN_vid+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ec:	69 a9       	ldd	r22, Y+49	; 0x31
    50ee:	7a a9       	ldd	r23, Y+50	; 0x32
    50f0:	8b a9       	ldd	r24, Y+51	; 0x33
    50f2:	9c a9       	ldd	r25, Y+52	; 0x34
    50f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f8:	dc 01       	movw	r26, r24
    50fa:	cb 01       	movw	r24, r22
    50fc:	98 ab       	std	Y+48, r25	; 0x30
    50fe:	8f a7       	std	Y+47, r24	; 0x2f
    5100:	8f a5       	ldd	r24, Y+47	; 0x2f
    5102:	98 a9       	ldd	r25, Y+48	; 0x30
    5104:	9c a7       	std	Y+44, r25	; 0x2c
    5106:	8b a7       	std	Y+43, r24	; 0x2b
    5108:	8b a5       	ldd	r24, Y+43	; 0x2b
    510a:	9c a5       	ldd	r25, Y+44	; 0x2c
    510c:	01 97       	sbiw	r24, 0x01	; 1
    510e:	f1 f7       	brne	.-4      	; 0x510c <RETURN_vid+0x136>
    5110:	9c a7       	std	Y+44, r25	; 0x2c
    5112:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	60 e2       	ldi	r22, 0x20	; 32
    5118:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
    511c:	a8 c1       	rjmp	.+848    	; 0x546e <RETURN_vid+0x498>
	}
	else
	{
		// Valid Serial 
		if( index != DoesNot_exist)
    511e:	8c ad       	ldd	r24, Y+60	; 0x3c
    5120:	88 23       	and	r24, r24
    5122:	09 f4       	brne	.+2      	; 0x5126 <RETURN_vid+0x150>
    5124:	a2 c0       	rjmp	.+324    	; 0x526a <RETURN_vid+0x294>
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    5126:	19 ae       	std	Y+57, r1	; 0x39
    5128:	9b c0       	rjmp	.+310    	; 0x5260 <RETURN_vid+0x28a>
			{
				if(tmp -> MEMBER_CARD_BOOKS[j] == index)
    512a:	89 ad       	ldd	r24, Y+57	; 0x39
    512c:	28 2f       	mov	r18, r24
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	8a ad       	ldd	r24, Y+58	; 0x3a
    5132:	9b ad       	ldd	r25, Y+59	; 0x3b
    5134:	82 0f       	add	r24, r18
    5136:	93 1f       	adc	r25, r19
    5138:	fc 01       	movw	r30, r24
    513a:	35 96       	adiw	r30, 0x05	; 5
    513c:	90 81       	ld	r25, Z
    513e:	8c ad       	ldd	r24, Y+60	; 0x3c
    5140:	98 17       	cp	r25, r24
    5142:	09 f0       	breq	.+2      	; 0x5146 <RETURN_vid+0x170>
    5144:	8a c0       	rjmp	.+276    	; 0x525a <RETURN_vid+0x284>
				{		
					BOOKS_COPIES_INCREASE();
    5146:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <BOOKS_COPIES_INCREASE>
					
					// Return and remove from MEMBER_CARD_BOOKS[]
					tmp -> MEMBER_CARD_BOOKS[j] = 0;
    514a:	89 ad       	ldd	r24, Y+57	; 0x39
    514c:	28 2f       	mov	r18, r24
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	8a ad       	ldd	r24, Y+58	; 0x3a
    5152:	9b ad       	ldd	r25, Y+59	; 0x3b
    5154:	82 0f       	add	r24, r18
    5156:	93 1f       	adc	r25, r19
    5158:	fc 01       	movw	r30, r24
    515a:	35 96       	adiw	r30, 0x05	; 5
    515c:	10 82       	st	Z, r1

					LCD_String("RETURN -> SUCCESS:");
    515e:	87 ee       	ldi	r24, 0xE7	; 231
    5160:	91 e0       	ldi	r25, 0x01	; 1
    5162:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	aa ef       	ldi	r26, 0xFA	; 250
    516c:	b4 e4       	ldi	r27, 0x44	; 68
    516e:	8f a3       	std	Y+39, r24	; 0x27
    5170:	98 a7       	std	Y+40, r25	; 0x28
    5172:	a9 a7       	std	Y+41, r26	; 0x29
    5174:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5176:	6f a1       	ldd	r22, Y+39	; 0x27
    5178:	78 a5       	ldd	r23, Y+40	; 0x28
    517a:	89 a5       	ldd	r24, Y+41	; 0x29
    517c:	9a a5       	ldd	r25, Y+42	; 0x2a
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	4a ef       	ldi	r20, 0xFA	; 250
    5184:	54 e4       	ldi	r21, 0x44	; 68
    5186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	8b a3       	std	Y+35, r24	; 0x23
    5190:	9c a3       	std	Y+36, r25	; 0x24
    5192:	ad a3       	std	Y+37, r26	; 0x25
    5194:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5196:	6b a1       	ldd	r22, Y+35	; 0x23
    5198:	7c a1       	ldd	r23, Y+36	; 0x24
    519a:	8d a1       	ldd	r24, Y+37	; 0x25
    519c:	9e a1       	ldd	r25, Y+38	; 0x26
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	40 e8       	ldi	r20, 0x80	; 128
    51a4:	5f e3       	ldi	r21, 0x3F	; 63
    51a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51aa:	88 23       	and	r24, r24
    51ac:	2c f4       	brge	.+10     	; 0x51b8 <RETURN_vid+0x1e2>
		__ticks = 1;
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	9a a3       	std	Y+34, r25	; 0x22
    51b4:	89 a3       	std	Y+33, r24	; 0x21
    51b6:	3f c0       	rjmp	.+126    	; 0x5236 <RETURN_vid+0x260>
	else if (__tmp > 65535)
    51b8:	6b a1       	ldd	r22, Y+35	; 0x23
    51ba:	7c a1       	ldd	r23, Y+36	; 0x24
    51bc:	8d a1       	ldd	r24, Y+37	; 0x25
    51be:	9e a1       	ldd	r25, Y+38	; 0x26
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	3f ef       	ldi	r19, 0xFF	; 255
    51c4:	4f e7       	ldi	r20, 0x7F	; 127
    51c6:	57 e4       	ldi	r21, 0x47	; 71
    51c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51cc:	18 16       	cp	r1, r24
    51ce:	4c f5       	brge	.+82     	; 0x5222 <RETURN_vid+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d0:	6f a1       	ldd	r22, Y+39	; 0x27
    51d2:	78 a5       	ldd	r23, Y+40	; 0x28
    51d4:	89 a5       	ldd	r24, Y+41	; 0x29
    51d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	40 e2       	ldi	r20, 0x20	; 32
    51de:	51 e4       	ldi	r21, 0x41	; 65
    51e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51e4:	dc 01       	movw	r26, r24
    51e6:	cb 01       	movw	r24, r22
    51e8:	bc 01       	movw	r22, r24
    51ea:	cd 01       	movw	r24, r26
    51ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f0:	dc 01       	movw	r26, r24
    51f2:	cb 01       	movw	r24, r22
    51f4:	9a a3       	std	Y+34, r25	; 0x22
    51f6:	89 a3       	std	Y+33, r24	; 0x21
    51f8:	0f c0       	rjmp	.+30     	; 0x5218 <RETURN_vid+0x242>
    51fa:	88 ec       	ldi	r24, 0xC8	; 200
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	98 a3       	std	Y+32, r25	; 0x20
    5200:	8f 8f       	std	Y+31, r24	; 0x1f
    5202:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5204:	98 a1       	ldd	r25, Y+32	; 0x20
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	f1 f7       	brne	.-4      	; 0x5206 <RETURN_vid+0x230>
    520a:	98 a3       	std	Y+32, r25	; 0x20
    520c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    520e:	89 a1       	ldd	r24, Y+33	; 0x21
    5210:	9a a1       	ldd	r25, Y+34	; 0x22
    5212:	01 97       	sbiw	r24, 0x01	; 1
    5214:	9a a3       	std	Y+34, r25	; 0x22
    5216:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5218:	89 a1       	ldd	r24, Y+33	; 0x21
    521a:	9a a1       	ldd	r25, Y+34	; 0x22
    521c:	00 97       	sbiw	r24, 0x00	; 0
    521e:	69 f7       	brne	.-38     	; 0x51fa <RETURN_vid+0x224>
    5220:	14 c0       	rjmp	.+40     	; 0x524a <RETURN_vid+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5222:	6b a1       	ldd	r22, Y+35	; 0x23
    5224:	7c a1       	ldd	r23, Y+36	; 0x24
    5226:	8d a1       	ldd	r24, Y+37	; 0x25
    5228:	9e a1       	ldd	r25, Y+38	; 0x26
    522a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	9a a3       	std	Y+34, r25	; 0x22
    5234:	89 a3       	std	Y+33, r24	; 0x21
    5236:	89 a1       	ldd	r24, Y+33	; 0x21
    5238:	9a a1       	ldd	r25, Y+34	; 0x22
    523a:	9e 8f       	std	Y+30, r25	; 0x1e
    523c:	8d 8f       	std	Y+29, r24	; 0x1d
    523e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5240:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	f1 f7       	brne	.-4      	; 0x5242 <RETURN_vid+0x26c>
    5246:	9e 8f       	std	Y+30, r25	; 0x1e
    5248:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
					LCD_vidClearOnDemand(1, 32);
    524a:	81 e0       	ldi	r24, 0x01	; 1
    524c:	60 e2       	ldi	r22, 0x20	; 32
    524e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
					R_flag = 1;
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	8d af       	std	Y+61, r24	; 0x3d
					j = AVAILABLE_SHARES;					
    5256:	85 e0       	ldi	r24, 0x05	; 5
    5258:	89 af       	std	Y+57, r24	; 0x39
	{
		// Valid Serial 
		if( index != DoesNot_exist)
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    525a:	89 ad       	ldd	r24, Y+57	; 0x39
    525c:	8f 5f       	subi	r24, 0xFF	; 255
    525e:	89 af       	std	Y+57, r24	; 0x39
    5260:	89 ad       	ldd	r24, Y+57	; 0x39
    5262:	85 30       	cpi	r24, 0x05	; 5
    5264:	08 f4       	brcc	.+2      	; 0x5268 <RETURN_vid+0x292>
    5266:	61 cf       	rjmp	.-318    	; 0x512a <RETURN_vid+0x154>
    5268:	7c c0       	rjmp	.+248    	; 0x5362 <RETURN_vid+0x38c>
				else;
			}
		}
		else
		{
			R_flag = 1;
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	8d af       	std	Y+61, r24	; 0x3d
			LCD_String("Invalid ISBN");
    526e:	89 e8       	ldi	r24, 0x89	; 137
    5270:	91 e0       	ldi	r25, 0x01	; 1
    5272:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    5276:	80 e0       	ldi	r24, 0x00	; 0
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	aa ef       	ldi	r26, 0xFA	; 250
    527c:	b4 e4       	ldi	r27, 0x44	; 68
    527e:	89 8f       	std	Y+25, r24	; 0x19
    5280:	9a 8f       	std	Y+26, r25	; 0x1a
    5282:	ab 8f       	std	Y+27, r26	; 0x1b
    5284:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5286:	69 8d       	ldd	r22, Y+25	; 0x19
    5288:	7a 8d       	ldd	r23, Y+26	; 0x1a
    528a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    528c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	4a ef       	ldi	r20, 0xFA	; 250
    5294:	54 e4       	ldi	r21, 0x44	; 68
    5296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    529a:	dc 01       	movw	r26, r24
    529c:	cb 01       	movw	r24, r22
    529e:	8d 8b       	std	Y+21, r24	; 0x15
    52a0:	9e 8b       	std	Y+22, r25	; 0x16
    52a2:	af 8b       	std	Y+23, r26	; 0x17
    52a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52a6:	6d 89       	ldd	r22, Y+21	; 0x15
    52a8:	7e 89       	ldd	r23, Y+22	; 0x16
    52aa:	8f 89       	ldd	r24, Y+23	; 0x17
    52ac:	98 8d       	ldd	r25, Y+24	; 0x18
    52ae:	20 e0       	ldi	r18, 0x00	; 0
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	40 e8       	ldi	r20, 0x80	; 128
    52b4:	5f e3       	ldi	r21, 0x3F	; 63
    52b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ba:	88 23       	and	r24, r24
    52bc:	2c f4       	brge	.+10     	; 0x52c8 <RETURN_vid+0x2f2>
		__ticks = 1;
    52be:	81 e0       	ldi	r24, 0x01	; 1
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	9c 8b       	std	Y+20, r25	; 0x14
    52c4:	8b 8b       	std	Y+19, r24	; 0x13
    52c6:	3f c0       	rjmp	.+126    	; 0x5346 <RETURN_vid+0x370>
	else if (__tmp > 65535)
    52c8:	6d 89       	ldd	r22, Y+21	; 0x15
    52ca:	7e 89       	ldd	r23, Y+22	; 0x16
    52cc:	8f 89       	ldd	r24, Y+23	; 0x17
    52ce:	98 8d       	ldd	r25, Y+24	; 0x18
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	3f ef       	ldi	r19, 0xFF	; 255
    52d4:	4f e7       	ldi	r20, 0x7F	; 127
    52d6:	57 e4       	ldi	r21, 0x47	; 71
    52d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52dc:	18 16       	cp	r1, r24
    52de:	4c f5       	brge	.+82     	; 0x5332 <RETURN_vid+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52e0:	69 8d       	ldd	r22, Y+25	; 0x19
    52e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52e8:	20 e0       	ldi	r18, 0x00	; 0
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	40 e2       	ldi	r20, 0x20	; 32
    52ee:	51 e4       	ldi	r21, 0x41	; 65
    52f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f4:	dc 01       	movw	r26, r24
    52f6:	cb 01       	movw	r24, r22
    52f8:	bc 01       	movw	r22, r24
    52fa:	cd 01       	movw	r24, r26
    52fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	9c 8b       	std	Y+20, r25	; 0x14
    5306:	8b 8b       	std	Y+19, r24	; 0x13
    5308:	0f c0       	rjmp	.+30     	; 0x5328 <RETURN_vid+0x352>
    530a:	88 ec       	ldi	r24, 0xC8	; 200
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	9a 8b       	std	Y+18, r25	; 0x12
    5310:	89 8b       	std	Y+17, r24	; 0x11
    5312:	89 89       	ldd	r24, Y+17	; 0x11
    5314:	9a 89       	ldd	r25, Y+18	; 0x12
    5316:	01 97       	sbiw	r24, 0x01	; 1
    5318:	f1 f7       	brne	.-4      	; 0x5316 <RETURN_vid+0x340>
    531a:	9a 8b       	std	Y+18, r25	; 0x12
    531c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    531e:	8b 89       	ldd	r24, Y+19	; 0x13
    5320:	9c 89       	ldd	r25, Y+20	; 0x14
    5322:	01 97       	sbiw	r24, 0x01	; 1
    5324:	9c 8b       	std	Y+20, r25	; 0x14
    5326:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5328:	8b 89       	ldd	r24, Y+19	; 0x13
    532a:	9c 89       	ldd	r25, Y+20	; 0x14
    532c:	00 97       	sbiw	r24, 0x00	; 0
    532e:	69 f7       	brne	.-38     	; 0x530a <RETURN_vid+0x334>
    5330:	14 c0       	rjmp	.+40     	; 0x535a <RETURN_vid+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5332:	6d 89       	ldd	r22, Y+21	; 0x15
    5334:	7e 89       	ldd	r23, Y+22	; 0x16
    5336:	8f 89       	ldd	r24, Y+23	; 0x17
    5338:	98 8d       	ldd	r25, Y+24	; 0x18
    533a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    533e:	dc 01       	movw	r26, r24
    5340:	cb 01       	movw	r24, r22
    5342:	9c 8b       	std	Y+20, r25	; 0x14
    5344:	8b 8b       	std	Y+19, r24	; 0x13
    5346:	8b 89       	ldd	r24, Y+19	; 0x13
    5348:	9c 89       	ldd	r25, Y+20	; 0x14
    534a:	98 8b       	std	Y+16, r25	; 0x10
    534c:	8f 87       	std	Y+15, r24	; 0x0f
    534e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5350:	98 89       	ldd	r25, Y+16	; 0x10
    5352:	01 97       	sbiw	r24, 0x01	; 1
    5354:	f1 f7       	brne	.-4      	; 0x5352 <RETURN_vid+0x37c>
    5356:	98 8b       	std	Y+16, r25	; 0x10
    5358:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    535a:	81 e0       	ldi	r24, 0x01	; 1
    535c:	60 e2       	ldi	r22, 0x20	; 32
    535e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		}
		
		if(!R_flag)
    5362:	8d ad       	ldd	r24, Y+61	; 0x3d
    5364:	88 23       	and	r24, r24
    5366:	09 f0       	breq	.+2      	; 0x536a <RETURN_vid+0x394>
    5368:	82 c0       	rjmp	.+260    	; 0x546e <RETURN_vid+0x498>
		{
			LCD_String("Book not");
    536a:	8a ef       	ldi	r24, 0xFA	; 250
    536c:	91 e0       	ldi	r25, 0x01	; 1
    536e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
			LCD_vidGoTo(1, 2);
    5372:	81 e0       	ldi	r24, 0x01	; 1
    5374:	62 e0       	ldi	r22, 0x02	; 2
    5376:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
			LCD_String("borrowed!");
    537a:	83 e0       	ldi	r24, 0x03	; 3
    537c:	92 e0       	ldi	r25, 0x02	; 2
    537e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	aa ef       	ldi	r26, 0xFA	; 250
    5388:	b4 e4       	ldi	r27, 0x44	; 68
    538a:	8b 87       	std	Y+11, r24	; 0x0b
    538c:	9c 87       	std	Y+12, r25	; 0x0c
    538e:	ad 87       	std	Y+13, r26	; 0x0d
    5390:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5392:	6b 85       	ldd	r22, Y+11	; 0x0b
    5394:	7c 85       	ldd	r23, Y+12	; 0x0c
    5396:	8d 85       	ldd	r24, Y+13	; 0x0d
    5398:	9e 85       	ldd	r25, Y+14	; 0x0e
    539a:	20 e0       	ldi	r18, 0x00	; 0
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	4a ef       	ldi	r20, 0xFA	; 250
    53a0:	54 e4       	ldi	r21, 0x44	; 68
    53a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	8f 83       	std	Y+7, r24	; 0x07
    53ac:	98 87       	std	Y+8, r25	; 0x08
    53ae:	a9 87       	std	Y+9, r26	; 0x09
    53b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53b2:	6f 81       	ldd	r22, Y+7	; 0x07
    53b4:	78 85       	ldd	r23, Y+8	; 0x08
    53b6:	89 85       	ldd	r24, Y+9	; 0x09
    53b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	40 e8       	ldi	r20, 0x80	; 128
    53c0:	5f e3       	ldi	r21, 0x3F	; 63
    53c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53c6:	88 23       	and	r24, r24
    53c8:	2c f4       	brge	.+10     	; 0x53d4 <RETURN_vid+0x3fe>
		__ticks = 1;
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	9e 83       	std	Y+6, r25	; 0x06
    53d0:	8d 83       	std	Y+5, r24	; 0x05
    53d2:	3f c0       	rjmp	.+126    	; 0x5452 <RETURN_vid+0x47c>
	else if (__tmp > 65535)
    53d4:	6f 81       	ldd	r22, Y+7	; 0x07
    53d6:	78 85       	ldd	r23, Y+8	; 0x08
    53d8:	89 85       	ldd	r24, Y+9	; 0x09
    53da:	9a 85       	ldd	r25, Y+10	; 0x0a
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	3f ef       	ldi	r19, 0xFF	; 255
    53e0:	4f e7       	ldi	r20, 0x7F	; 127
    53e2:	57 e4       	ldi	r21, 0x47	; 71
    53e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53e8:	18 16       	cp	r1, r24
    53ea:	4c f5       	brge	.+82     	; 0x543e <RETURN_vid+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    53f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	40 e2       	ldi	r20, 0x20	; 32
    53fa:	51 e4       	ldi	r21, 0x41	; 65
    53fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	bc 01       	movw	r22, r24
    5406:	cd 01       	movw	r24, r26
    5408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	9e 83       	std	Y+6, r25	; 0x06
    5412:	8d 83       	std	Y+5, r24	; 0x05
    5414:	0f c0       	rjmp	.+30     	; 0x5434 <RETURN_vid+0x45e>
    5416:	88 ec       	ldi	r24, 0xC8	; 200
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	9c 83       	std	Y+4, r25	; 0x04
    541c:	8b 83       	std	Y+3, r24	; 0x03
    541e:	8b 81       	ldd	r24, Y+3	; 0x03
    5420:	9c 81       	ldd	r25, Y+4	; 0x04
    5422:	01 97       	sbiw	r24, 0x01	; 1
    5424:	f1 f7       	brne	.-4      	; 0x5422 <RETURN_vid+0x44c>
    5426:	9c 83       	std	Y+4, r25	; 0x04
    5428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    542a:	8d 81       	ldd	r24, Y+5	; 0x05
    542c:	9e 81       	ldd	r25, Y+6	; 0x06
    542e:	01 97       	sbiw	r24, 0x01	; 1
    5430:	9e 83       	std	Y+6, r25	; 0x06
    5432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5434:	8d 81       	ldd	r24, Y+5	; 0x05
    5436:	9e 81       	ldd	r25, Y+6	; 0x06
    5438:	00 97       	sbiw	r24, 0x00	; 0
    543a:	69 f7       	brne	.-38     	; 0x5416 <RETURN_vid+0x440>
    543c:	14 c0       	rjmp	.+40     	; 0x5466 <RETURN_vid+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    543e:	6f 81       	ldd	r22, Y+7	; 0x07
    5440:	78 85       	ldd	r23, Y+8	; 0x08
    5442:	89 85       	ldd	r24, Y+9	; 0x09
    5444:	9a 85       	ldd	r25, Y+10	; 0x0a
    5446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	9e 83       	std	Y+6, r25	; 0x06
    5450:	8d 83       	std	Y+5, r24	; 0x05
    5452:	8d 81       	ldd	r24, Y+5	; 0x05
    5454:	9e 81       	ldd	r25, Y+6	; 0x06
    5456:	9a 83       	std	Y+2, r25	; 0x02
    5458:	89 83       	std	Y+1, r24	; 0x01
    545a:	89 81       	ldd	r24, Y+1	; 0x01
    545c:	9a 81       	ldd	r25, Y+2	; 0x02
    545e:	01 97       	sbiw	r24, 0x01	; 1
    5460:	f1 f7       	brne	.-4      	; 0x545e <RETURN_vid+0x488>
    5462:	9a 83       	std	Y+2, r25	; 0x02
    5464:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	60 e2       	ldi	r22, 0x20	; 32
    546a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
		}
	}
}
    546e:	cf 5b       	subi	r28, 0xBF	; 191
    5470:	df 4f       	sbci	r29, 0xFF	; 255
    5472:	0f b6       	in	r0, 0x3f	; 63
    5474:	f8 94       	cli
    5476:	de bf       	out	0x3e, r29	; 62
    5478:	0f be       	out	0x3f, r0	; 63
    547a:	cd bf       	out	0x3d, r28	; 61
    547c:	cf 91       	pop	r28
    547e:	df 91       	pop	r29
    5480:	08 95       	ret

00005482 <LinkedList_vidCompanion>:


//  for user screen output
void LinkedList_vidCompanion(u16 show)
{
    5482:	df 93       	push	r29
    5484:	cf 93       	push	r28
    5486:	cd b7       	in	r28, 0x3d	; 61
    5488:	de b7       	in	r29, 0x3e	; 62
    548a:	27 97       	sbiw	r28, 0x07	; 7
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	f8 94       	cli
    5490:	de bf       	out	0x3e, r29	; 62
    5492:	0f be       	out	0x3f, r0	; 63
    5494:	cd bf       	out	0x3d, r28	; 61
    5496:	9f 83       	std	Y+7, r25	; 0x07
    5498:	8e 83       	std	Y+6, r24	; 0x06

	u16 *ptr = malloc(5 * sizeof(u16));
    549a:	8a e0       	ldi	r24, 0x0A	; 10
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <malloc>
    54a2:	9d 83       	std	Y+5, r25	; 0x05
    54a4:	8c 83       	std	Y+4, r24	; 0x04
	s8 k = 0, i = 0 ;
    54a6:	1b 82       	std	Y+3, r1	; 0x03
    54a8:	1a 82       	std	Y+2, r1	; 0x02

	// get values in order
	do
	{
		ptr[i] = (show%10) + 0x30;
    54aa:	8a 81       	ldd	r24, Y+2	; 0x02
    54ac:	99 27       	eor	r25, r25
    54ae:	87 fd       	sbrc	r24, 7
    54b0:	90 95       	com	r25
    54b2:	9c 01       	movw	r18, r24
    54b4:	22 0f       	add	r18, r18
    54b6:	33 1f       	adc	r19, r19
    54b8:	8c 81       	ldd	r24, Y+4	; 0x04
    54ba:	9d 81       	ldd	r25, Y+5	; 0x05
    54bc:	fc 01       	movw	r30, r24
    54be:	e2 0f       	add	r30, r18
    54c0:	f3 1f       	adc	r31, r19
    54c2:	8e 81       	ldd	r24, Y+6	; 0x06
    54c4:	9f 81       	ldd	r25, Y+7	; 0x07
    54c6:	2a e0       	ldi	r18, 0x0A	; 10
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	b9 01       	movw	r22, r18
    54cc:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodhi4>
    54d0:	c0 96       	adiw	r24, 0x30	; 48
    54d2:	91 83       	std	Z+1, r25	; 0x01
    54d4:	80 83       	st	Z, r24
		i++;
    54d6:	8a 81       	ldd	r24, Y+2	; 0x02
    54d8:	8f 5f       	subi	r24, 0xFF	; 255
    54da:	8a 83       	std	Y+2, r24	; 0x02
		show /= 10;
    54dc:	8e 81       	ldd	r24, Y+6	; 0x06
    54de:	9f 81       	ldd	r25, Y+7	; 0x07
    54e0:	2a e0       	ldi	r18, 0x0A	; 10
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	b9 01       	movw	r22, r18
    54e6:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodhi4>
    54ea:	cb 01       	movw	r24, r22
    54ec:	9f 83       	std	Y+7, r25	; 0x07
    54ee:	8e 83       	std	Y+6, r24	; 0x06
	}while(show);
    54f0:	8e 81       	ldd	r24, Y+6	; 0x06
    54f2:	9f 81       	ldd	r25, Y+7	; 0x07
    54f4:	00 97       	sbiw	r24, 0x00	; 0
    54f6:	c9 f6       	brne	.-78     	; 0x54aa <LinkedList_vidCompanion+0x28>

	ptr[i] = '\0';
    54f8:	8a 81       	ldd	r24, Y+2	; 0x02
    54fa:	99 27       	eor	r25, r25
    54fc:	87 fd       	sbrc	r24, 7
    54fe:	90 95       	com	r25
    5500:	9c 01       	movw	r18, r24
    5502:	22 0f       	add	r18, r18
    5504:	33 1f       	adc	r19, r19
    5506:	8c 81       	ldd	r24, Y+4	; 0x04
    5508:	9d 81       	ldd	r25, Y+5	; 0x05
    550a:	fc 01       	movw	r30, r24
    550c:	e2 0f       	add	r30, r18
    550e:	f3 1f       	adc	r31, r19
    5510:	11 82       	std	Z+1, r1	; 0x01
    5512:	10 82       	st	Z, r1

	// get string length
	for(k = 0; ptr[k] != '\0'; k++);
    5514:	1b 82       	std	Y+3, r1	; 0x03
    5516:	03 c0       	rjmp	.+6      	; 0x551e <LinkedList_vidCompanion+0x9c>
    5518:	8b 81       	ldd	r24, Y+3	; 0x03
    551a:	8f 5f       	subi	r24, 0xFF	; 255
    551c:	8b 83       	std	Y+3, r24	; 0x03
    551e:	8b 81       	ldd	r24, Y+3	; 0x03
    5520:	99 27       	eor	r25, r25
    5522:	87 fd       	sbrc	r24, 7
    5524:	90 95       	com	r25
    5526:	9c 01       	movw	r18, r24
    5528:	22 0f       	add	r18, r18
    552a:	33 1f       	adc	r19, r19
    552c:	8c 81       	ldd	r24, Y+4	; 0x04
    552e:	9d 81       	ldd	r25, Y+5	; 0x05
    5530:	fc 01       	movw	r30, r24
    5532:	e2 0f       	add	r30, r18
    5534:	f3 1f       	adc	r31, r19
    5536:	80 81       	ld	r24, Z
    5538:	91 81       	ldd	r25, Z+1	; 0x01
    553a:	00 97       	sbiw	r24, 0x00	; 0
    553c:	69 f7       	brne	.-38     	; 0x5518 <LinkedList_vidCompanion+0x96>

	//LCD_vidGoTo(1,2);

	// reverse the string sent
	for(s8 kk = k-1; kk >= 0; kk-- )
    553e:	8b 81       	ldd	r24, Y+3	; 0x03
    5540:	81 50       	subi	r24, 0x01	; 1
    5542:	89 83       	std	Y+1, r24	; 0x01
    5544:	13 c0       	rjmp	.+38     	; 0x556c <LinkedList_vidCompanion+0xea>
	{
		LCD_vidData(ptr[kk]);
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	99 27       	eor	r25, r25
    554a:	87 fd       	sbrc	r24, 7
    554c:	90 95       	com	r25
    554e:	9c 01       	movw	r18, r24
    5550:	22 0f       	add	r18, r18
    5552:	33 1f       	adc	r19, r19
    5554:	8c 81       	ldd	r24, Y+4	; 0x04
    5556:	9d 81       	ldd	r25, Y+5	; 0x05
    5558:	fc 01       	movw	r30, r24
    555a:	e2 0f       	add	r30, r18
    555c:	f3 1f       	adc	r31, r19
    555e:	80 81       	ld	r24, Z
    5560:	91 81       	ldd	r25, Z+1	; 0x01
    5562:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_vidData>
	for(k = 0; ptr[k] != '\0'; k++);

	//LCD_vidGoTo(1,2);

	// reverse the string sent
	for(s8 kk = k-1; kk >= 0; kk-- )
    5566:	89 81       	ldd	r24, Y+1	; 0x01
    5568:	81 50       	subi	r24, 0x01	; 1
    556a:	89 83       	std	Y+1, r24	; 0x01
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	88 23       	and	r24, r24
    5570:	54 f7       	brge	.-44     	; 0x5546 <LinkedList_vidCompanion+0xc4>
	{
		LCD_vidData(ptr[kk]);
	}


	free(ptr);
    5572:	8c 81       	ldd	r24, Y+4	; 0x04
    5574:	9d 81       	ldd	r25, Y+5	; 0x05
    5576:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <free>
}
    557a:	27 96       	adiw	r28, 0x07	; 7
    557c:	0f b6       	in	r0, 0x3f	; 63
    557e:	f8 94       	cli
    5580:	de bf       	out	0x3e, r29	; 62
    5582:	0f be       	out	0x3f, r0	; 63
    5584:	cd bf       	out	0x3d, r28	; 61
    5586:	cf 91       	pop	r28
    5588:	df 91       	pop	r29
    558a:	08 95       	ret

0000558c <main>:

void DISPLAY_OnDemand(char *str1, char *str2);


int main(void)
{
    558c:	df 93       	push	r29
    558e:	cf 93       	push	r28
    5590:	cd b7       	in	r28, 0x3d	; 61
    5592:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInitialize();
    5594:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_vidInitialize>
	BOOKS_vidInitialize();
    5598:	0e 94 90 18 	call	0x3120	; 0x3120 <BOOKS_vidInitialize>
	LinkedList_vidInitialize();
    559c:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <LinkedList_vidInitialize>

	LinkedList_vidInsertion("1", "Joey");
    55a0:	8d e0       	ldi	r24, 0x0D	; 13
    55a2:	92 e0       	ldi	r25, 0x02	; 2
    55a4:	2f e0       	ldi	r18, 0x0F	; 15
    55a6:	32 e0       	ldi	r19, 0x02	; 2
    55a8:	b9 01       	movw	r22, r18
    55aa:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <LinkedList_vidInsertion>
	LinkedList_vidInsertion("2", "John");
    55ae:	84 e1       	ldi	r24, 0x14	; 20
    55b0:	92 e0       	ldi	r25, 0x02	; 2
    55b2:	26 e1       	ldi	r18, 0x16	; 22
    55b4:	32 e0       	ldi	r19, 0x02	; 2
    55b6:	b9 01       	movw	r22, r18
    55b8:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <LinkedList_vidInsertion>
	LinkedList_vidInsertion("3", "Mark");
    55bc:	8b e1       	ldi	r24, 0x1B	; 27
    55be:	92 e0       	ldi	r25, 0x02	; 2
    55c0:	2d e1       	ldi	r18, 0x1D	; 29
    55c2:	32 e0       	ldi	r19, 0x02	; 2
    55c4:	b9 01       	movw	r22, r18
    55c6:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <LinkedList_vidInsertion>
	LinkedList_vidInsertion("4", "Rose");
    55ca:	82 e2       	ldi	r24, 0x22	; 34
    55cc:	92 e0       	ldi	r25, 0x02	; 2
    55ce:	24 e2       	ldi	r18, 0x24	; 36
    55d0:	32 e0       	ldi	r19, 0x02	; 2
    55d2:	b9 01       	movw	r22, r18
    55d4:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <LinkedList_vidInsertion>
	LinkedList_vidInsertion("5", "Sarah");
    55d8:	89 e2       	ldi	r24, 0x29	; 41
    55da:	92 e0       	ldi	r25, 0x02	; 2
    55dc:	2b e2       	ldi	r18, 0x2B	; 43
    55de:	32 e0       	ldi	r19, 0x02	; 2
    55e0:	b9 01       	movw	r22, r18
    55e2:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <LinkedList_vidInsertion>




	BOOKS_vidInsertion("0060832819", "The Zahir", 5);	//
    55e6:	81 e3       	ldi	r24, 0x31	; 49
    55e8:	92 e0       	ldi	r25, 0x02	; 2
    55ea:	2c e3       	ldi	r18, 0x3C	; 60
    55ec:	32 e0       	ldi	r19, 0x02	; 2
    55ee:	b9 01       	movw	r22, r18
    55f0:	45 e0       	ldi	r20, 0x05	; 5
    55f2:	0e 94 c3 18 	call	0x3186	; 0x3186 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("0062315005", "The Alchemist", 5);		//
    55f6:	86 e4       	ldi	r24, 0x46	; 70
    55f8:	92 e0       	ldi	r25, 0x02	; 2
    55fa:	21 e5       	ldi	r18, 0x51	; 81
    55fc:	32 e0       	ldi	r19, 0x02	; 2
    55fe:	b9 01       	movw	r22, r18
    5600:	45 e0       	ldi	r20, 0x05	; 5
    5602:	0e 94 c3 18 	call	0x3186	; 0x3186 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("1509825428", "Bleak House", 5);		//
    5606:	8f e5       	ldi	r24, 0x5F	; 95
    5608:	92 e0       	ldi	r25, 0x02	; 2
    560a:	2a e6       	ldi	r18, 0x6A	; 106
    560c:	32 e0       	ldi	r19, 0x02	; 2
    560e:	b9 01       	movw	r22, r18
    5610:	45 e0       	ldi	r20, 0x05	; 5
    5612:	0e 94 c3 18 	call	0x3186	; 0x3186 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("0141439675", "Hard times", 5);			//
    5616:	86 e7       	ldi	r24, 0x76	; 118
    5618:	92 e0       	ldi	r25, 0x02	; 2
    561a:	21 e8       	ldi	r18, 0x81	; 129
    561c:	32 e0       	ldi	r19, 0x02	; 2
    561e:	b9 01       	movw	r22, r18
    5620:	45 e0       	ldi	r20, 0x05	; 5
    5622:	0e 94 c3 18 	call	0x3186	; 0x3186 <BOOKS_vidInsertion>



	while(1)
	{
		LCD_vidClearOnDemand(1, 32);
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	60 e2       	ldi	r22, 0x20	; 32
    562a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>

		DISPLAY_OnDemand("1-INSER BOOK", "2-INSER MEMBER");
    562e:	8c e8       	ldi	r24, 0x8C	; 140
    5630:	92 e0       	ldi	r25, 0x02	; 2
    5632:	29 e9       	ldi	r18, 0x99	; 153
    5634:	32 e0       	ldi	r19, 0x02	; 2
    5636:	b9 01       	movw	r22, r18
    5638:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <DISPLAY_OnDemand>

		DISPLAY_OnDemand("3-BORROW BOOK", "4-RETURN BOOK");
    563c:	88 ea       	ldi	r24, 0xA8	; 168
    563e:	92 e0       	ldi	r25, 0x02	; 2
    5640:	26 eb       	ldi	r18, 0xB6	; 182
    5642:	32 e0       	ldi	r19, 0x02	; 2
    5644:	b9 01       	movw	r22, r18
    5646:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <DISPLAY_OnDemand>

		DISPLAY_OnDemand("5-Show all books", "6-Show all members");
    564a:	84 ec       	ldi	r24, 0xC4	; 196
    564c:	92 e0       	ldi	r25, 0x02	; 2
    564e:	25 ed       	ldi	r18, 0xD5	; 213
    5650:	32 e0       	ldi	r19, 0x02	; 2
    5652:	b9 01       	movw	r22, r18
    5654:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <DISPLAY_OnDemand>

		DISPLAY_OnDemand("7-Member's INFO.", "                 ");
    5658:	88 ee       	ldi	r24, 0xE8	; 232
    565a:	92 e0       	ldi	r25, 0x02	; 2
    565c:	29 ef       	ldi	r18, 0xF9	; 249
    565e:	32 e0       	ldi	r19, 0x02	; 2
    5660:	b9 01       	movw	r22, r18
    5662:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <DISPLAY_OnDemand>

		LCD_String("OPERATION NO. :");
    5666:	8b e0       	ldi	r24, 0x0B	; 11
    5668:	93 e0       	ldi	r25, 0x03	; 3
    566a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
		LCD_vidGoTo(1, 2);
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	62 e0       	ldi	r22, 0x02	; 2
    5672:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>


		KeyPad_vidInitialize();
    5676:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <KeyPad_vidInitialize>

		if(DEAD_SIGNAL_TERMINATE)
    567a:	80 91 5a 03 	lds	r24, 0x035A
    567e:	88 23       	and	r24, r24
    5680:	91 f2       	breq	.-92     	; 0x5626 <main+0x9a>
		{
			DEAD_SIGNAL_TERMINATE = 0;
    5682:	10 92 5a 03 	sts	0x035A, r1

			// Reset pointers to the head ot its linked list
			restart_vip();
    5686:	0e 94 a1 21 	call	0x4342	; 0x4342 <restart_vip>
			BOOKS_restart_vip();
    568a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <BOOKS_restart_vip>

			// Delete the whole data base
			LinkedList_u8DeleteEntire();
    568e:	0e 94 5f 21 	call	0x42be	; 0x42be <LinkedList_u8DeleteEntire>
			BOOKS_u8DeleteEntire();
    5692:	0e 94 17 1a 	call	0x342e	; 0x342e <BOOKS_u8DeleteEntire>
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
}
    569a:	cf 91       	pop	r28
    569c:	df 91       	pop	r29
    569e:	08 95       	ret

000056a0 <DISPLAY_OnDemand>:

void DISPLAY_OnDemand(char *str1, char *str2)
{
    56a0:	df 93       	push	r29
    56a2:	cf 93       	push	r28
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	62 97       	sbiw	r28, 0x12	; 18
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	f8 94       	cli
    56ae:	de bf       	out	0x3e, r29	; 62
    56b0:	0f be       	out	0x3f, r0	; 63
    56b2:	cd bf       	out	0x3d, r28	; 61
    56b4:	98 8b       	std	Y+16, r25	; 0x10
    56b6:	8f 87       	std	Y+15, r24	; 0x0f
    56b8:	7a 8b       	std	Y+18, r23	; 0x12
    56ba:	69 8b       	std	Y+17, r22	; 0x11
	LCD_vidClearOnDemand(1, 32);
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	60 e2       	ldi	r22, 0x20	; 32
    56c0:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
	// Display 1st string
	LCD_vidGoTo(1, 1);
    56c4:	81 e0       	ldi	r24, 0x01	; 1
    56c6:	61 e0       	ldi	r22, 0x01	; 1
    56c8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
	LCD_String(str1);
    56cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    56ce:	98 89       	ldd	r25, Y+16	; 0x10
    56d0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
	// Display 2nd string
	LCD_vidGoTo(1, 2);
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	62 e0       	ldi	r22, 0x02	; 2
    56d8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_vidGoTo>
	LCD_String(str2);
    56dc:	89 89       	ldd	r24, Y+17	; 0x11
    56de:	9a 89       	ldd	r25, Y+18	; 0x12
    56e0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_String>
    56e4:	80 e0       	ldi	r24, 0x00	; 0
    56e6:	90 e8       	ldi	r25, 0x80	; 128
    56e8:	a2 ea       	ldi	r26, 0xA2	; 162
    56ea:	b4 e4       	ldi	r27, 0x44	; 68
    56ec:	8b 87       	std	Y+11, r24	; 0x0b
    56ee:	9c 87       	std	Y+12, r25	; 0x0c
    56f0:	ad 87       	std	Y+13, r26	; 0x0d
    56f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    56fc:	20 e0       	ldi	r18, 0x00	; 0
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	4a ef       	ldi	r20, 0xFA	; 250
    5702:	54 e4       	ldi	r21, 0x44	; 68
    5704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5708:	dc 01       	movw	r26, r24
    570a:	cb 01       	movw	r24, r22
    570c:	8f 83       	std	Y+7, r24	; 0x07
    570e:	98 87       	std	Y+8, r25	; 0x08
    5710:	a9 87       	std	Y+9, r26	; 0x09
    5712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5714:	6f 81       	ldd	r22, Y+7	; 0x07
    5716:	78 85       	ldd	r23, Y+8	; 0x08
    5718:	89 85       	ldd	r24, Y+9	; 0x09
    571a:	9a 85       	ldd	r25, Y+10	; 0x0a
    571c:	20 e0       	ldi	r18, 0x00	; 0
    571e:	30 e0       	ldi	r19, 0x00	; 0
    5720:	40 e8       	ldi	r20, 0x80	; 128
    5722:	5f e3       	ldi	r21, 0x3F	; 63
    5724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5728:	88 23       	and	r24, r24
    572a:	2c f4       	brge	.+10     	; 0x5736 <DISPLAY_OnDemand+0x96>
		__ticks = 1;
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	9e 83       	std	Y+6, r25	; 0x06
    5732:	8d 83       	std	Y+5, r24	; 0x05
    5734:	3f c0       	rjmp	.+126    	; 0x57b4 <DISPLAY_OnDemand+0x114>
	else if (__tmp > 65535)
    5736:	6f 81       	ldd	r22, Y+7	; 0x07
    5738:	78 85       	ldd	r23, Y+8	; 0x08
    573a:	89 85       	ldd	r24, Y+9	; 0x09
    573c:	9a 85       	ldd	r25, Y+10	; 0x0a
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	3f ef       	ldi	r19, 0xFF	; 255
    5742:	4f e7       	ldi	r20, 0x7F	; 127
    5744:	57 e4       	ldi	r21, 0x47	; 71
    5746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    574a:	18 16       	cp	r1, r24
    574c:	4c f5       	brge	.+82     	; 0x57a0 <DISPLAY_OnDemand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    574e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5750:	7c 85       	ldd	r23, Y+12	; 0x0c
    5752:	8d 85       	ldd	r24, Y+13	; 0x0d
    5754:	9e 85       	ldd	r25, Y+14	; 0x0e
    5756:	20 e0       	ldi	r18, 0x00	; 0
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	40 e2       	ldi	r20, 0x20	; 32
    575c:	51 e4       	ldi	r21, 0x41	; 65
    575e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5762:	dc 01       	movw	r26, r24
    5764:	cb 01       	movw	r24, r22
    5766:	bc 01       	movw	r22, r24
    5768:	cd 01       	movw	r24, r26
    576a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    576e:	dc 01       	movw	r26, r24
    5770:	cb 01       	movw	r24, r22
    5772:	9e 83       	std	Y+6, r25	; 0x06
    5774:	8d 83       	std	Y+5, r24	; 0x05
    5776:	0f c0       	rjmp	.+30     	; 0x5796 <DISPLAY_OnDemand+0xf6>
    5778:	88 ec       	ldi	r24, 0xC8	; 200
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	9c 83       	std	Y+4, r25	; 0x04
    577e:	8b 83       	std	Y+3, r24	; 0x03
    5780:	8b 81       	ldd	r24, Y+3	; 0x03
    5782:	9c 81       	ldd	r25, Y+4	; 0x04
    5784:	01 97       	sbiw	r24, 0x01	; 1
    5786:	f1 f7       	brne	.-4      	; 0x5784 <DISPLAY_OnDemand+0xe4>
    5788:	9c 83       	std	Y+4, r25	; 0x04
    578a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    578c:	8d 81       	ldd	r24, Y+5	; 0x05
    578e:	9e 81       	ldd	r25, Y+6	; 0x06
    5790:	01 97       	sbiw	r24, 0x01	; 1
    5792:	9e 83       	std	Y+6, r25	; 0x06
    5794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5796:	8d 81       	ldd	r24, Y+5	; 0x05
    5798:	9e 81       	ldd	r25, Y+6	; 0x06
    579a:	00 97       	sbiw	r24, 0x00	; 0
    579c:	69 f7       	brne	.-38     	; 0x5778 <DISPLAY_OnDemand+0xd8>
    579e:	14 c0       	rjmp	.+40     	; 0x57c8 <DISPLAY_OnDemand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57a0:	6f 81       	ldd	r22, Y+7	; 0x07
    57a2:	78 85       	ldd	r23, Y+8	; 0x08
    57a4:	89 85       	ldd	r24, Y+9	; 0x09
    57a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ac:	dc 01       	movw	r26, r24
    57ae:	cb 01       	movw	r24, r22
    57b0:	9e 83       	std	Y+6, r25	; 0x06
    57b2:	8d 83       	std	Y+5, r24	; 0x05
    57b4:	8d 81       	ldd	r24, Y+5	; 0x05
    57b6:	9e 81       	ldd	r25, Y+6	; 0x06
    57b8:	9a 83       	std	Y+2, r25	; 0x02
    57ba:	89 83       	std	Y+1, r24	; 0x01
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	9a 81       	ldd	r25, Y+2	; 0x02
    57c0:	01 97       	sbiw	r24, 0x01	; 1
    57c2:	f1 f7       	brne	.-4      	; 0x57c0 <DISPLAY_OnDemand+0x120>
    57c4:	9a 83       	std	Y+2, r25	; 0x02
    57c6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1300);
	// Clear whole display
	LCD_vidClearOnDemand(1, 32);
    57c8:	81 e0       	ldi	r24, 0x01	; 1
    57ca:	60 e2       	ldi	r22, 0x20	; 32
    57cc:	0e 94 63 18 	call	0x30c6	; 0x30c6 <LCD_vidClearOnDemand>
}
    57d0:	62 96       	adiw	r28, 0x12	; 18
    57d2:	0f b6       	in	r0, 0x3f	; 63
    57d4:	f8 94       	cli
    57d6:	de bf       	out	0x3e, r29	; 62
    57d8:	0f be       	out	0x3f, r0	; 63
    57da:	cd bf       	out	0x3d, r28	; 61
    57dc:	cf 91       	pop	r28
    57de:	df 91       	pop	r29
    57e0:	08 95       	ret

000057e2 <__udivmodqi4>:
    57e2:	99 1b       	sub	r25, r25
    57e4:	79 e0       	ldi	r23, 0x09	; 9
    57e6:	04 c0       	rjmp	.+8      	; 0x57f0 <__udivmodqi4_ep>

000057e8 <__udivmodqi4_loop>:
    57e8:	99 1f       	adc	r25, r25
    57ea:	96 17       	cp	r25, r22
    57ec:	08 f0       	brcs	.+2      	; 0x57f0 <__udivmodqi4_ep>
    57ee:	96 1b       	sub	r25, r22

000057f0 <__udivmodqi4_ep>:
    57f0:	88 1f       	adc	r24, r24
    57f2:	7a 95       	dec	r23
    57f4:	c9 f7       	brne	.-14     	; 0x57e8 <__udivmodqi4_loop>
    57f6:	80 95       	com	r24
    57f8:	08 95       	ret

000057fa <__udivmodhi4>:
    57fa:	aa 1b       	sub	r26, r26
    57fc:	bb 1b       	sub	r27, r27
    57fe:	51 e1       	ldi	r21, 0x11	; 17
    5800:	07 c0       	rjmp	.+14     	; 0x5810 <__udivmodhi4_ep>

00005802 <__udivmodhi4_loop>:
    5802:	aa 1f       	adc	r26, r26
    5804:	bb 1f       	adc	r27, r27
    5806:	a6 17       	cp	r26, r22
    5808:	b7 07       	cpc	r27, r23
    580a:	10 f0       	brcs	.+4      	; 0x5810 <__udivmodhi4_ep>
    580c:	a6 1b       	sub	r26, r22
    580e:	b7 0b       	sbc	r27, r23

00005810 <__udivmodhi4_ep>:
    5810:	88 1f       	adc	r24, r24
    5812:	99 1f       	adc	r25, r25
    5814:	5a 95       	dec	r21
    5816:	a9 f7       	brne	.-22     	; 0x5802 <__udivmodhi4_loop>
    5818:	80 95       	com	r24
    581a:	90 95       	com	r25
    581c:	bc 01       	movw	r22, r24
    581e:	cd 01       	movw	r24, r26
    5820:	08 95       	ret

00005822 <__divmodhi4>:
    5822:	97 fb       	bst	r25, 7
    5824:	09 2e       	mov	r0, r25
    5826:	07 26       	eor	r0, r23
    5828:	0a d0       	rcall	.+20     	; 0x583e <__divmodhi4_neg1>
    582a:	77 fd       	sbrc	r23, 7
    582c:	04 d0       	rcall	.+8      	; 0x5836 <__divmodhi4_neg2>
    582e:	e5 df       	rcall	.-54     	; 0x57fa <__udivmodhi4>
    5830:	06 d0       	rcall	.+12     	; 0x583e <__divmodhi4_neg1>
    5832:	00 20       	and	r0, r0
    5834:	1a f4       	brpl	.+6      	; 0x583c <__divmodhi4_exit>

00005836 <__divmodhi4_neg2>:
    5836:	70 95       	com	r23
    5838:	61 95       	neg	r22
    583a:	7f 4f       	sbci	r23, 0xFF	; 255

0000583c <__divmodhi4_exit>:
    583c:	08 95       	ret

0000583e <__divmodhi4_neg1>:
    583e:	f6 f7       	brtc	.-4      	; 0x583c <__divmodhi4_exit>
    5840:	90 95       	com	r25
    5842:	81 95       	neg	r24
    5844:	9f 4f       	sbci	r25, 0xFF	; 255
    5846:	08 95       	ret

00005848 <__prologue_saves__>:
    5848:	2f 92       	push	r2
    584a:	3f 92       	push	r3
    584c:	4f 92       	push	r4
    584e:	5f 92       	push	r5
    5850:	6f 92       	push	r6
    5852:	7f 92       	push	r7
    5854:	8f 92       	push	r8
    5856:	9f 92       	push	r9
    5858:	af 92       	push	r10
    585a:	bf 92       	push	r11
    585c:	cf 92       	push	r12
    585e:	df 92       	push	r13
    5860:	ef 92       	push	r14
    5862:	ff 92       	push	r15
    5864:	0f 93       	push	r16
    5866:	1f 93       	push	r17
    5868:	cf 93       	push	r28
    586a:	df 93       	push	r29
    586c:	cd b7       	in	r28, 0x3d	; 61
    586e:	de b7       	in	r29, 0x3e	; 62
    5870:	ca 1b       	sub	r28, r26
    5872:	db 0b       	sbc	r29, r27
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	f8 94       	cli
    5878:	de bf       	out	0x3e, r29	; 62
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	cd bf       	out	0x3d, r28	; 61
    587e:	09 94       	ijmp

00005880 <__epilogue_restores__>:
    5880:	2a 88       	ldd	r2, Y+18	; 0x12
    5882:	39 88       	ldd	r3, Y+17	; 0x11
    5884:	48 88       	ldd	r4, Y+16	; 0x10
    5886:	5f 84       	ldd	r5, Y+15	; 0x0f
    5888:	6e 84       	ldd	r6, Y+14	; 0x0e
    588a:	7d 84       	ldd	r7, Y+13	; 0x0d
    588c:	8c 84       	ldd	r8, Y+12	; 0x0c
    588e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5890:	aa 84       	ldd	r10, Y+10	; 0x0a
    5892:	b9 84       	ldd	r11, Y+9	; 0x09
    5894:	c8 84       	ldd	r12, Y+8	; 0x08
    5896:	df 80       	ldd	r13, Y+7	; 0x07
    5898:	ee 80       	ldd	r14, Y+6	; 0x06
    589a:	fd 80       	ldd	r15, Y+5	; 0x05
    589c:	0c 81       	ldd	r16, Y+4	; 0x04
    589e:	1b 81       	ldd	r17, Y+3	; 0x03
    58a0:	aa 81       	ldd	r26, Y+2	; 0x02
    58a2:	b9 81       	ldd	r27, Y+1	; 0x01
    58a4:	ce 0f       	add	r28, r30
    58a6:	d1 1d       	adc	r29, r1
    58a8:	0f b6       	in	r0, 0x3f	; 63
    58aa:	f8 94       	cli
    58ac:	de bf       	out	0x3e, r29	; 62
    58ae:	0f be       	out	0x3f, r0	; 63
    58b0:	cd bf       	out	0x3d, r28	; 61
    58b2:	ed 01       	movw	r28, r26
    58b4:	08 95       	ret

000058b6 <malloc>:
    58b6:	cf 93       	push	r28
    58b8:	df 93       	push	r29
    58ba:	bc 01       	movw	r22, r24
    58bc:	82 30       	cpi	r24, 0x02	; 2
    58be:	91 05       	cpc	r25, r1
    58c0:	10 f4       	brcc	.+4      	; 0x58c6 <malloc+0x10>
    58c2:	62 e0       	ldi	r22, 0x02	; 2
    58c4:	70 e0       	ldi	r23, 0x00	; 0
    58c6:	a0 91 c2 03 	lds	r26, 0x03C2
    58ca:	b0 91 c3 03 	lds	r27, 0x03C3
    58ce:	ed 01       	movw	r28, r26
    58d0:	e0 e0       	ldi	r30, 0x00	; 0
    58d2:	f0 e0       	ldi	r31, 0x00	; 0
    58d4:	40 e0       	ldi	r20, 0x00	; 0
    58d6:	50 e0       	ldi	r21, 0x00	; 0
    58d8:	21 c0       	rjmp	.+66     	; 0x591c <malloc+0x66>
    58da:	88 81       	ld	r24, Y
    58dc:	99 81       	ldd	r25, Y+1	; 0x01
    58de:	86 17       	cp	r24, r22
    58e0:	97 07       	cpc	r25, r23
    58e2:	69 f4       	brne	.+26     	; 0x58fe <malloc+0x48>
    58e4:	8a 81       	ldd	r24, Y+2	; 0x02
    58e6:	9b 81       	ldd	r25, Y+3	; 0x03
    58e8:	30 97       	sbiw	r30, 0x00	; 0
    58ea:	19 f0       	breq	.+6      	; 0x58f2 <malloc+0x3c>
    58ec:	93 83       	std	Z+3, r25	; 0x03
    58ee:	82 83       	std	Z+2, r24	; 0x02
    58f0:	04 c0       	rjmp	.+8      	; 0x58fa <malloc+0x44>
    58f2:	90 93 c3 03 	sts	0x03C3, r25
    58f6:	80 93 c2 03 	sts	0x03C2, r24
    58fa:	fe 01       	movw	r30, r28
    58fc:	34 c0       	rjmp	.+104    	; 0x5966 <malloc+0xb0>
    58fe:	68 17       	cp	r22, r24
    5900:	79 07       	cpc	r23, r25
    5902:	38 f4       	brcc	.+14     	; 0x5912 <malloc+0x5c>
    5904:	41 15       	cp	r20, r1
    5906:	51 05       	cpc	r21, r1
    5908:	19 f0       	breq	.+6      	; 0x5910 <malloc+0x5a>
    590a:	84 17       	cp	r24, r20
    590c:	95 07       	cpc	r25, r21
    590e:	08 f4       	brcc	.+2      	; 0x5912 <malloc+0x5c>
    5910:	ac 01       	movw	r20, r24
    5912:	fe 01       	movw	r30, r28
    5914:	8a 81       	ldd	r24, Y+2	; 0x02
    5916:	9b 81       	ldd	r25, Y+3	; 0x03
    5918:	9c 01       	movw	r18, r24
    591a:	e9 01       	movw	r28, r18
    591c:	20 97       	sbiw	r28, 0x00	; 0
    591e:	e9 f6       	brne	.-70     	; 0x58da <malloc+0x24>
    5920:	41 15       	cp	r20, r1
    5922:	51 05       	cpc	r21, r1
    5924:	a9 f1       	breq	.+106    	; 0x5990 <malloc+0xda>
    5926:	ca 01       	movw	r24, r20
    5928:	86 1b       	sub	r24, r22
    592a:	97 0b       	sbc	r25, r23
    592c:	04 97       	sbiw	r24, 0x04	; 4
    592e:	08 f4       	brcc	.+2      	; 0x5932 <malloc+0x7c>
    5930:	ba 01       	movw	r22, r20
    5932:	e0 e0       	ldi	r30, 0x00	; 0
    5934:	f0 e0       	ldi	r31, 0x00	; 0
    5936:	2a c0       	rjmp	.+84     	; 0x598c <malloc+0xd6>
    5938:	8d 91       	ld	r24, X+
    593a:	9c 91       	ld	r25, X
    593c:	11 97       	sbiw	r26, 0x01	; 1
    593e:	84 17       	cp	r24, r20
    5940:	95 07       	cpc	r25, r21
    5942:	f9 f4       	brne	.+62     	; 0x5982 <malloc+0xcc>
    5944:	64 17       	cp	r22, r20
    5946:	75 07       	cpc	r23, r21
    5948:	81 f4       	brne	.+32     	; 0x596a <malloc+0xb4>
    594a:	12 96       	adiw	r26, 0x02	; 2
    594c:	8d 91       	ld	r24, X+
    594e:	9c 91       	ld	r25, X
    5950:	13 97       	sbiw	r26, 0x03	; 3
    5952:	30 97       	sbiw	r30, 0x00	; 0
    5954:	19 f0       	breq	.+6      	; 0x595c <malloc+0xa6>
    5956:	93 83       	std	Z+3, r25	; 0x03
    5958:	82 83       	std	Z+2, r24	; 0x02
    595a:	04 c0       	rjmp	.+8      	; 0x5964 <malloc+0xae>
    595c:	90 93 c3 03 	sts	0x03C3, r25
    5960:	80 93 c2 03 	sts	0x03C2, r24
    5964:	fd 01       	movw	r30, r26
    5966:	32 96       	adiw	r30, 0x02	; 2
    5968:	4f c0       	rjmp	.+158    	; 0x5a08 <malloc+0x152>
    596a:	ca 01       	movw	r24, r20
    596c:	86 1b       	sub	r24, r22
    596e:	97 0b       	sbc	r25, r23
    5970:	fd 01       	movw	r30, r26
    5972:	e8 0f       	add	r30, r24
    5974:	f9 1f       	adc	r31, r25
    5976:	61 93       	st	Z+, r22
    5978:	71 93       	st	Z+, r23
    597a:	02 97       	sbiw	r24, 0x02	; 2
    597c:	8d 93       	st	X+, r24
    597e:	9c 93       	st	X, r25
    5980:	43 c0       	rjmp	.+134    	; 0x5a08 <malloc+0x152>
    5982:	fd 01       	movw	r30, r26
    5984:	82 81       	ldd	r24, Z+2	; 0x02
    5986:	93 81       	ldd	r25, Z+3	; 0x03
    5988:	9c 01       	movw	r18, r24
    598a:	d9 01       	movw	r26, r18
    598c:	10 97       	sbiw	r26, 0x00	; 0
    598e:	a1 f6       	brne	.-88     	; 0x5938 <malloc+0x82>
    5990:	80 91 c0 03 	lds	r24, 0x03C0
    5994:	90 91 c1 03 	lds	r25, 0x03C1
    5998:	89 2b       	or	r24, r25
    599a:	41 f4       	brne	.+16     	; 0x59ac <malloc+0xf6>
    599c:	80 91 25 03 	lds	r24, 0x0325
    59a0:	90 91 26 03 	lds	r25, 0x0326
    59a4:	90 93 c1 03 	sts	0x03C1, r25
    59a8:	80 93 c0 03 	sts	0x03C0, r24
    59ac:	40 91 27 03 	lds	r20, 0x0327
    59b0:	50 91 28 03 	lds	r21, 0x0328
    59b4:	41 15       	cp	r20, r1
    59b6:	51 05       	cpc	r21, r1
    59b8:	41 f4       	brne	.+16     	; 0x59ca <malloc+0x114>
    59ba:	4d b7       	in	r20, 0x3d	; 61
    59bc:	5e b7       	in	r21, 0x3e	; 62
    59be:	80 91 23 03 	lds	r24, 0x0323
    59c2:	90 91 24 03 	lds	r25, 0x0324
    59c6:	48 1b       	sub	r20, r24
    59c8:	59 0b       	sbc	r21, r25
    59ca:	20 91 c0 03 	lds	r18, 0x03C0
    59ce:	30 91 c1 03 	lds	r19, 0x03C1
    59d2:	24 17       	cp	r18, r20
    59d4:	35 07       	cpc	r19, r21
    59d6:	b0 f4       	brcc	.+44     	; 0x5a04 <malloc+0x14e>
    59d8:	ca 01       	movw	r24, r20
    59da:	82 1b       	sub	r24, r18
    59dc:	93 0b       	sbc	r25, r19
    59de:	86 17       	cp	r24, r22
    59e0:	97 07       	cpc	r25, r23
    59e2:	80 f0       	brcs	.+32     	; 0x5a04 <malloc+0x14e>
    59e4:	ab 01       	movw	r20, r22
    59e6:	4e 5f       	subi	r20, 0xFE	; 254
    59e8:	5f 4f       	sbci	r21, 0xFF	; 255
    59ea:	84 17       	cp	r24, r20
    59ec:	95 07       	cpc	r25, r21
    59ee:	50 f0       	brcs	.+20     	; 0x5a04 <malloc+0x14e>
    59f0:	42 0f       	add	r20, r18
    59f2:	53 1f       	adc	r21, r19
    59f4:	50 93 c1 03 	sts	0x03C1, r21
    59f8:	40 93 c0 03 	sts	0x03C0, r20
    59fc:	f9 01       	movw	r30, r18
    59fe:	61 93       	st	Z+, r22
    5a00:	71 93       	st	Z+, r23
    5a02:	02 c0       	rjmp	.+4      	; 0x5a08 <malloc+0x152>
    5a04:	e0 e0       	ldi	r30, 0x00	; 0
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	cf 01       	movw	r24, r30
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	08 95       	ret

00005a10 <free>:
    5a10:	cf 93       	push	r28
    5a12:	df 93       	push	r29
    5a14:	00 97       	sbiw	r24, 0x00	; 0
    5a16:	09 f4       	brne	.+2      	; 0x5a1a <free+0xa>
    5a18:	50 c0       	rjmp	.+160    	; 0x5aba <free+0xaa>
    5a1a:	ec 01       	movw	r28, r24
    5a1c:	22 97       	sbiw	r28, 0x02	; 2
    5a1e:	1b 82       	std	Y+3, r1	; 0x03
    5a20:	1a 82       	std	Y+2, r1	; 0x02
    5a22:	a0 91 c2 03 	lds	r26, 0x03C2
    5a26:	b0 91 c3 03 	lds	r27, 0x03C3
    5a2a:	10 97       	sbiw	r26, 0x00	; 0
    5a2c:	09 f1       	breq	.+66     	; 0x5a70 <free+0x60>
    5a2e:	40 e0       	ldi	r20, 0x00	; 0
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	ac 17       	cp	r26, r28
    5a34:	bd 07       	cpc	r27, r29
    5a36:	08 f1       	brcs	.+66     	; 0x5a7a <free+0x6a>
    5a38:	bb 83       	std	Y+3, r27	; 0x03
    5a3a:	aa 83       	std	Y+2, r26	; 0x02
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	21 91       	ld	r18, Z+
    5a40:	31 91       	ld	r19, Z+
    5a42:	e2 0f       	add	r30, r18
    5a44:	f3 1f       	adc	r31, r19
    5a46:	ae 17       	cp	r26, r30
    5a48:	bf 07       	cpc	r27, r31
    5a4a:	79 f4       	brne	.+30     	; 0x5a6a <free+0x5a>
    5a4c:	8d 91       	ld	r24, X+
    5a4e:	9c 91       	ld	r25, X
    5a50:	11 97       	sbiw	r26, 0x01	; 1
    5a52:	28 0f       	add	r18, r24
    5a54:	39 1f       	adc	r19, r25
    5a56:	2e 5f       	subi	r18, 0xFE	; 254
    5a58:	3f 4f       	sbci	r19, 0xFF	; 255
    5a5a:	39 83       	std	Y+1, r19	; 0x01
    5a5c:	28 83       	st	Y, r18
    5a5e:	12 96       	adiw	r26, 0x02	; 2
    5a60:	8d 91       	ld	r24, X+
    5a62:	9c 91       	ld	r25, X
    5a64:	13 97       	sbiw	r26, 0x03	; 3
    5a66:	9b 83       	std	Y+3, r25	; 0x03
    5a68:	8a 83       	std	Y+2, r24	; 0x02
    5a6a:	41 15       	cp	r20, r1
    5a6c:	51 05       	cpc	r21, r1
    5a6e:	71 f4       	brne	.+28     	; 0x5a8c <free+0x7c>
    5a70:	d0 93 c3 03 	sts	0x03C3, r29
    5a74:	c0 93 c2 03 	sts	0x03C2, r28
    5a78:	20 c0       	rjmp	.+64     	; 0x5aba <free+0xaa>
    5a7a:	12 96       	adiw	r26, 0x02	; 2
    5a7c:	8d 91       	ld	r24, X+
    5a7e:	9c 91       	ld	r25, X
    5a80:	13 97       	sbiw	r26, 0x03	; 3
    5a82:	ad 01       	movw	r20, r26
    5a84:	00 97       	sbiw	r24, 0x00	; 0
    5a86:	11 f0       	breq	.+4      	; 0x5a8c <free+0x7c>
    5a88:	dc 01       	movw	r26, r24
    5a8a:	d3 cf       	rjmp	.-90     	; 0x5a32 <free+0x22>
    5a8c:	fa 01       	movw	r30, r20
    5a8e:	d3 83       	std	Z+3, r29	; 0x03
    5a90:	c2 83       	std	Z+2, r28	; 0x02
    5a92:	21 91       	ld	r18, Z+
    5a94:	31 91       	ld	r19, Z+
    5a96:	e2 0f       	add	r30, r18
    5a98:	f3 1f       	adc	r31, r19
    5a9a:	ce 17       	cp	r28, r30
    5a9c:	df 07       	cpc	r29, r31
    5a9e:	69 f4       	brne	.+26     	; 0x5aba <free+0xaa>
    5aa0:	88 81       	ld	r24, Y
    5aa2:	99 81       	ldd	r25, Y+1	; 0x01
    5aa4:	28 0f       	add	r18, r24
    5aa6:	39 1f       	adc	r19, r25
    5aa8:	2e 5f       	subi	r18, 0xFE	; 254
    5aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    5aac:	fa 01       	movw	r30, r20
    5aae:	31 83       	std	Z+1, r19	; 0x01
    5ab0:	20 83       	st	Z, r18
    5ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab6:	93 83       	std	Z+3, r25	; 0x03
    5ab8:	82 83       	std	Z+2, r24	; 0x02
    5aba:	df 91       	pop	r29
    5abc:	cf 91       	pop	r28
    5abe:	08 95       	ret

00005ac0 <_exit>:
    5ac0:	f8 94       	cli

00005ac2 <__stop_program>:
    5ac2:	ff cf       	rjmp	.-2      	; 0x5ac2 <__stop_program>
